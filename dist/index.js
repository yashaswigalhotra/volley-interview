/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ask-sdk-core/dist/attributes/AttributesManagerFactory.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributesManagerFactory = void 0;\nconst ask_sdk_runtime_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/index.js\");\n/**\n * Provider for attributes that can be stored on three levels: request, session and persistence.\n */\nclass AttributesManagerFactory {\n    static init(options) {\n        if (!options.requestEnvelope) {\n            throw ask_sdk_runtime_1.createAskSdkError('AttributesManagerFactory', 'RequestEnvelope cannot be null or undefined!');\n        }\n        let thisRequestAttributes = {};\n        let thisSessionAttributes = options.requestEnvelope.session\n            ? options.requestEnvelope.session.attributes\n                ? JSON.parse(JSON.stringify(options.requestEnvelope.session.attributes))\n                : {}\n            : undefined;\n        let thisPersistentAttributes;\n        let persistentAttributesSet = false;\n        return {\n            getRequestAttributes() {\n                return thisRequestAttributes;\n            },\n            getSessionAttributes() {\n                if (!options.requestEnvelope.session) {\n                    throw ask_sdk_runtime_1.createAskSdkError('AttributesManager', 'Cannot get SessionAttributes from out of session request!');\n                }\n                return thisSessionAttributes;\n            },\n            async getPersistentAttributes(useSessionCache = true, defaultAttributes) {\n                if (!options.persistenceAdapter) {\n                    throw ask_sdk_runtime_1.createAskSdkError('AttributesManager', 'Cannot get PersistentAttributes without PersistenceManager');\n                }\n                if (!persistentAttributesSet || !useSessionCache) {\n                    thisPersistentAttributes = await options.persistenceAdapter.getAttributes(options.requestEnvelope);\n                    persistentAttributesSet = true;\n                }\n                if (defaultAttributes && (!thisPersistentAttributes || Object.keys(thisPersistentAttributes).length < 1)) {\n                    thisPersistentAttributes = defaultAttributes;\n                }\n                return thisPersistentAttributes;\n            },\n            setRequestAttributes(requestAttributes) {\n                thisRequestAttributes = requestAttributes;\n            },\n            setSessionAttributes(sessionAttributes) {\n                if (!options.requestEnvelope.session) {\n                    throw ask_sdk_runtime_1.createAskSdkError('AttributesManager', 'Cannot set SessionAttributes to out of session request!');\n                }\n                thisSessionAttributes = sessionAttributes;\n            },\n            setPersistentAttributes(persistentAttributes) {\n                if (!options.persistenceAdapter) {\n                    throw ask_sdk_runtime_1.createAskSdkError('AttributesManager', 'Cannot set PersistentAttributes without persistence adapter!');\n                }\n                thisPersistentAttributes = persistentAttributes;\n                persistentAttributesSet = true;\n            },\n            async savePersistentAttributes() {\n                if (!options.persistenceAdapter) {\n                    throw ask_sdk_runtime_1.createAskSdkError('AttributesManager', 'Cannot save PersistentAttributes without persistence adapter!');\n                }\n                if (persistentAttributesSet) {\n                    await options.persistenceAdapter.saveAttributes(options.requestEnvelope, thisPersistentAttributes);\n                }\n            },\n            async deletePersistentAttributes() {\n                if (!options.persistenceAdapter) {\n                    throw ask_sdk_runtime_1.createAskSdkError('AttributesManager', 'Cannot delete PersistentAttributes without persistence adapter!');\n                }\n                await options.persistenceAdapter.deleteAttributes(options.requestEnvelope);\n                thisPersistentAttributes = undefined;\n                persistentAttributesSet = false;\n            },\n        };\n    }\n    constructor() { }\n}\nexports.AttributesManagerFactory = AttributesManagerFactory;\n//# sourceMappingURL=AttributesManagerFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvYXR0cmlidXRlcy9BdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvYXR0cmlidXRlcy9BdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnkuanM/M2Q2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeSA9IHZvaWQgMDtcbmNvbnN0IGFza19zZGtfcnVudGltZV8xID0gcmVxdWlyZShcImFzay1zZGstcnVudGltZVwiKTtcbi8qKlxuICogUHJvdmlkZXIgZm9yIGF0dHJpYnV0ZXMgdGhhdCBjYW4gYmUgc3RvcmVkIG9uIHRocmVlIGxldmVsczogcmVxdWVzdCwgc2Vzc2lvbiBhbmQgcGVyc2lzdGVuY2UuXG4gKi9cbmNsYXNzIEF0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeSB7XG4gICAgc3RhdGljIGluaXQob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMucmVxdWVzdEVudmVsb3BlKSB7XG4gICAgICAgICAgICB0aHJvdyBhc2tfc2RrX3J1bnRpbWVfMS5jcmVhdGVBc2tTZGtFcnJvcignQXR0cmlidXRlc01hbmFnZXJGYWN0b3J5JywgJ1JlcXVlc3RFbnZlbG9wZSBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRoaXNSZXF1ZXN0QXR0cmlidXRlcyA9IHt9O1xuICAgICAgICBsZXQgdGhpc1Nlc3Npb25BdHRyaWJ1dGVzID0gb3B0aW9ucy5yZXF1ZXN0RW52ZWxvcGUuc2Vzc2lvblxuICAgICAgICAgICAgPyBvcHRpb25zLnJlcXVlc3RFbnZlbG9wZS5zZXNzaW9uLmF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICA/IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5yZXF1ZXN0RW52ZWxvcGUuc2Vzc2lvbi5hdHRyaWJ1dGVzKSlcbiAgICAgICAgICAgICAgICA6IHt9XG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHRoaXNQZXJzaXN0ZW50QXR0cmlidXRlcztcbiAgICAgICAgbGV0IHBlcnNpc3RlbnRBdHRyaWJ1dGVzU2V0ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRSZXF1ZXN0QXR0cmlidXRlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1JlcXVlc3RBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNlc3Npb25BdHRyaWJ1dGVzKCkge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5yZXF1ZXN0RW52ZWxvcGUuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBhc2tfc2RrX3J1bnRpbWVfMS5jcmVhdGVBc2tTZGtFcnJvcignQXR0cmlidXRlc01hbmFnZXInLCAnQ2Fubm90IGdldCBTZXNzaW9uQXR0cmlidXRlcyBmcm9tIG91dCBvZiBzZXNzaW9uIHJlcXVlc3QhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzU2Vzc2lvbkF0dHJpYnV0ZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN5bmMgZ2V0UGVyc2lzdGVudEF0dHJpYnV0ZXModXNlU2Vzc2lvbkNhY2hlID0gdHJ1ZSwgZGVmYXVsdEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucGVyc2lzdGVuY2VBZGFwdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGFza19zZGtfcnVudGltZV8xLmNyZWF0ZUFza1Nka0Vycm9yKCdBdHRyaWJ1dGVzTWFuYWdlcicsICdDYW5ub3QgZ2V0IFBlcnNpc3RlbnRBdHRyaWJ1dGVzIHdpdGhvdXQgUGVyc2lzdGVuY2VNYW5hZ2VyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcGVyc2lzdGVudEF0dHJpYnV0ZXNTZXQgfHwgIXVzZVNlc3Npb25DYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzUGVyc2lzdGVudEF0dHJpYnV0ZXMgPSBhd2FpdCBvcHRpb25zLnBlcnNpc3RlbmNlQWRhcHRlci5nZXRBdHRyaWJ1dGVzKG9wdGlvbnMucmVxdWVzdEVudmVsb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVudEF0dHJpYnV0ZXNTZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdEF0dHJpYnV0ZXMgJiYgKCF0aGlzUGVyc2lzdGVudEF0dHJpYnV0ZXMgfHwgT2JqZWN0LmtleXModGhpc1BlcnNpc3RlbnRBdHRyaWJ1dGVzKS5sZW5ndGggPCAxKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzUGVyc2lzdGVudEF0dHJpYnV0ZXMgPSBkZWZhdWx0QXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNQZXJzaXN0ZW50QXR0cmlidXRlcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRSZXF1ZXN0QXR0cmlidXRlcyhyZXF1ZXN0QXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIHRoaXNSZXF1ZXN0QXR0cmlidXRlcyA9IHJlcXVlc3RBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFNlc3Npb25BdHRyaWJ1dGVzKHNlc3Npb25BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnJlcXVlc3RFbnZlbG9wZS5zZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGFza19zZGtfcnVudGltZV8xLmNyZWF0ZUFza1Nka0Vycm9yKCdBdHRyaWJ1dGVzTWFuYWdlcicsICdDYW5ub3Qgc2V0IFNlc3Npb25BdHRyaWJ1dGVzIHRvIG91dCBvZiBzZXNzaW9uIHJlcXVlc3QhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNTZXNzaW9uQXR0cmlidXRlcyA9IHNlc3Npb25BdHRyaWJ1dGVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFBlcnNpc3RlbnRBdHRyaWJ1dGVzKHBlcnNpc3RlbnRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBlcnNpc3RlbmNlQWRhcHRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBhc2tfc2RrX3J1bnRpbWVfMS5jcmVhdGVBc2tTZGtFcnJvcignQXR0cmlidXRlc01hbmFnZXInLCAnQ2Fubm90IHNldCBQZXJzaXN0ZW50QXR0cmlidXRlcyB3aXRob3V0IHBlcnNpc3RlbmNlIGFkYXB0ZXIhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNQZXJzaXN0ZW50QXR0cmlidXRlcyA9IHBlcnNpc3RlbnRBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgIHBlcnNpc3RlbnRBdHRyaWJ1dGVzU2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBzYXZlUGVyc2lzdGVudEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBlcnNpc3RlbmNlQWRhcHRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBhc2tfc2RrX3J1bnRpbWVfMS5jcmVhdGVBc2tTZGtFcnJvcignQXR0cmlidXRlc01hbmFnZXInLCAnQ2Fubm90IHNhdmUgUGVyc2lzdGVudEF0dHJpYnV0ZXMgd2l0aG91dCBwZXJzaXN0ZW5jZSBhZGFwdGVyIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGVyc2lzdGVudEF0dHJpYnV0ZXNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgb3B0aW9ucy5wZXJzaXN0ZW5jZUFkYXB0ZXIuc2F2ZUF0dHJpYnV0ZXMob3B0aW9ucy5yZXF1ZXN0RW52ZWxvcGUsIHRoaXNQZXJzaXN0ZW50QXR0cmlidXRlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzeW5jIGRlbGV0ZVBlcnNpc3RlbnRBdHRyaWJ1dGVzKCkge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wZXJzaXN0ZW5jZUFkYXB0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgYXNrX3Nka19ydW50aW1lXzEuY3JlYXRlQXNrU2RrRXJyb3IoJ0F0dHJpYnV0ZXNNYW5hZ2VyJywgJ0Nhbm5vdCBkZWxldGUgUGVyc2lzdGVudEF0dHJpYnV0ZXMgd2l0aG91dCBwZXJzaXN0ZW5jZSBhZGFwdGVyIScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhd2FpdCBvcHRpb25zLnBlcnNpc3RlbmNlQWRhcHRlci5kZWxldGVBdHRyaWJ1dGVzKG9wdGlvbnMucmVxdWVzdEVudmVsb3BlKTtcbiAgICAgICAgICAgICAgICB0aGlzUGVyc2lzdGVudEF0dHJpYnV0ZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcGVyc2lzdGVudEF0dHJpYnV0ZXNTZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG59XG5leHBvcnRzLkF0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeSA9IEF0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/attributes/AttributesManagerFactory.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar AttributesManagerFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/attributes/AttributesManagerFactory.js\");\nObject.defineProperty(exports, \"AttributesManagerFactory\", ({ enumerable: true, get: function () { return AttributesManagerFactory_1.AttributesManagerFactory; } }));\nvar ImageHelper_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/ImageHelper.js\");\nObject.defineProperty(exports, \"ImageHelper\", ({ enumerable: true, get: function () { return ImageHelper_1.ImageHelper; } }));\nvar PlainTextContentHelper_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/PlainTextContentHelper.js\");\nObject.defineProperty(exports, \"PlainTextContentHelper\", ({ enumerable: true, get: function () { return PlainTextContentHelper_1.PlainTextContentHelper; } }));\nvar ResponseFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/ResponseFactory.js\");\nObject.defineProperty(exports, \"ResponseFactory\", ({ enumerable: true, get: function () { return ResponseFactory_1.ResponseFactory; } }));\nvar RichTextContentHelper_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/RichTextContentHelper.js\");\nObject.defineProperty(exports, \"RichTextContentHelper\", ({ enumerable: true, get: function () { return RichTextContentHelper_1.RichTextContentHelper; } }));\nvar TextContentHelper_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/TextContentHelper.js\");\nObject.defineProperty(exports, \"TextContentHelper\", ({ enumerable: true, get: function () { return TextContentHelper_1.TextContentHelper; } }));\nvar DefaultApiClient_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/service/DefaultApiClient.js\");\nObject.defineProperty(exports, \"DefaultApiClient\", ({ enumerable: true, get: function () { return DefaultApiClient_1.DefaultApiClient; } }));\nvar CustomSkill_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/skill/CustomSkill.js\");\nObject.defineProperty(exports, \"Skill\", ({ enumerable: true, get: function () { return CustomSkill_1.CustomSkill; } }));\nvar BaseSkillFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/skill/factory/BaseSkillFactory.js\");\nObject.defineProperty(exports, \"BaseSkillFactory\", ({ enumerable: true, get: function () { return BaseSkillFactory_1.BaseSkillFactory; } }));\nvar CustomSkillFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/skill/factory/CustomSkillFactory.js\");\nObject.defineProperty(exports, \"CustomSkillFactory\", ({ enumerable: true, get: function () { return CustomSkillFactory_1.CustomSkillFactory; } }));\nvar SkillBuilders_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/skill/SkillBuilders.js\");\nObject.defineProperty(exports, \"SkillBuilders\", ({ enumerable: true, get: function () { return SkillBuilders_1.SkillBuilders; } }));\nvar ViewportUtils_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/util/ViewportUtils.js\");\nObject.defineProperty(exports, \"getViewportDpiGroup\", ({ enumerable: true, get: function () { return ViewportUtils_1.getViewportDpiGroup; } }));\nObject.defineProperty(exports, \"getViewportOrientation\", ({ enumerable: true, get: function () { return ViewportUtils_1.getViewportOrientation; } }));\nObject.defineProperty(exports, \"getViewportProfile\", ({ enumerable: true, get: function () { return ViewportUtils_1.getViewportProfile; } }));\nObject.defineProperty(exports, \"getViewportSizeGroup\", ({ enumerable: true, get: function () { return ViewportUtils_1.getViewportSizeGroup; } }));\nObject.defineProperty(exports, \"ViewportDpiGroupOrder\", ({ enumerable: true, get: function () { return ViewportUtils_1.ViewportDpiGroupOrder; } }));\nObject.defineProperty(exports, \"ViewportSizeGroupOrder\", ({ enumerable: true, get: function () { return ViewportUtils_1.ViewportSizeGroupOrder; } }));\nvar SsmlUtils_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/util/SsmlUtils.js\");\nObject.defineProperty(exports, \"escapeXmlCharacters\", ({ enumerable: true, get: function () { return SsmlUtils_1.escapeXmlCharacters; } }));\nvar RequestEnvelopeUtils_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/util/RequestEnvelopeUtils.js\");\nObject.defineProperty(exports, \"getAccountLinkingAccessToken\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getAccountLinkingAccessToken; } }));\nObject.defineProperty(exports, \"getApiAccessToken\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getApiAccessToken; } }));\nObject.defineProperty(exports, \"getDeviceId\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getDeviceId; } }));\nObject.defineProperty(exports, \"getUserId\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getUserId; } }));\nObject.defineProperty(exports, \"getDialogState\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getDialogState; } }));\nObject.defineProperty(exports, \"getSlotValueV2\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getSlotValueV2; } }));\nObject.defineProperty(exports, \"getIntentName\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getIntentName; } }));\nObject.defineProperty(exports, \"getLocale\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getLocale; } }));\nObject.defineProperty(exports, \"getRequest\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getRequest; } }));\nObject.defineProperty(exports, \"getRequestType\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getRequestType; } }));\nObject.defineProperty(exports, \"getSimpleSlotValues\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getSimpleSlotValues; } }));\nObject.defineProperty(exports, \"getSlot\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getSlot; } }));\nObject.defineProperty(exports, \"getSlotValue\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getSlotValue; } }));\nObject.defineProperty(exports, \"getSupportedInterfaces\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.getSupportedInterfaces; } }));\nObject.defineProperty(exports, \"isNewSession\", ({ enumerable: true, get: function () { return RequestEnvelopeUtils_1.isNewSession; } }));\nvar ask_sdk_runtime_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/index.js\");\nObject.defineProperty(exports, \"createAskSdkError\", ({ enumerable: true, get: function () { return ask_sdk_runtime_1.createAskSdkError; } }));\nObject.defineProperty(exports, \"createAskSdkUserAgent\", ({ enumerable: true, get: function () { return ask_sdk_runtime_1.createAskSdkUserAgent; } }));\nObject.defineProperty(exports, \"UserAgentManager\", ({ enumerable: true, get: function () { return ask_sdk_runtime_1.UserAgentManager; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvaW5kZXguanM/NThlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQXR0cmlidXRlc01hbmFnZXJGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9hdHRyaWJ1dGVzL0F0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXR0cmlidXRlc01hbmFnZXJGYWN0b3J5XzEuQXR0cmlidXRlc01hbmFnZXJGYWN0b3J5OyB9IH0pO1xudmFyIEltYWdlSGVscGVyXzEgPSByZXF1aXJlKFwiLi9yZXNwb25zZS9JbWFnZUhlbHBlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkltYWdlSGVscGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBJbWFnZUhlbHBlcl8xLkltYWdlSGVscGVyOyB9IH0pO1xudmFyIFBsYWluVGV4dENvbnRlbnRIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlL1BsYWluVGV4dENvbnRlbnRIZWxwZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQbGFpblRleHRDb250ZW50SGVscGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQbGFpblRleHRDb250ZW50SGVscGVyXzEuUGxhaW5UZXh0Q29udGVudEhlbHBlcjsgfSB9KTtcbnZhciBSZXNwb25zZUZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlL1Jlc3BvbnNlRmFjdG9yeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlc3BvbnNlRmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVzcG9uc2VGYWN0b3J5XzEuUmVzcG9uc2VGYWN0b3J5OyB9IH0pO1xudmFyIFJpY2hUZXh0Q29udGVudEhlbHBlcl8xID0gcmVxdWlyZShcIi4vcmVzcG9uc2UvUmljaFRleHRDb250ZW50SGVscGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmljaFRleHRDb250ZW50SGVscGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBSaWNoVGV4dENvbnRlbnRIZWxwZXJfMS5SaWNoVGV4dENvbnRlbnRIZWxwZXI7IH0gfSk7XG52YXIgVGV4dENvbnRlbnRIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL3Jlc3BvbnNlL1RleHRDb250ZW50SGVscGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVGV4dENvbnRlbnRIZWxwZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFRleHRDb250ZW50SGVscGVyXzEuVGV4dENvbnRlbnRIZWxwZXI7IH0gfSk7XG52YXIgRGVmYXVsdEFwaUNsaWVudF8xID0gcmVxdWlyZShcIi4vc2VydmljZS9EZWZhdWx0QXBpQ2xpZW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVmYXVsdEFwaUNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRGVmYXVsdEFwaUNsaWVudF8xLkRlZmF1bHRBcGlDbGllbnQ7IH0gfSk7XG52YXIgQ3VzdG9tU2tpbGxfMSA9IHJlcXVpcmUoXCIuL3NraWxsL0N1c3RvbVNraWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2tpbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEN1c3RvbVNraWxsXzEuQ3VzdG9tU2tpbGw7IH0gfSk7XG52YXIgQmFzZVNraWxsRmFjdG9yeV8xID0gcmVxdWlyZShcIi4vc2tpbGwvZmFjdG9yeS9CYXNlU2tpbGxGYWN0b3J5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmFzZVNraWxsRmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVNraWxsRmFjdG9yeV8xLkJhc2VTa2lsbEZhY3Rvcnk7IH0gfSk7XG52YXIgQ3VzdG9tU2tpbGxGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9za2lsbC9mYWN0b3J5L0N1c3RvbVNraWxsRmFjdG9yeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkN1c3RvbVNraWxsRmFjdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQ3VzdG9tU2tpbGxGYWN0b3J5XzEuQ3VzdG9tU2tpbGxGYWN0b3J5OyB9IH0pO1xudmFyIFNraWxsQnVpbGRlcnNfMSA9IHJlcXVpcmUoXCIuL3NraWxsL1NraWxsQnVpbGRlcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTa2lsbEJ1aWxkZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTa2lsbEJ1aWxkZXJzXzEuU2tpbGxCdWlsZGVyczsgfSB9KTtcbnZhciBWaWV3cG9ydFV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsL1ZpZXdwb3J0VXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRWaWV3cG9ydERwaUdyb3VwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBWaWV3cG9ydFV0aWxzXzEuZ2V0Vmlld3BvcnREcGlHcm91cDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFZpZXdwb3J0T3JpZW50YXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFZpZXdwb3J0VXRpbHNfMS5nZXRWaWV3cG9ydE9yaWVudGF0aW9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Vmlld3BvcnRQcm9maWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBWaWV3cG9ydFV0aWxzXzEuZ2V0Vmlld3BvcnRQcm9maWxlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Vmlld3BvcnRTaXplR3JvdXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFZpZXdwb3J0VXRpbHNfMS5nZXRWaWV3cG9ydFNpemVHcm91cDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZpZXdwb3J0RHBpR3JvdXBPcmRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gVmlld3BvcnRVdGlsc18xLlZpZXdwb3J0RHBpR3JvdXBPcmRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZpZXdwb3J0U2l6ZUdyb3VwT3JkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFZpZXdwb3J0VXRpbHNfMS5WaWV3cG9ydFNpemVHcm91cE9yZGVyOyB9IH0pO1xudmFyIFNzbWxVdGlsc18xID0gcmVxdWlyZShcIi4vdXRpbC9Tc21sVXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlc2NhcGVYbWxDaGFyYWN0ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTc21sVXRpbHNfMS5lc2NhcGVYbWxDaGFyYWN0ZXJzOyB9IH0pO1xudmFyIFJlcXVlc3RFbnZlbG9wZVV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsL1JlcXVlc3RFbnZlbG9wZVV0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0QWNjb3VudExpbmtpbmdBY2Nlc3NUb2tlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5nZXRBY2NvdW50TGlua2luZ0FjY2Vzc1Rva2VuOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0QXBpQWNjZXNzVG9rZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJlcXVlc3RFbnZlbG9wZVV0aWxzXzEuZ2V0QXBpQWNjZXNzVG9rZW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXREZXZpY2VJZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5nZXREZXZpY2VJZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFVzZXJJZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5nZXRVc2VySWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXREaWFsb2dTdGF0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5nZXREaWFsb2dTdGF0ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFNsb3RWYWx1ZVYyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBSZXF1ZXN0RW52ZWxvcGVVdGlsc18xLmdldFNsb3RWYWx1ZVYyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0SW50ZW50TmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5nZXRJbnRlbnROYW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0TG9jYWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBSZXF1ZXN0RW52ZWxvcGVVdGlsc18xLmdldExvY2FsZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFJlcXVlc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJlcXVlc3RFbnZlbG9wZVV0aWxzXzEuZ2V0UmVxdWVzdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFJlcXVlc3RUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBSZXF1ZXN0RW52ZWxvcGVVdGlsc18xLmdldFJlcXVlc3RUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0U2ltcGxlU2xvdFZhbHVlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5nZXRTaW1wbGVTbG90VmFsdWVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0U2xvdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5nZXRTbG90OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0U2xvdFZhbHVlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBSZXF1ZXN0RW52ZWxvcGVVdGlsc18xLmdldFNsb3RWYWx1ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFN1cHBvcnRlZEludGVyZmFjZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJlcXVlc3RFbnZlbG9wZVV0aWxzXzEuZ2V0U3VwcG9ydGVkSW50ZXJmYWNlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTmV3U2Vzc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUmVxdWVzdEVudmVsb3BlVXRpbHNfMS5pc05ld1Nlc3Npb247IH0gfSk7XG52YXIgYXNrX3Nka19ydW50aW1lXzEgPSByZXF1aXJlKFwiYXNrLXNkay1ydW50aW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlQXNrU2RrRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfcnVudGltZV8xLmNyZWF0ZUFza1Nka0Vycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlQXNrU2RrVXNlckFnZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX3J1bnRpbWVfMS5jcmVhdGVBc2tTZGtVc2VyQWdlbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVc2VyQWdlbnRNYW5hZ2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX3J1bnRpbWVfMS5Vc2VyQWdlbnRNYW5hZ2VyOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/index.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/response/ImageHelper.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ImageHelper = void 0;\n/**\n * Responsible for building image object using ask-sdk-model in Alexa skills kit display interface\n * https://developer.amazon.com/docs/custom-skills/display-interface-reference.html#image-object-specifications.\n */\nclass ImageHelper {\n    constructor() {\n        this.image = {};\n    }\n    /**\n     * Sets content description in image object\n     * @param {string} description text used to describe the image for a screen reader\n     * @returns {ImageHelper}\n     */\n    withDescription(description) {\n        this.image.contentDescription = description;\n        return this;\n    }\n    /**\n     * Add image instance in image object\n     * @param {string} url source of the image\n     * @param {interfaces.display.ImageSize} size  size of the image. Accepted values:\n     * X_SMALL: Displayed within extra small containers\n     * SMALL: Displayed within small  containers\n     * MEDIUM: Displayed within medium containers\n     * LARGE: Displayed within large containers\n     * X_LARGE Displayed within extra large containers\n     * By default, for Echo Show, size takes the value X_SMALL. If the other size values are included,\n     * then the order of precedence for displaying images begins with X_LARGE and proceeds downward,\n     * which means that larger images will be downscaled for display on Echo Show if provided.\n     * For the best user experience, include the appropriately sized image, and do not include larger images.\n     * @param {number} widthPixels widthPixels of the image\n     * @param {number} heightPixels heightPixels of the image\n     * @returns {ImageHelper}\n     */\n    addImageInstance(url, size, widthPixels, heightPixels) {\n        const imageInstance = {\n            url,\n        };\n        if (size) {\n            imageInstance.size = size;\n        }\n        if (heightPixels) {\n            imageInstance.heightPixels = heightPixels;\n        }\n        if (widthPixels) {\n            imageInstance.widthPixels = widthPixels;\n        }\n        if (!this.image.sources) {\n            this.image.sources = [imageInstance];\n        }\n        else {\n            this.image.sources.push(imageInstance);\n        }\n        return this;\n    }\n    /**\n     * @returns {Image}\n     */\n    getImage() {\n        return this.image;\n    }\n}\nexports.ImageHelper = ImageHelper;\n//# sourceMappingURL=ImageHelper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvcmVzcG9uc2UvSW1hZ2VIZWxwZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvcmVzcG9uc2UvSW1hZ2VIZWxwZXIuanM/ZjA5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkltYWdlSGVscGVyID0gdm9pZCAwO1xuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgYnVpbGRpbmcgaW1hZ2Ugb2JqZWN0IHVzaW5nIGFzay1zZGstbW9kZWwgaW4gQWxleGEgc2tpbGxzIGtpdCBkaXNwbGF5IGludGVyZmFjZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYW1hem9uLmNvbS9kb2NzL2N1c3RvbS1za2lsbHMvZGlzcGxheS1pbnRlcmZhY2UtcmVmZXJlbmNlLmh0bWwjaW1hZ2Utb2JqZWN0LXNwZWNpZmljYXRpb25zLlxuICovXG5jbGFzcyBJbWFnZUhlbHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBjb250ZW50IGRlc2NyaXB0aW9uIGluIGltYWdlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjcmlwdGlvbiB0ZXh0IHVzZWQgdG8gZGVzY3JpYmUgdGhlIGltYWdlIGZvciBhIHNjcmVlbiByZWFkZXJcbiAgICAgKiBAcmV0dXJucyB7SW1hZ2VIZWxwZXJ9XG4gICAgICovXG4gICAgd2l0aERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuaW1hZ2UuY29udGVudERlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgaW1hZ2UgaW5zdGFuY2UgaW4gaW1hZ2Ugb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBzb3VyY2Ugb2YgdGhlIGltYWdlXG4gICAgICogQHBhcmFtIHtpbnRlcmZhY2VzLmRpc3BsYXkuSW1hZ2VTaXplfSBzaXplICBzaXplIG9mIHRoZSBpbWFnZS4gQWNjZXB0ZWQgdmFsdWVzOlxuICAgICAqIFhfU01BTEw6IERpc3BsYXllZCB3aXRoaW4gZXh0cmEgc21hbGwgY29udGFpbmVyc1xuICAgICAqIFNNQUxMOiBEaXNwbGF5ZWQgd2l0aGluIHNtYWxsICBjb250YWluZXJzXG4gICAgICogTUVESVVNOiBEaXNwbGF5ZWQgd2l0aGluIG1lZGl1bSBjb250YWluZXJzXG4gICAgICogTEFSR0U6IERpc3BsYXllZCB3aXRoaW4gbGFyZ2UgY29udGFpbmVyc1xuICAgICAqIFhfTEFSR0UgRGlzcGxheWVkIHdpdGhpbiBleHRyYSBsYXJnZSBjb250YWluZXJzXG4gICAgICogQnkgZGVmYXVsdCwgZm9yIEVjaG8gU2hvdywgc2l6ZSB0YWtlcyB0aGUgdmFsdWUgWF9TTUFMTC4gSWYgdGhlIG90aGVyIHNpemUgdmFsdWVzIGFyZSBpbmNsdWRlZCxcbiAgICAgKiB0aGVuIHRoZSBvcmRlciBvZiBwcmVjZWRlbmNlIGZvciBkaXNwbGF5aW5nIGltYWdlcyBiZWdpbnMgd2l0aCBYX0xBUkdFIGFuZCBwcm9jZWVkcyBkb3dud2FyZCxcbiAgICAgKiB3aGljaCBtZWFucyB0aGF0IGxhcmdlciBpbWFnZXMgd2lsbCBiZSBkb3duc2NhbGVkIGZvciBkaXNwbGF5IG9uIEVjaG8gU2hvdyBpZiBwcm92aWRlZC5cbiAgICAgKiBGb3IgdGhlIGJlc3QgdXNlciBleHBlcmllbmNlLCBpbmNsdWRlIHRoZSBhcHByb3ByaWF0ZWx5IHNpemVkIGltYWdlLCBhbmQgZG8gbm90IGluY2x1ZGUgbGFyZ2VyIGltYWdlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhQaXhlbHMgd2lkdGhQaXhlbHMgb2YgdGhlIGltYWdlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFBpeGVscyBoZWlnaHRQaXhlbHMgb2YgdGhlIGltYWdlXG4gICAgICogQHJldHVybnMge0ltYWdlSGVscGVyfVxuICAgICAqL1xuICAgIGFkZEltYWdlSW5zdGFuY2UodXJsLCBzaXplLCB3aWR0aFBpeGVscywgaGVpZ2h0UGl4ZWxzKSB7XG4gICAgICAgIGNvbnN0IGltYWdlSW5zdGFuY2UgPSB7XG4gICAgICAgICAgICB1cmwsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzaXplKSB7XG4gICAgICAgICAgICBpbWFnZUluc3RhbmNlLnNpemUgPSBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWlnaHRQaXhlbHMpIHtcbiAgICAgICAgICAgIGltYWdlSW5zdGFuY2UuaGVpZ2h0UGl4ZWxzID0gaGVpZ2h0UGl4ZWxzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aWR0aFBpeGVscykge1xuICAgICAgICAgICAgaW1hZ2VJbnN0YW5jZS53aWR0aFBpeGVscyA9IHdpZHRoUGl4ZWxzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pbWFnZS5zb3VyY2VzKSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlLnNvdXJjZXMgPSBbaW1hZ2VJbnN0YW5jZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlLnNvdXJjZXMucHVzaChpbWFnZUluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0ltYWdlfVxuICAgICAqL1xuICAgIGdldEltYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZTtcbiAgICB9XG59XG5leHBvcnRzLkltYWdlSGVscGVyID0gSW1hZ2VIZWxwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbWFnZUhlbHBlci5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/response/ImageHelper.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/response/PlainTextContentHelper.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PlainTextContentHelper = void 0;\nconst TextContentHelper_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/TextContentHelper.js\");\n/**\n * Responsible for building plain text content object using ask-sdk-model in Alexa skills kit display interface\n * https://developer.amazon.com/docs/custom-skills/display-interface-reference.html#textcontent-object-specifications.\n */\nclass PlainTextContentHelper extends TextContentHelper_1.TextContentHelper {\n    constructor() {\n        super();\n    }\n    /**\n     * @returns {interfaces.display.TextContent}\n     */\n    getTextContent() {\n        const textContent = {};\n        if (this.primaryText) {\n            textContent.primaryText = {\n                type: 'PlainText',\n                text: this.primaryText,\n            };\n        }\n        if (this.secondaryText) {\n            textContent.secondaryText = {\n                type: 'PlainText',\n                text: this.secondaryText,\n            };\n        }\n        if (this.tertiaryText) {\n            textContent.tertiaryText = {\n                type: 'PlainText',\n                text: this.tertiaryText,\n            };\n        }\n        return textContent;\n    }\n}\nexports.PlainTextContentHelper = PlainTextContentHelper;\n//# sourceMappingURL=PlainTextContentHelper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvcmVzcG9uc2UvUGxhaW5UZXh0Q29udGVudEhlbHBlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhY2thZ2UuanNvbi8uL25vZGVfbW9kdWxlcy9hc2stc2RrLWNvcmUvZGlzdC9yZXNwb25zZS9QbGFpblRleHRDb250ZW50SGVscGVyLmpzPzdiYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTggQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QbGFpblRleHRDb250ZW50SGVscGVyID0gdm9pZCAwO1xuY29uc3QgVGV4dENvbnRlbnRIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL1RleHRDb250ZW50SGVscGVyXCIpO1xuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgYnVpbGRpbmcgcGxhaW4gdGV4dCBjb250ZW50IG9iamVjdCB1c2luZyBhc2stc2RrLW1vZGVsIGluIEFsZXhhIHNraWxscyBraXQgZGlzcGxheSBpbnRlcmZhY2VcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmFtYXpvbi5jb20vZG9jcy9jdXN0b20tc2tpbGxzL2Rpc3BsYXktaW50ZXJmYWNlLXJlZmVyZW5jZS5odG1sI3RleHRjb250ZW50LW9iamVjdC1zcGVjaWZpY2F0aW9ucy5cbiAqL1xuY2xhc3MgUGxhaW5UZXh0Q29udGVudEhlbHBlciBleHRlbmRzIFRleHRDb250ZW50SGVscGVyXzEuVGV4dENvbnRlbnRIZWxwZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7aW50ZXJmYWNlcy5kaXNwbGF5LlRleHRDb250ZW50fVxuICAgICAqL1xuICAgIGdldFRleHRDb250ZW50KCkge1xuICAgICAgICBjb25zdCB0ZXh0Q29udGVudCA9IHt9O1xuICAgICAgICBpZiAodGhpcy5wcmltYXJ5VGV4dCkge1xuICAgICAgICAgICAgdGV4dENvbnRlbnQucHJpbWFyeVRleHQgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1BsYWluVGV4dCcsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcmltYXJ5VGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgICAgICAgdGV4dENvbnRlbnQuc2Vjb25kYXJ5VGV4dCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUGxhaW5UZXh0JyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnNlY29uZGFyeVRleHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRlcnRpYXJ5VGV4dCkge1xuICAgICAgICAgICAgdGV4dENvbnRlbnQudGVydGlhcnlUZXh0ID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdQbGFpblRleHQnLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGVydGlhcnlUZXh0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dENvbnRlbnQ7XG4gICAgfVxufVxuZXhwb3J0cy5QbGFpblRleHRDb250ZW50SGVscGVyID0gUGxhaW5UZXh0Q29udGVudEhlbHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBsYWluVGV4dENvbnRlbnRIZWxwZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/response/PlainTextContentHelper.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/response/ResponseFactory.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResponseFactory = void 0;\n/**\n * Responsible for building JSON responses using ask-sdk-model as per the Alexa skills kit interface\n * https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference#response-body-syntax.\n */\nclass ResponseFactory {\n    static init() {\n        const response = {};\n        function isVideoAppLaunchDirectivePresent() {\n            if (!response.directives) {\n                return false;\n            }\n            for (const directive of response.directives) {\n                if (directive.type === 'VideoApp.Launch') {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function trimOutputSpeech(speechOutput) {\n            if (!speechOutput) {\n                return '';\n            }\n            const speech = speechOutput.trim();\n            const length = speech.length;\n            if (speech.startsWith('<speak>') && speech.endsWith('</speak>')) {\n                return speech.substring(7, length - 8).trim();\n            }\n            return speech;\n        }\n        return {\n            speak(speechOutput, playBehavior) {\n                response.outputSpeech = {\n                    type: 'SSML',\n                    ssml: `<speak>${trimOutputSpeech(speechOutput)}</speak>`,\n                    playBehavior,\n                };\n                if (!playBehavior) {\n                    delete response.outputSpeech.playBehavior;\n                }\n                return this;\n            },\n            reprompt(repromptSpeechOutput, playBehavior) {\n                response.reprompt = {\n                    outputSpeech: {\n                        type: 'SSML',\n                        ssml: `<speak>${trimOutputSpeech(repromptSpeechOutput)}</speak>`,\n                        playBehavior,\n                    },\n                };\n                if (!playBehavior) {\n                    delete response.reprompt.outputSpeech.playBehavior;\n                }\n                if (!isVideoAppLaunchDirectivePresent()) {\n                    response.shouldEndSession = false;\n                }\n                return this;\n            },\n            withSimpleCard(cardTitle, cardContent) {\n                response.card = {\n                    type: 'Simple',\n                    title: cardTitle,\n                    content: cardContent,\n                };\n                return this;\n            },\n            withStandardCard(cardTitle, cardContent, smallImageUrl, largeImageUrl) {\n                const card = {\n                    type: 'Standard',\n                    title: cardTitle,\n                    text: cardContent,\n                };\n                if (smallImageUrl || largeImageUrl) {\n                    card.image = {};\n                    if (smallImageUrl) {\n                        card.image.smallImageUrl = smallImageUrl;\n                    }\n                    if (largeImageUrl) {\n                        card.image.largeImageUrl = largeImageUrl;\n                    }\n                }\n                response.card = card;\n                return this;\n            },\n            withLinkAccountCard() {\n                response.card = {\n                    type: 'LinkAccount',\n                };\n                return this;\n            },\n            withAskForPermissionsConsentCard(permissionArray) {\n                response.card = {\n                    type: 'AskForPermissionsConsent',\n                    permissions: permissionArray,\n                };\n                return this;\n            },\n            addDelegateDirective(updatedIntent) {\n                const delegateDirective = {\n                    type: 'Dialog.Delegate',\n                };\n                if (updatedIntent) {\n                    delegateDirective.updatedIntent = updatedIntent;\n                }\n                this.addDirective(delegateDirective);\n                return this;\n            },\n            addElicitSlotDirective(slotToElicit, updatedIntent) {\n                const elicitSlotDirective = {\n                    type: 'Dialog.ElicitSlot',\n                    slotToElicit,\n                };\n                if (updatedIntent) {\n                    elicitSlotDirective.updatedIntent = updatedIntent;\n                }\n                this.addDirective(elicitSlotDirective);\n                return this;\n            },\n            addConfirmSlotDirective(slotToConfirm, updatedIntent) {\n                const confirmSlotDirective = {\n                    type: 'Dialog.ConfirmSlot',\n                    slotToConfirm,\n                };\n                if (updatedIntent) {\n                    confirmSlotDirective.updatedIntent = updatedIntent;\n                }\n                this.addDirective(confirmSlotDirective);\n                return this;\n            },\n            addConfirmIntentDirective(updatedIntent) {\n                const confirmIntentDirective = {\n                    type: 'Dialog.ConfirmIntent',\n                };\n                if (updatedIntent) {\n                    confirmIntentDirective.updatedIntent = updatedIntent;\n                }\n                this.addDirective(confirmIntentDirective);\n                return this;\n            },\n            addAudioPlayerPlayDirective(playBehavior, url, token, offsetInMilliseconds, expectedPreviousToken, audioItemMetadata) {\n                const stream = {\n                    url,\n                    token,\n                    offsetInMilliseconds,\n                };\n                if (expectedPreviousToken) {\n                    stream.expectedPreviousToken = expectedPreviousToken;\n                }\n                const audioItem = {\n                    stream,\n                };\n                if (audioItemMetadata) {\n                    audioItem.metadata = audioItemMetadata;\n                }\n                const playDirective = {\n                    type: 'AudioPlayer.Play',\n                    playBehavior,\n                    audioItem,\n                };\n                this.addDirective(playDirective);\n                return this;\n            },\n            addAudioPlayerStopDirective() {\n                const stopDirective = {\n                    type: 'AudioPlayer.Stop',\n                };\n                this.addDirective(stopDirective);\n                return this;\n            },\n            addAudioPlayerClearQueueDirective(clearBehavior) {\n                const clearQueueDirective = {\n                    type: 'AudioPlayer.ClearQueue',\n                    clearBehavior,\n                };\n                this.addDirective(clearQueueDirective);\n                return this;\n            },\n            addRenderTemplateDirective(template) {\n                const renderTemplateDirective = {\n                    type: 'Display.RenderTemplate',\n                    template,\n                };\n                this.addDirective(renderTemplateDirective);\n                return this;\n            },\n            addHintDirective(text) {\n                const hint = {\n                    type: 'PlainText',\n                    text,\n                };\n                const hintDirective = {\n                    type: 'Hint',\n                    hint,\n                };\n                this.addDirective(hintDirective);\n                return this;\n            },\n            addVideoAppLaunchDirective(source, title, subtitle) {\n                const videoItem = {\n                    source,\n                };\n                if (title || subtitle) {\n                    videoItem.metadata = {};\n                    if (title) {\n                        videoItem.metadata.title = title;\n                    }\n                    if (subtitle) {\n                        videoItem.metadata.subtitle = subtitle;\n                    }\n                }\n                const launchDirective = {\n                    type: 'VideoApp.Launch',\n                    videoItem,\n                };\n                this.addDirective(launchDirective);\n                delete response.shouldEndSession;\n                return this;\n            },\n            withCanFulfillIntent(canFulfillIntent) {\n                response.canFulfillIntent = canFulfillIntent;\n                return this;\n            },\n            withShouldEndSession(val) {\n                if (!isVideoAppLaunchDirectivePresent()) {\n                    response.shouldEndSession = val;\n                }\n                return this;\n            },\n            addDirective(directive) {\n                if (!response.directives) {\n                    response.directives = [];\n                }\n                response.directives.push(directive);\n                return this;\n            },\n            addDirectiveToReprompt(directive) {\n                if (!response.reprompt) {\n                    response.reprompt = {};\n                }\n                if (!response.reprompt.directives) {\n                    response.reprompt.directives = [];\n                }\n                response.reprompt.directives.push(directive);\n                if (!isVideoAppLaunchDirectivePresent()) {\n                    this.withShouldEndSession(false);\n                }\n                return this;\n            },\n            withApiResponse(apiResponse) {\n                response.apiResponse = apiResponse;\n                return this;\n            },\n            addExperimentTrigger(experimentId) {\n                if (!response.experimentation) {\n                    const experimentation = {\n                        triggeredExperiments: []\n                    };\n                    response.experimentation = experimentation;\n                }\n                response.experimentation.triggeredExperiments.push(experimentId);\n                return this;\n            },\n            getResponse() {\n                return response;\n            },\n        };\n    }\n    constructor() { }\n}\nexports.ResponseFactory = ResponseFactory;\n//# sourceMappingURL=ResponseFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/response/ResponseFactory.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/response/RichTextContentHelper.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RichTextContentHelper = void 0;\nconst TextContentHelper_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/TextContentHelper.js\");\n/**\n * Responsible for building rich text content object using ask-sdk-model in Alexa skills kit display interface\n * https://developer.amazon.com/docs/custom-skills/display-interface-reference.html#textcontent-object-specifications.\n */\nclass RichTextContentHelper extends TextContentHelper_1.TextContentHelper {\n    constructor() {\n        super();\n    }\n    /**\n     * @returns {interfaces.display.TextContent}\n     */\n    getTextContent() {\n        const textContent = {};\n        if (this.primaryText) {\n            textContent.primaryText = {\n                type: 'RichText',\n                text: this.primaryText,\n            };\n        }\n        if (this.secondaryText) {\n            textContent.secondaryText = {\n                type: 'RichText',\n                text: this.secondaryText,\n            };\n        }\n        if (this.tertiaryText) {\n            textContent.tertiaryText = {\n                type: 'RichText',\n                text: this.tertiaryText,\n            };\n        }\n        return textContent;\n    }\n}\nexports.RichTextContentHelper = RichTextContentHelper;\n//# sourceMappingURL=RichTextContentHelper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvcmVzcG9uc2UvUmljaFRleHRDb250ZW50SGVscGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstY29yZS9kaXN0L3Jlc3BvbnNlL1JpY2hUZXh0Q29udGVudEhlbHBlci5qcz9jMzY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmljaFRleHRDb250ZW50SGVscGVyID0gdm9pZCAwO1xuY29uc3QgVGV4dENvbnRlbnRIZWxwZXJfMSA9IHJlcXVpcmUoXCIuL1RleHRDb250ZW50SGVscGVyXCIpO1xuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgYnVpbGRpbmcgcmljaCB0ZXh0IGNvbnRlbnQgb2JqZWN0IHVzaW5nIGFzay1zZGstbW9kZWwgaW4gQWxleGEgc2tpbGxzIGtpdCBkaXNwbGF5IGludGVyZmFjZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYW1hem9uLmNvbS9kb2NzL2N1c3RvbS1za2lsbHMvZGlzcGxheS1pbnRlcmZhY2UtcmVmZXJlbmNlLmh0bWwjdGV4dGNvbnRlbnQtb2JqZWN0LXNwZWNpZmljYXRpb25zLlxuICovXG5jbGFzcyBSaWNoVGV4dENvbnRlbnRIZWxwZXIgZXh0ZW5kcyBUZXh0Q29udGVudEhlbHBlcl8xLlRleHRDb250ZW50SGVscGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge2ludGVyZmFjZXMuZGlzcGxheS5UZXh0Q29udGVudH1cbiAgICAgKi9cbiAgICBnZXRUZXh0Q29udGVudCgpIHtcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMucHJpbWFyeVRleHQpIHtcbiAgICAgICAgICAgIHRleHRDb250ZW50LnByaW1hcnlUZXh0ID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdSaWNoVGV4dCcsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcmltYXJ5VGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgICAgICAgdGV4dENvbnRlbnQuc2Vjb25kYXJ5VGV4dCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUmljaFRleHQnLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuc2Vjb25kYXJ5VGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudGVydGlhcnlUZXh0KSB7XG4gICAgICAgICAgICB0ZXh0Q29udGVudC50ZXJ0aWFyeVRleHQgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1JpY2hUZXh0JyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRlcnRpYXJ5VGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHRDb250ZW50O1xuICAgIH1cbn1cbmV4cG9ydHMuUmljaFRleHRDb250ZW50SGVscGVyID0gUmljaFRleHRDb250ZW50SGVscGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmljaFRleHRDb250ZW50SGVscGVyLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/response/RichTextContentHelper.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/response/TextContentHelper.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextContentHelper = void 0;\n/**\n * An abstract class responsible for building text content object using ask-sdk-model in Alexa skills kit display interface\n * https://developer.amazon.com/docs/custom-skills/display-interface-reference.html#textcontent-object-specifications.\n */\nclass TextContentHelper {\n    /**\n     * @param {string} primaryText\n     * @returns {this}\n     */\n    withPrimaryText(primaryText) {\n        this.primaryText = primaryText;\n        return this;\n    }\n    /**\n     * @param {string} secondaryText\n     * @returns {this}\n     */\n    withSecondaryText(secondaryText) {\n        this.secondaryText = secondaryText;\n        return this;\n    }\n    /**\n     * @param {string} tertiaryText\n     * @returns {this}\n     */\n    withTertiaryText(tertiaryText) {\n        this.tertiaryText = tertiaryText;\n        return this;\n    }\n}\nexports.TextContentHelper = TextContentHelper;\n//# sourceMappingURL=TextContentHelper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvcmVzcG9uc2UvVGV4dENvbnRlbnRIZWxwZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvcmVzcG9uc2UvVGV4dENvbnRlbnRIZWxwZXIuanM/OTIzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRleHRDb250ZW50SGVscGVyID0gdm9pZCAwO1xuLyoqXG4gKiBBbiBhYnN0cmFjdCBjbGFzcyByZXNwb25zaWJsZSBmb3IgYnVpbGRpbmcgdGV4dCBjb250ZW50IG9iamVjdCB1c2luZyBhc2stc2RrLW1vZGVsIGluIEFsZXhhIHNraWxscyBraXQgZGlzcGxheSBpbnRlcmZhY2VcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLmFtYXpvbi5jb20vZG9jcy9jdXN0b20tc2tpbGxzL2Rpc3BsYXktaW50ZXJmYWNlLXJlZmVyZW5jZS5odG1sI3RleHRjb250ZW50LW9iamVjdC1zcGVjaWZpY2F0aW9ucy5cbiAqL1xuY2xhc3MgVGV4dENvbnRlbnRIZWxwZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmltYXJ5VGV4dFxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIHdpdGhQcmltYXJ5VGV4dChwcmltYXJ5VGV4dCkge1xuICAgICAgICB0aGlzLnByaW1hcnlUZXh0ID0gcHJpbWFyeVRleHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2Vjb25kYXJ5VGV4dFxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxuICAgICAqL1xuICAgIHdpdGhTZWNvbmRhcnlUZXh0KHNlY29uZGFyeVRleHQpIHtcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlUZXh0ID0gc2Vjb25kYXJ5VGV4dDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXJ0aWFyeVRleHRcbiAgICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICAgKi9cbiAgICB3aXRoVGVydGlhcnlUZXh0KHRlcnRpYXJ5VGV4dCkge1xuICAgICAgICB0aGlzLnRlcnRpYXJ5VGV4dCA9IHRlcnRpYXJ5VGV4dDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5UZXh0Q29udGVudEhlbHBlciA9IFRleHRDb250ZW50SGVscGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dENvbnRlbnRIZWxwZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/response/TextContentHelper.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/service/DefaultApiClient.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultApiClient = void 0;\nconst ask_sdk_runtime_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/index.js\");\nconst url = __webpack_require__(\"url\");\n/**\n * Default implementation of {@link services.ApiClient} which uses the native HTTP/HTTPS library of Node.JS.\n */\nclass DefaultApiClient {\n    /**\n     * Dispatches a request to an API endpoint described in the request.\n     * An ApiClient is expected to resolve the Promise in the case an API returns a non-200 HTTP\n     * status code. The responsibility of translating a particular response code to an error lies with the\n     * caller to invoke.\n     * @param {services.ApiClientRequest} request request to dispatch to the ApiClient\n     * @returns {Promise<services.ApiClientResponse>} response from the ApiClient\n     */\n    invoke(request) {\n        const urlObj = url.parse(request.url);\n        const clientRequestOptions = {\n            // tslint:disable:object-literal-sort-keys\n            hostname: urlObj.hostname,\n            path: urlObj.path,\n            port: urlObj.port,\n            protocol: urlObj.protocol,\n            auth: urlObj.auth,\n            headers: arrayToObjectHeader(request.headers),\n            method: request.method,\n        };\n        const client = clientRequestOptions.protocol === 'https:' ? __webpack_require__(\"https\") : __webpack_require__(\"http\");\n        return new Promise((resolve, reject) => {\n            const clientRequest = client.request(clientRequestOptions, (response) => {\n                const chunks = [];\n                response.on('data', (chunk) => {\n                    chunks.push(chunk);\n                });\n                response.on('end', () => {\n                    const responseStr = chunks.join('');\n                    const responseObj = {\n                        statusCode: response.statusCode,\n                        body: responseStr,\n                        headers: objectToArrayHeader(response.headers),\n                    };\n                    resolve(responseObj);\n                });\n            });\n            clientRequest.on('error', (err) => {\n                reject(ask_sdk_runtime_1.createAskSdkError(this.constructor.name, err.message));\n            });\n            if (request.body) {\n                clientRequest.write(request.body);\n            }\n            clientRequest.end();\n        });\n    }\n}\nexports.DefaultApiClient = DefaultApiClient;\n/**\n * Converts the header array in {@link services.ApiClientRequest} to compatible JSON object.\n * @private\n * @param {{key : string, value : string}[]} header header array from ApiClientRequest}\n * @returns {Object.<string, string[]>} header object to pass into HTTP client\n */\nfunction arrayToObjectHeader(header) {\n    const reducer = (obj, item) => {\n        if (obj[item.key]) {\n            obj[item.key].push(item.value);\n        }\n        else {\n            obj[item.key] = [item.value];\n        }\n        return obj;\n    };\n    return header.reduce(reducer, {});\n}\n/**\n * Converts JSON header object to header array required for {services.ApiClientResponse}\n * @private\n * @param {Object.<string, (string|string[])>} header JSON header object returned by HTTP client\n * @returns {{key : string, value : string}[]}\n */\nfunction objectToArrayHeader(header) {\n    const arrayHeader = [];\n    Object.keys(header).forEach((key) => {\n        const headerArray = Array.isArray(header[key]) ? header[key] : [header[key]];\n        for (const value of headerArray) {\n            arrayHeader.push({\n                key,\n                value,\n            });\n        }\n    });\n    return arrayHeader;\n}\n//# sourceMappingURL=DefaultApiClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3Qvc2VydmljZS9EZWZhdWx0QXBpQ2xpZW50LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstY29yZS9kaXN0L3NlcnZpY2UvRGVmYXVsdEFwaUNsaWVudC5qcz9iY2JmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVmYXVsdEFwaUNsaWVudCA9IHZvaWQgMDtcbmNvbnN0IGFza19zZGtfcnVudGltZV8xID0gcmVxdWlyZShcImFzay1zZGstcnVudGltZVwiKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoXCJ1cmxcIik7XG4vKipcbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIHNlcnZpY2VzLkFwaUNsaWVudH0gd2hpY2ggdXNlcyB0aGUgbmF0aXZlIEhUVFAvSFRUUFMgbGlicmFyeSBvZiBOb2RlLkpTLlxuICovXG5jbGFzcyBEZWZhdWx0QXBpQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGEgcmVxdWVzdCB0byBhbiBBUEkgZW5kcG9pbnQgZGVzY3JpYmVkIGluIHRoZSByZXF1ZXN0LlxuICAgICAqIEFuIEFwaUNsaWVudCBpcyBleHBlY3RlZCB0byByZXNvbHZlIHRoZSBQcm9taXNlIGluIHRoZSBjYXNlIGFuIEFQSSByZXR1cm5zIGEgbm9uLTIwMCBIVFRQXG4gICAgICogc3RhdHVzIGNvZGUuIFRoZSByZXNwb25zaWJpbGl0eSBvZiB0cmFuc2xhdGluZyBhIHBhcnRpY3VsYXIgcmVzcG9uc2UgY29kZSB0byBhbiBlcnJvciBsaWVzIHdpdGggdGhlXG4gICAgICogY2FsbGVyIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge3NlcnZpY2VzLkFwaUNsaWVudFJlcXVlc3R9IHJlcXVlc3QgcmVxdWVzdCB0byBkaXNwYXRjaCB0byB0aGUgQXBpQ2xpZW50XG4gICAgICogQHJldHVybnMge1Byb21pc2U8c2VydmljZXMuQXBpQ2xpZW50UmVzcG9uc2U+fSByZXNwb25zZSBmcm9tIHRoZSBBcGlDbGllbnRcbiAgICAgKi9cbiAgICBpbnZva2UocmVxdWVzdCkge1xuICAgICAgICBjb25zdCB1cmxPYmogPSB1cmwucGFyc2UocmVxdWVzdC51cmwpO1xuICAgICAgICBjb25zdCBjbGllbnRSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICAgICAgaG9zdG5hbWU6IHVybE9iai5ob3N0bmFtZSxcbiAgICAgICAgICAgIHBhdGg6IHVybE9iai5wYXRoLFxuICAgICAgICAgICAgcG9ydDogdXJsT2JqLnBvcnQsXG4gICAgICAgICAgICBwcm90b2NvbDogdXJsT2JqLnByb3RvY29sLFxuICAgICAgICAgICAgYXV0aDogdXJsT2JqLmF1dGgsXG4gICAgICAgICAgICBoZWFkZXJzOiBhcnJheVRvT2JqZWN0SGVhZGVyKHJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbGllbnQgPSBjbGllbnRSZXF1ZXN0T3B0aW9ucy5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyByZXF1aXJlKCdodHRwcycpIDogcmVxdWlyZSgnaHR0cCcpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50UmVxdWVzdCA9IGNsaWVudC5yZXF1ZXN0KGNsaWVudFJlcXVlc3RPcHRpb25zLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2Uub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VTdHIgPSBjaHVua3Muam9pbignJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlT2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHJlc3BvbnNlU3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogb2JqZWN0VG9BcnJheUhlYWRlcihyZXNwb25zZS5oZWFkZXJzKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZU9iaik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNsaWVudFJlcXVlc3Qub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChhc2tfc2RrX3J1bnRpbWVfMS5jcmVhdGVBc2tTZGtFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIGVyci5tZXNzYWdlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgICAgICAgICBjbGllbnRSZXF1ZXN0LndyaXRlKHJlcXVlc3QuYm9keSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGllbnRSZXF1ZXN0LmVuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkRlZmF1bHRBcGlDbGllbnQgPSBEZWZhdWx0QXBpQ2xpZW50O1xuLyoqXG4gKiBDb252ZXJ0cyB0aGUgaGVhZGVyIGFycmF5IGluIHtAbGluayBzZXJ2aWNlcy5BcGlDbGllbnRSZXF1ZXN0fSB0byBjb21wYXRpYmxlIEpTT04gb2JqZWN0LlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7e2tleSA6IHN0cmluZywgdmFsdWUgOiBzdHJpbmd9W119IGhlYWRlciBoZWFkZXIgYXJyYXkgZnJvbSBBcGlDbGllbnRSZXF1ZXN0fVxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCBzdHJpbmdbXT59IGhlYWRlciBvYmplY3QgdG8gcGFzcyBpbnRvIEhUVFAgY2xpZW50XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3RIZWFkZXIoaGVhZGVyKSB7XG4gICAgY29uc3QgcmVkdWNlciA9IChvYmosIGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKG9ialtpdGVtLmtleV0pIHtcbiAgICAgICAgICAgIG9ialtpdGVtLmtleV0ucHVzaChpdGVtLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9ialtpdGVtLmtleV0gPSBbaXRlbS52YWx1ZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICAgIHJldHVybiBoZWFkZXIucmVkdWNlKHJlZHVjZXIsIHt9KTtcbn1cbi8qKlxuICogQ29udmVydHMgSlNPTiBoZWFkZXIgb2JqZWN0IHRvIGhlYWRlciBhcnJheSByZXF1aXJlZCBmb3Ige3NlcnZpY2VzLkFwaUNsaWVudFJlc3BvbnNlfVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIChzdHJpbmd8c3RyaW5nW10pPn0gaGVhZGVyIEpTT04gaGVhZGVyIG9iamVjdCByZXR1cm5lZCBieSBIVFRQIGNsaWVudFxuICogQHJldHVybnMge3trZXkgOiBzdHJpbmcsIHZhbHVlIDogc3RyaW5nfVtdfVxuICovXG5mdW5jdGlvbiBvYmplY3RUb0FycmF5SGVhZGVyKGhlYWRlcikge1xuICAgIGNvbnN0IGFycmF5SGVhZGVyID0gW107XG4gICAgT2JqZWN0LmtleXMoaGVhZGVyKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgaGVhZGVyQXJyYXkgPSBBcnJheS5pc0FycmF5KGhlYWRlcltrZXldKSA/IGhlYWRlcltrZXldIDogW2hlYWRlcltrZXldXTtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBoZWFkZXJBcnJheSkge1xuICAgICAgICAgICAgYXJyYXlIZWFkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXJyYXlIZWFkZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWZhdWx0QXBpQ2xpZW50LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/service/DefaultApiClient.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/skill/CustomSkill.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomSkill = void 0;\nconst ask_sdk_model_1 = __webpack_require__(\"./node_modules/ask-sdk-model/index.js\");\nconst ask_sdk_runtime_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/index.js\");\nconst AttributesManagerFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/attributes/AttributesManagerFactory.js\");\nconst ResponseFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/response/ResponseFactory.js\");\nvar ServiceClientFactory = ask_sdk_model_1.services.ServiceClientFactory;\n/**\n * Top level container for request dispatcher.\n */\nclass CustomSkill {\n    constructor(skillConfiguration) {\n        this.persistenceAdapter = skillConfiguration.persistenceAdapter;\n        this.apiClient = skillConfiguration.apiClient;\n        this.customUserAgent = skillConfiguration.customUserAgent;\n        this.skillId = skillConfiguration.skillId;\n        this.requestDispatcher = new ask_sdk_runtime_1.GenericRequestDispatcher({\n            requestMappers: skillConfiguration.requestMappers,\n            handlerAdapters: skillConfiguration.handlerAdapters,\n            errorMapper: skillConfiguration.errorMapper,\n            requestInterceptors: skillConfiguration.requestInterceptors,\n            responseInterceptors: skillConfiguration.responseInterceptors,\n        });\n        const packageInfo = __webpack_require__(\"./node_modules/ask-sdk-core/package.json\");\n        ask_sdk_runtime_1.UserAgentManager.registerComponent(ask_sdk_runtime_1.createAskSdkUserAgent(packageInfo.version));\n        if (this.customUserAgent) {\n            ask_sdk_runtime_1.UserAgentManager.registerComponent(this.customUserAgent);\n        }\n    }\n    /**\n     * Invokes the dispatcher to handler the request envelope and construct the handler input.\n     * @param requestEnvelope\n     * @param context\n     */\n    async invoke(requestEnvelope, context) {\n        if (this.skillId != null && requestEnvelope.context.System.application.applicationId !== this.skillId) {\n            throw ask_sdk_runtime_1.createAskSdkError(this.constructor.name, 'CustomSkill ID verification failed!');\n        }\n        const input = {\n            requestEnvelope,\n            context,\n            attributesManager: AttributesManagerFactory_1.AttributesManagerFactory.init({\n                requestEnvelope,\n                persistenceAdapter: this.persistenceAdapter,\n            }),\n            responseBuilder: ResponseFactory_1.ResponseFactory.init(),\n            serviceClientFactory: this.apiClient\n                ? new ServiceClientFactory({\n                    apiClient: this.apiClient,\n                    apiEndpoint: requestEnvelope.context.System.apiEndpoint,\n                    authorizationValue: requestEnvelope.context.System.apiAccessToken,\n                })\n                : undefined,\n        };\n        const response = await this.requestDispatcher.dispatch(input);\n        return {\n            version: '1.0',\n            response,\n            userAgent: ask_sdk_runtime_1.UserAgentManager.getUserAgent(),\n            sessionAttributes: requestEnvelope.session ? input.attributesManager.getSessionAttributes() : undefined,\n        };\n    }\n    /**\n     * Determines if the skill can support the specific request type.\n     * @param input\n     * @param context\n     */\n    supports(input, context) {\n        return !!input.request;\n    }\n    /**\n     * Append additional user agent info\n     * @param userAgent\n     */\n    appendAdditionalUserAgent(userAgent) {\n        ask_sdk_runtime_1.UserAgentManager.registerComponent(userAgent);\n    }\n}\nexports.CustomSkill = CustomSkill;\n//# sourceMappingURL=CustomSkill.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3Qvc2tpbGwvQ3VzdG9tU2tpbGwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3Qvc2tpbGwvQ3VzdG9tU2tpbGwuanM/NTc2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkN1c3RvbVNraWxsID0gdm9pZCAwO1xuY29uc3QgYXNrX3Nka19tb2RlbF8xID0gcmVxdWlyZShcImFzay1zZGstbW9kZWxcIik7XG5jb25zdCBhc2tfc2RrX3J1bnRpbWVfMSA9IHJlcXVpcmUoXCJhc2stc2RrLXJ1bnRpbWVcIik7XG5jb25zdCBBdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuLi9hdHRyaWJ1dGVzL0F0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeVwiKTtcbmNvbnN0IFJlc3BvbnNlRmFjdG9yeV8xID0gcmVxdWlyZShcIi4uL3Jlc3BvbnNlL1Jlc3BvbnNlRmFjdG9yeVwiKTtcbnZhciBTZXJ2aWNlQ2xpZW50RmFjdG9yeSA9IGFza19zZGtfbW9kZWxfMS5zZXJ2aWNlcy5TZXJ2aWNlQ2xpZW50RmFjdG9yeTtcbi8qKlxuICogVG9wIGxldmVsIGNvbnRhaW5lciBmb3IgcmVxdWVzdCBkaXNwYXRjaGVyLlxuICovXG5jbGFzcyBDdXN0b21Ta2lsbCB7XG4gICAgY29uc3RydWN0b3Ioc2tpbGxDb25maWd1cmF0aW9uKSB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2VBZGFwdGVyID0gc2tpbGxDb25maWd1cmF0aW9uLnBlcnNpc3RlbmNlQWRhcHRlcjtcbiAgICAgICAgdGhpcy5hcGlDbGllbnQgPSBza2lsbENvbmZpZ3VyYXRpb24uYXBpQ2xpZW50O1xuICAgICAgICB0aGlzLmN1c3RvbVVzZXJBZ2VudCA9IHNraWxsQ29uZmlndXJhdGlvbi5jdXN0b21Vc2VyQWdlbnQ7XG4gICAgICAgIHRoaXMuc2tpbGxJZCA9IHNraWxsQ29uZmlndXJhdGlvbi5za2lsbElkO1xuICAgICAgICB0aGlzLnJlcXVlc3REaXNwYXRjaGVyID0gbmV3IGFza19zZGtfcnVudGltZV8xLkdlbmVyaWNSZXF1ZXN0RGlzcGF0Y2hlcih7XG4gICAgICAgICAgICByZXF1ZXN0TWFwcGVyczogc2tpbGxDb25maWd1cmF0aW9uLnJlcXVlc3RNYXBwZXJzLFxuICAgICAgICAgICAgaGFuZGxlckFkYXB0ZXJzOiBza2lsbENvbmZpZ3VyYXRpb24uaGFuZGxlckFkYXB0ZXJzLFxuICAgICAgICAgICAgZXJyb3JNYXBwZXI6IHNraWxsQ29uZmlndXJhdGlvbi5lcnJvck1hcHBlcixcbiAgICAgICAgICAgIHJlcXVlc3RJbnRlcmNlcHRvcnM6IHNraWxsQ29uZmlndXJhdGlvbi5yZXF1ZXN0SW50ZXJjZXB0b3JzLFxuICAgICAgICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvcnM6IHNraWxsQ29uZmlndXJhdGlvbi5yZXNwb25zZUludGVyY2VwdG9ycyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBhY2thZ2VJbmZvID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG4gICAgICAgIGFza19zZGtfcnVudGltZV8xLlVzZXJBZ2VudE1hbmFnZXIucmVnaXN0ZXJDb21wb25lbnQoYXNrX3Nka19ydW50aW1lXzEuY3JlYXRlQXNrU2RrVXNlckFnZW50KHBhY2thZ2VJbmZvLnZlcnNpb24pKTtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tVXNlckFnZW50KSB7XG4gICAgICAgICAgICBhc2tfc2RrX3J1bnRpbWVfMS5Vc2VyQWdlbnRNYW5hZ2VyLnJlZ2lzdGVyQ29tcG9uZW50KHRoaXMuY3VzdG9tVXNlckFnZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBkaXNwYXRjaGVyIHRvIGhhbmRsZXIgdGhlIHJlcXVlc3QgZW52ZWxvcGUgYW5kIGNvbnN0cnVjdCB0aGUgaGFuZGxlciBpbnB1dC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdEVudmVsb3BlXG4gICAgICogQHBhcmFtIGNvbnRleHRcbiAgICAgKi9cbiAgICBhc3luYyBpbnZva2UocmVxdWVzdEVudmVsb3BlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLnNraWxsSWQgIT0gbnVsbCAmJiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dC5TeXN0ZW0uYXBwbGljYXRpb24uYXBwbGljYXRpb25JZCAhPT0gdGhpcy5za2lsbElkKSB7XG4gICAgICAgICAgICB0aHJvdyBhc2tfc2RrX3J1bnRpbWVfMS5jcmVhdGVBc2tTZGtFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsICdDdXN0b21Ta2lsbCBJRCB2ZXJpZmljYXRpb24gZmFpbGVkIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICAgICAgcmVxdWVzdEVudmVsb3BlLFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNNYW5hZ2VyOiBBdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnlfMS5BdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnkuaW5pdCh7XG4gICAgICAgICAgICAgICAgcmVxdWVzdEVudmVsb3BlLFxuICAgICAgICAgICAgICAgIHBlcnNpc3RlbmNlQWRhcHRlcjogdGhpcy5wZXJzaXN0ZW5jZUFkYXB0ZXIsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHJlc3BvbnNlQnVpbGRlcjogUmVzcG9uc2VGYWN0b3J5XzEuUmVzcG9uc2VGYWN0b3J5LmluaXQoKSxcbiAgICAgICAgICAgIHNlcnZpY2VDbGllbnRGYWN0b3J5OiB0aGlzLmFwaUNsaWVudFxuICAgICAgICAgICAgICAgID8gbmV3IFNlcnZpY2VDbGllbnRGYWN0b3J5KHtcbiAgICAgICAgICAgICAgICAgICAgYXBpQ2xpZW50OiB0aGlzLmFwaUNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgYXBpRW5kcG9pbnQ6IHJlcXVlc3RFbnZlbG9wZS5jb250ZXh0LlN5c3RlbS5hcGlFbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvblZhbHVlOiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dC5TeXN0ZW0uYXBpQWNjZXNzVG9rZW4sXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnJlcXVlc3REaXNwYXRjaGVyLmRpc3BhdGNoKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnNpb246ICcxLjAnLFxuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICB1c2VyQWdlbnQ6IGFza19zZGtfcnVudGltZV8xLlVzZXJBZ2VudE1hbmFnZXIuZ2V0VXNlckFnZW50KCksXG4gICAgICAgICAgICBzZXNzaW9uQXR0cmlidXRlczogcmVxdWVzdEVudmVsb3BlLnNlc3Npb24gPyBpbnB1dC5hdHRyaWJ1dGVzTWFuYWdlci5nZXRTZXNzaW9uQXR0cmlidXRlcygpIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBza2lsbCBjYW4gc3VwcG9ydCB0aGUgc3BlY2lmaWMgcmVxdWVzdCB0eXBlLlxuICAgICAqIEBwYXJhbSBpbnB1dFxuICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICovXG4gICAgc3VwcG9ydHMoaW5wdXQsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuICEhaW5wdXQucmVxdWVzdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwZW5kIGFkZGl0aW9uYWwgdXNlciBhZ2VudCBpbmZvXG4gICAgICogQHBhcmFtIHVzZXJBZ2VudFxuICAgICAqL1xuICAgIGFwcGVuZEFkZGl0aW9uYWxVc2VyQWdlbnQodXNlckFnZW50KSB7XG4gICAgICAgIGFza19zZGtfcnVudGltZV8xLlVzZXJBZ2VudE1hbmFnZXIucmVnaXN0ZXJDb21wb25lbnQodXNlckFnZW50KTtcbiAgICB9XG59XG5leHBvcnRzLkN1c3RvbVNraWxsID0gQ3VzdG9tU2tpbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXN0b21Ta2lsbC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/skill/CustomSkill.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/skill/SkillBuilders.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SkillBuilders = void 0;\nconst CustomSkillFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/skill/factory/CustomSkillFactory.js\");\n/**\n * Provider for skill builders.\n */\nexports.SkillBuilders = {\n    custom() {\n        return CustomSkillFactory_1.CustomSkillFactory.init();\n    },\n};\n//# sourceMappingURL=SkillBuilders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3Qvc2tpbGwvU2tpbGxCdWlsZGVycy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhY2thZ2UuanNvbi8uL25vZGVfbW9kdWxlcy9hc2stc2RrLWNvcmUvZGlzdC9za2lsbC9Ta2lsbEJ1aWxkZXJzLmpzPzkxYzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTggQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ta2lsbEJ1aWxkZXJzID0gdm9pZCAwO1xuY29uc3QgQ3VzdG9tU2tpbGxGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9mYWN0b3J5L0N1c3RvbVNraWxsRmFjdG9yeVwiKTtcbi8qKlxuICogUHJvdmlkZXIgZm9yIHNraWxsIGJ1aWxkZXJzLlxuICovXG5leHBvcnRzLlNraWxsQnVpbGRlcnMgPSB7XG4gICAgY3VzdG9tKCkge1xuICAgICAgICByZXR1cm4gQ3VzdG9tU2tpbGxGYWN0b3J5XzEuQ3VzdG9tU2tpbGxGYWN0b3J5LmluaXQoKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNraWxsQnVpbGRlcnMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/skill/SkillBuilders.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/skill/factory/BaseSkillFactory.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseSkillFactory = void 0;\nconst ask_sdk_runtime_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/index.js\");\nconst CustomSkill_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/skill/CustomSkill.js\");\nclass BaseSkillFactory {\n    static init() {\n        const runtimeConfigurationBuilder = new ask_sdk_runtime_1.RuntimeConfigurationBuilder();\n        let thisCustomUserAgent;\n        let thisSkillId;\n        return {\n            addRequestHandler(matcher, executor) {\n                const canHandle = typeof matcher === 'string'\n                    ? ({ requestEnvelope }) => matcher === (requestEnvelope.request.type === 'IntentRequest'\n                        ? requestEnvelope.request.intent.name\n                        : requestEnvelope.request.type)\n                    : matcher;\n                runtimeConfigurationBuilder.addRequestHandler(canHandle, executor);\n                return this;\n            },\n            addRequestHandlers(...requestHandlers) {\n                runtimeConfigurationBuilder.addRequestHandlers(...requestHandlers);\n                return this;\n            },\n            addRequestInterceptors(...executors) {\n                runtimeConfigurationBuilder.addRequestInterceptors(...executors);\n                return this;\n            },\n            addResponseInterceptors(...executors) {\n                runtimeConfigurationBuilder.addResponseInterceptors(...executors);\n                return this;\n            },\n            addErrorHandler(matcher, executor) {\n                runtimeConfigurationBuilder.addErrorHandler(matcher, executor);\n                return this;\n            },\n            addErrorHandlers(...errorHandlers) {\n                runtimeConfigurationBuilder.addErrorHandlers(...errorHandlers);\n                return this;\n            },\n            withCustomUserAgent(customUserAgent) {\n                thisCustomUserAgent = customUserAgent;\n                return this;\n            },\n            withSkillId(skillId) {\n                thisSkillId = skillId;\n                return this;\n            },\n            getSkillConfiguration() {\n                const runtimeConfiguration = runtimeConfigurationBuilder.getRuntimeConfiguration();\n                return Object.assign(Object.assign({}, runtimeConfiguration), { customUserAgent: thisCustomUserAgent, skillId: thisSkillId });\n            },\n            create() {\n                return new CustomSkill_1.CustomSkill(this.getSkillConfiguration());\n            },\n            lambda() {\n                const skill = new CustomSkill_1.CustomSkill(this.getSkillConfiguration());\n                return (event, context, callback) => {\n                    skill.invoke(event, context)\n                        .then((response) => {\n                        callback(null, response);\n                    })\n                        .catch((err) => {\n                        callback(err, null);\n                    });\n                };\n            },\n        };\n    }\n    constructor() { }\n}\nexports.BaseSkillFactory = BaseSkillFactory;\n//# sourceMappingURL=BaseSkillFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3Qvc2tpbGwvZmFjdG9yeS9CYXNlU2tpbGxGYWN0b3J5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstY29yZS9kaXN0L3NraWxsL2ZhY3RvcnkvQmFzZVNraWxsRmFjdG9yeS5qcz9lYmMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZVNraWxsRmFjdG9yeSA9IHZvaWQgMDtcbmNvbnN0IGFza19zZGtfcnVudGltZV8xID0gcmVxdWlyZShcImFzay1zZGstcnVudGltZVwiKTtcbmNvbnN0IEN1c3RvbVNraWxsXzEgPSByZXF1aXJlKFwiLi4vQ3VzdG9tU2tpbGxcIik7XG5jbGFzcyBCYXNlU2tpbGxGYWN0b3J5IHtcbiAgICBzdGF0aWMgaW5pdCgpIHtcbiAgICAgICAgY29uc3QgcnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyID0gbmV3IGFza19zZGtfcnVudGltZV8xLlJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlcigpO1xuICAgICAgICBsZXQgdGhpc0N1c3RvbVVzZXJBZ2VudDtcbiAgICAgICAgbGV0IHRoaXNTa2lsbElkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkUmVxdWVzdEhhbmRsZXIobWF0Y2hlciwgZXhlY3V0b3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5IYW5kbGUgPSB0eXBlb2YgbWF0Y2hlciA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyAoeyByZXF1ZXN0RW52ZWxvcGUgfSkgPT4gbWF0Y2hlciA9PT0gKHJlcXVlc3RFbnZlbG9wZS5yZXF1ZXN0LnR5cGUgPT09ICdJbnRlbnRSZXF1ZXN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXF1ZXN0RW52ZWxvcGUucmVxdWVzdC5pbnRlbnQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZXF1ZXN0RW52ZWxvcGUucmVxdWVzdC50eXBlKVxuICAgICAgICAgICAgICAgICAgICA6IG1hdGNoZXI7XG4gICAgICAgICAgICAgICAgcnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyLmFkZFJlcXVlc3RIYW5kbGVyKGNhbkhhbmRsZSwgZXhlY3V0b3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZFJlcXVlc3RIYW5kbGVycyguLi5yZXF1ZXN0SGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBydW50aW1lQ29uZmlndXJhdGlvbkJ1aWxkZXIuYWRkUmVxdWVzdEhhbmRsZXJzKC4uLnJlcXVlc3RIYW5kbGVycyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWRkUmVxdWVzdEludGVyY2VwdG9ycyguLi5leGVjdXRvcnMpIHtcbiAgICAgICAgICAgICAgICBydW50aW1lQ29uZmlndXJhdGlvbkJ1aWxkZXIuYWRkUmVxdWVzdEludGVyY2VwdG9ycyguLi5leGVjdXRvcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZFJlc3BvbnNlSW50ZXJjZXB0b3JzKC4uLmV4ZWN1dG9ycykge1xuICAgICAgICAgICAgICAgIHJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlci5hZGRSZXNwb25zZUludGVyY2VwdG9ycyguLi5leGVjdXRvcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZEVycm9ySGFuZGxlcihtYXRjaGVyLCBleGVjdXRvcikge1xuICAgICAgICAgICAgICAgIHJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlci5hZGRFcnJvckhhbmRsZXIobWF0Y2hlciwgZXhlY3V0b3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZEVycm9ySGFuZGxlcnMoLi4uZXJyb3JIYW5kbGVycykge1xuICAgICAgICAgICAgICAgIHJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlci5hZGRFcnJvckhhbmRsZXJzKC4uLmVycm9ySGFuZGxlcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdpdGhDdXN0b21Vc2VyQWdlbnQoY3VzdG9tVXNlckFnZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpc0N1c3RvbVVzZXJBZ2VudCA9IGN1c3RvbVVzZXJBZ2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aXRoU2tpbGxJZChza2lsbElkKSB7XG4gICAgICAgICAgICAgICAgdGhpc1NraWxsSWQgPSBza2lsbElkO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNraWxsQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBydW50aW1lQ29uZmlndXJhdGlvbiA9IHJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlci5nZXRSdW50aW1lQ29uZmlndXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJ1bnRpbWVDb25maWd1cmF0aW9uKSwgeyBjdXN0b21Vc2VyQWdlbnQ6IHRoaXNDdXN0b21Vc2VyQWdlbnQsIHNraWxsSWQ6IHRoaXNTa2lsbElkIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEN1c3RvbVNraWxsXzEuQ3VzdG9tU2tpbGwodGhpcy5nZXRTa2lsbENvbmZpZ3VyYXRpb24oKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFtYmRhKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNraWxsID0gbmV3IEN1c3RvbVNraWxsXzEuQ3VzdG9tU2tpbGwodGhpcy5nZXRTa2lsbENvbmZpZ3VyYXRpb24oKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChldmVudCwgY29udGV4dCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2tpbGwuaW52b2tlKGV2ZW50LCBjb250ZXh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG59XG5leHBvcnRzLkJhc2VTa2lsbEZhY3RvcnkgPSBCYXNlU2tpbGxGYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZVNraWxsRmFjdG9yeS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/skill/factory/BaseSkillFactory.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/skill/factory/CustomSkillFactory.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomSkillFactory = void 0;\nconst BaseSkillFactory_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/skill/factory/BaseSkillFactory.js\");\n/**\n * Provider for {@link CustomSkillBuilder}\n */\nclass CustomSkillFactory {\n    static init() {\n        let thisPersistenceAdapter;\n        let thisApiClient;\n        const baseSkillBuilder = BaseSkillFactory_1.BaseSkillFactory.init();\n        return Object.assign(Object.assign({}, baseSkillBuilder), { getSkillConfiguration() {\n                const skillConfiguration = baseSkillBuilder.getSkillConfiguration();\n                return Object.assign(Object.assign({}, skillConfiguration), { persistenceAdapter: thisPersistenceAdapter, apiClient: thisApiClient });\n            },\n            withPersistenceAdapter(persistenceAdapter) {\n                thisPersistenceAdapter = persistenceAdapter;\n                return this;\n            },\n            withApiClient(apiClient) {\n                thisApiClient = apiClient;\n                return this;\n            } });\n    }\n    constructor() { }\n}\nexports.CustomSkillFactory = CustomSkillFactory;\n//# sourceMappingURL=CustomSkillFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3Qvc2tpbGwvZmFjdG9yeS9DdXN0b21Ta2lsbEZhY3RvcnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3Qvc2tpbGwvZmFjdG9yeS9DdXN0b21Ta2lsbEZhY3RvcnkuanM/NDM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkN1c3RvbVNraWxsRmFjdG9yeSA9IHZvaWQgMDtcbmNvbnN0IEJhc2VTa2lsbEZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL0Jhc2VTa2lsbEZhY3RvcnlcIik7XG4vKipcbiAqIFByb3ZpZGVyIGZvciB7QGxpbmsgQ3VzdG9tU2tpbGxCdWlsZGVyfVxuICovXG5jbGFzcyBDdXN0b21Ta2lsbEZhY3Rvcnkge1xuICAgIHN0YXRpYyBpbml0KCkge1xuICAgICAgICBsZXQgdGhpc1BlcnNpc3RlbmNlQWRhcHRlcjtcbiAgICAgICAgbGV0IHRoaXNBcGlDbGllbnQ7XG4gICAgICAgIGNvbnN0IGJhc2VTa2lsbEJ1aWxkZXIgPSBCYXNlU2tpbGxGYWN0b3J5XzEuQmFzZVNraWxsRmFjdG9yeS5pbml0KCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGJhc2VTa2lsbEJ1aWxkZXIpLCB7IGdldFNraWxsQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbENvbmZpZ3VyYXRpb24gPSBiYXNlU2tpbGxCdWlsZGVyLmdldFNraWxsQ29uZmlndXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNraWxsQ29uZmlndXJhdGlvbiksIHsgcGVyc2lzdGVuY2VBZGFwdGVyOiB0aGlzUGVyc2lzdGVuY2VBZGFwdGVyLCBhcGlDbGllbnQ6IHRoaXNBcGlDbGllbnQgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2l0aFBlcnNpc3RlbmNlQWRhcHRlcihwZXJzaXN0ZW5jZUFkYXB0ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzUGVyc2lzdGVuY2VBZGFwdGVyID0gcGVyc2lzdGVuY2VBZGFwdGVyO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdpdGhBcGlDbGllbnQoYXBpQ2xpZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpc0FwaUNsaWVudCA9IGFwaUNsaWVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gfSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG59XG5leHBvcnRzLkN1c3RvbVNraWxsRmFjdG9yeSA9IEN1c3RvbVNraWxsRmFjdG9yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUN1c3RvbVNraWxsRmFjdG9yeS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/skill/factory/CustomSkillFactory.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/util/RequestEnvelopeUtils.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isNewSession = exports.getSupportedInterfaces = exports.getSimpleSlotValues = exports.getSlotValueV2 = exports.getSlotValue = exports.getSlot = exports.getDialogState = exports.getUserId = exports.getDeviceId = exports.getApiAccessToken = exports.getAccountLinkingAccessToken = exports.getRequest = exports.getIntentName = exports.getRequestType = exports.getLocale = void 0;\nconst ask_sdk_runtime_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/index.js\");\n/**\n * Retrieves the locale from the request.\n *\n * The method returns the locale value present in the request. More information about the locale can be found\n * here: https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html#request-locale\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {string}\n */\nfunction getLocale(requestEnvelope) {\n    return requestEnvelope.request.locale;\n}\nexports.getLocale = getLocale;\n/**\n * Retrieves the type of the request.\n *\n * The method retrieves the request type of the input request. More information about the different request\n * types are mentioned here:\n * https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html#request-body-parameters\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {string}\n */\nfunction getRequestType(requestEnvelope) {\n    return requestEnvelope.request.type;\n}\nexports.getRequestType = getRequestType;\n/**\n * Retrieves the name of the intent from the request.\n *\n * The method retrieves the intent name from the input request, only if the input request is an {@link IntentRequest}.\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {string}\n */\nfunction getIntentName(requestEnvelope) {\n    if (getRequestType(requestEnvelope) === 'IntentRequest') {\n        return requestEnvelope.request.intent.name;\n    }\n    throw ask_sdk_runtime_1.createAskSdkError('RequestEnvelopeUtils', `Expecting request type of IntentRequest but got ${getRequestType(requestEnvelope)}.`);\n}\nexports.getIntentName = getIntentName;\n/**\n * Get request object.\n *\n * We can set a specific type to the response by using the generics\n * @param {RequestEnvelope} requestEnvelope\n * @return {Request}\n * @example\n * ```\n * const intentRequest = getRequest<IntentRequest>(requestEnvelope)\n * console.log(intentRequest.intent.name)\n * ```\n */\nfunction getRequest(requestEnvelope) {\n    return requestEnvelope.request;\n}\nexports.getRequest = getRequest;\n/**\n * Retrieves the account linking access token from the request.\n *\n * The method retrieves the user's accessToken from the input request. Once a user successfully enables a skill\n * and links their Alexa account to the skill, the input request will have the user's access token. A null value\n * is returned if there is no access token in the input request. More information on this can be found here:\n * https://developer.amazon.com/docs/account-linking/add-account-linking-logic-custom-skill.html\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {string}\n */\nfunction getAccountLinkingAccessToken(requestEnvelope) {\n    return requestEnvelope.context.System.user.accessToken;\n}\nexports.getAccountLinkingAccessToken = getAccountLinkingAccessToken;\n/**\n * Retrieves the API access token from the request.\n *\n * The method retrieves the apiAccessToken from the input request, which has the encapsulated information of\n * permissions granted by the user. This token can be used to call Alexa-specific APIs. More information\n * about this can be found here:\n * https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html#system-object\n *\n * The SDK automatically injects this value into service client instances retrieved from the {@link services.ServiceClientFactory}\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {string}\n */\nfunction getApiAccessToken(requestEnvelope) {\n    return requestEnvelope.context.System.apiAccessToken;\n}\nexports.getApiAccessToken = getApiAccessToken;\n/**\n * Retrieves the device ID from the request.\n *\n * The method retrieves the deviceId property from the input request. This value uniquely identifies the device\n * and is generally used as input for some Alexa-specific API calls. More information about this can be found here:\n * https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html#system-object\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {string}\n */\nfunction getDeviceId(requestEnvelope) {\n    return requestEnvelope.context.System.device ? requestEnvelope.context.System.device.deviceId : null;\n}\nexports.getDeviceId = getDeviceId;\n/**\n * Retrieves the user ID from the request.\n *\n * The method retrieves the userId property from the input request. This value uniquely identifies the user\n * and is generally used as input for some Alexa-specific API calls. More information about this can be found here:\n * https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html#system-object\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {string}\n */\nfunction getUserId(requestEnvelope) {\n    return requestEnvelope.context.System.user ? requestEnvelope.context.System.user.userId : null;\n}\nexports.getUserId = getUserId;\n/**\n * Retrieves the dialog state from the request.\n *\n * The method retrieves the `dialogState` from the intent request, if the skill's interaction model includes a\n * dialog model. This can be used to determine the current status of user conversation and return the appropriate\n * dialog directives if the conversation is not yet complete. More information on dialog management can be found here:\n * https://developer.amazon.com/docs/custom-skills/define-the-dialog-to-collect-and-confirm-required-information.html\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {DialogState}\n */\nfunction getDialogState(requestEnvelope) {\n    if (getRequestType(requestEnvelope) === 'IntentRequest') {\n        return requestEnvelope.request.dialogState;\n    }\n    throw ask_sdk_runtime_1.createAskSdkError('RequestEnvelopeUtils', `Expecting request type of IntentRequest but got ${getRequestType(requestEnvelope)}.`);\n}\nexports.getDialogState = getDialogState;\n/**\n * Returns the {@link Slot} for the given slot name from the request.\n *\n * This method attempts to retrieve the requested {@link Slot} from the incoming request. If the slot does not\n * exist in the request, a null value will be returned.\n *\n * @param {RequestEnvelope} requestEnvelope\n * @param {string} slotName\n * @return {Slot}\n */\nfunction getSlot(requestEnvelope, slotName) {\n    if (getRequestType(requestEnvelope) === 'IntentRequest') {\n        const slots = requestEnvelope.request.intent.slots;\n        if (slots != null) {\n            return slots[slotName];\n        }\n        return null;\n    }\n    throw ask_sdk_runtime_1.createAskSdkError('RequestEnvelopeUtils', `Expecting request type of IntentRequest but got ${getRequestType(requestEnvelope)}.`);\n}\nexports.getSlot = getSlot;\n/**\n * Returns the value from the given {@link Slot} in the request.\n *\n * This method attempts to retrieve the requested {@link Slot}'s value from the incoming request. If the slot does not\n * exist in the request, a null will be returned.\n *\n * @param {RequestEnvelope} requestEnvelope\n * @param {string} slotName\n * @return {string}\n */\nfunction getSlotValue(requestEnvelope, slotName) {\n    if (getRequestType(requestEnvelope) === 'IntentRequest') {\n        const slot = getSlot(requestEnvelope, slotName);\n        if (slot) {\n            return slot.value;\n        }\n        return null;\n    }\n    throw ask_sdk_runtime_1.createAskSdkError('RequestEnvelopeUtils', `Expecting request type of IntentRequest but got ${getRequestType(requestEnvelope)}.`);\n}\nexports.getSlotValue = getSlotValue;\n/**\n * Returns the SlotValue from the given {@link Slot} in the request.\n *\n * SlotValue will exist for slots using multiple slot value feature. And this method attempts to retrieve the requested {@link Slot}'s SlotValue from the incoming request.\n * If the slot or slot.slotValue does not exist in the request, null will be returned.\n *\n * @param {RequestEnvelope} requestEnvelope\n * @param {string} slotName\n * @return {SlotValue}\n */\nfunction getSlotValueV2(requestEnvelope, slotName) {\n    const slot = getSlot(requestEnvelope, slotName);\n    if (slot && slot.slotValue) {\n        return slot.slotValue;\n    }\n    return null;\n}\nexports.getSlotValueV2 = getSlotValueV2;\n/**\n * Returns all the SimpleSlotValues from the given {@link SlotValue}.\n * @param {SlotValue} slotValue\n * @return {SimpleSlotValue[]}\n */\nfunction getSimpleSlotValues(slotValue) {\n    // If the given slotValue type is SimpleSlotValue, directly return slotValue in an array\n    if (slotValue.type === 'Simple') {\n        return [slotValue];\n    }\n    // If the given slotValue type is ListSlotValue\n    // Loop all the SlotValues and retrieve simpleSlotValues recursively\n    if (slotValue.type === 'List' && slotValue.values) {\n        return slotValue.values.reduce((simpleSlotValues, value) => simpleSlotValues.concat(getSimpleSlotValues(value)), []);\n    }\n    return [];\n}\nexports.getSimpleSlotValues = getSimpleSlotValues;\n/**\n * Retrieves the {@link SupportedInterfaces} from the request.\n *\n * This method returns an object listing each interface that the device supports. For example, if\n * supportedInterfaces includes AudioPlayer, then you know that the device supports streaming audio using the\n * AudioPlayer interface.\n *\n * @param {RequestEnvelope} requestEnvelope\n * @return {SupportedInterfaces}\n */\nfunction getSupportedInterfaces(requestEnvelope) {\n    var _a, _b;\n    return (_b = (_a = requestEnvelope.context.System.device) === null || _a === void 0 ? void 0 : _a.supportedInterfaces) !== null && _b !== void 0 ? _b : {};\n}\nexports.getSupportedInterfaces = getSupportedInterfaces;\n/**\n * Returns whether the request is a new session.\n *\n * The method retrieves the new value from the input request's session, which indicates if it's a new session or\n * not. More information can be found here :\n * https://developer.amazon.com/docs/custom-skills/request-and-response-json-reference.html#session-object\n *\n * @param requestEnvelope\n */\nfunction isNewSession(requestEnvelope) {\n    const session = requestEnvelope.session;\n    if (session) {\n        return session.new;\n    }\n    throw ask_sdk_runtime_1.createAskSdkError('RequestEnvelopeUtils', `The provided request doesn't contain a session.`);\n}\nexports.isNewSession = isNewSession;\n//# sourceMappingURL=RequestEnvelopeUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/util/RequestEnvelopeUtils.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/util/SsmlUtils.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.escapeXmlCharacters = void 0;\n/**\n * return the string with all invalid XML characters escaped\n * @param input\n */\nfunction escapeXmlCharacters(input) {\n    const invalidXmlCharactersMapping = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&apos;',\n    };\n    const invalidXmlCharactersMappingReverse = Object.keys(invalidXmlCharactersMapping).reduce(\n    /* eslint-disable-next-line */\n    (obj, key) => {\n        obj[invalidXmlCharactersMapping[key]] = key;\n        return obj;\n    }, {});\n    // sanitize any already escaped character to ensure they are not escaped more than once\n    const sanitizedInput = input.replace(/&amp;|&lt;|&gt;|&quot;|&apos;]/g, (c) => invalidXmlCharactersMappingReverse[c]);\n    return sanitizedInput.replace(/[&'\"><]/g, (c) => invalidXmlCharactersMapping[c]);\n}\nexports.escapeXmlCharacters = escapeXmlCharacters;\n//# sourceMappingURL=SsmlUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvdXRpbC9Tc21sVXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1jb3JlL2Rpc3QvdXRpbC9Tc21sVXRpbHMuanM/ZDdmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVzY2FwZVhtbENoYXJhY3RlcnMgPSB2b2lkIDA7XG4vKipcbiAqIHJldHVybiB0aGUgc3RyaW5nIHdpdGggYWxsIGludmFsaWQgWE1MIGNoYXJhY3RlcnMgZXNjYXBlZFxuICogQHBhcmFtIGlucHV0XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVhtbENoYXJhY3RlcnMoaW5wdXQpIHtcbiAgICBjb25zdCBpbnZhbGlkWG1sQ2hhcmFjdGVyc01hcHBpbmcgPSB7XG4gICAgICAgICcmJzogJyZhbXA7JyxcbiAgICAgICAgJzwnOiAnJmx0OycsXG4gICAgICAgICc+JzogJyZndDsnLFxuICAgICAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAgICAgXCInXCI6ICcmYXBvczsnLFxuICAgIH07XG4gICAgY29uc3QgaW52YWxpZFhtbENoYXJhY3RlcnNNYXBwaW5nUmV2ZXJzZSA9IE9iamVjdC5rZXlzKGludmFsaWRYbWxDaGFyYWN0ZXJzTWFwcGluZykucmVkdWNlKFxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL1xuICAgIChvYmosIGtleSkgPT4ge1xuICAgICAgICBvYmpbaW52YWxpZFhtbENoYXJhY3RlcnNNYXBwaW5nW2tleV1dID0ga2V5O1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sIHt9KTtcbiAgICAvLyBzYW5pdGl6ZSBhbnkgYWxyZWFkeSBlc2NhcGVkIGNoYXJhY3RlciB0byBlbnN1cmUgdGhleSBhcmUgbm90IGVzY2FwZWQgbW9yZSB0aGFuIG9uY2VcbiAgICBjb25zdCBzYW5pdGl6ZWRJbnB1dCA9IGlucHV0LnJlcGxhY2UoLyZhbXA7fCZsdDt8Jmd0O3wmcXVvdDt8JmFwb3M7XS9nLCAoYykgPT4gaW52YWxpZFhtbENoYXJhY3RlcnNNYXBwaW5nUmV2ZXJzZVtjXSk7XG4gICAgcmV0dXJuIHNhbml0aXplZElucHV0LnJlcGxhY2UoL1smJ1wiPjxdL2csIChjKSA9PiBpbnZhbGlkWG1sQ2hhcmFjdGVyc01hcHBpbmdbY10pO1xufVxuZXhwb3J0cy5lc2NhcGVYbWxDaGFyYWN0ZXJzID0gZXNjYXBlWG1sQ2hhcmFjdGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNzbWxVdGlscy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/util/SsmlUtils.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/dist/util/ViewportUtils.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License').\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the 'license' file accompanying this file. This file is distributed\n * on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getViewportProfile = exports.getViewportDpiGroup = exports.getViewportSizeGroup = exports.getViewportOrientation = exports.ViewportDpiGroupOrder = exports.ViewportSizeGroupOrder = void 0;\nconst ask_sdk_runtime_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/index.js\");\nexports.ViewportSizeGroupOrder = ['XSMALL', 'SMALL', 'MEDIUM', 'LARGE', 'XLARGE'];\nexports.ViewportDpiGroupOrder = ['XLOW', 'LOW', 'MEDIUM', 'HIGH', 'XHIGH', 'XXHIGH'];\n/**\n * return the {@link ViewportOrientation} of given width and height value\n * @param {number} width\n * @param {number} height\n * @return {ViewportOrientation}\n */\nfunction getViewportOrientation(width, height) {\n    return width > height\n        ? 'LANDSCAPE'\n        : width < height\n            ? 'PORTRAIT'\n            : 'EQUAL';\n}\nexports.getViewportOrientation = getViewportOrientation;\n/**\n * return the {@link ViewportSizeGroup} of given size value\n * @param {number} size\n * @return {ViewportSizeGroup}\n */\nfunction getViewportSizeGroup(size) {\n    if (isBetween(size, 0, 600)) {\n        return 'XSMALL';\n    }\n    else if (isBetween(size, 600, 960)) {\n        return 'SMALL';\n    }\n    else if (isBetween(size, 960, 1280)) {\n        return 'MEDIUM';\n    }\n    else if (isBetween(size, 1280, 1920)) {\n        return 'LARGE';\n    }\n    else if (isBetween(size, 1920, Number.MAX_VALUE)) {\n        return 'XLARGE';\n    }\n    throw ask_sdk_runtime_1.createAskSdkError('ViewportUtils', `unknown size group value ${size}`);\n}\nexports.getViewportSizeGroup = getViewportSizeGroup;\n/**\n * return the {@link ViewportDpiGroup} of given dpi value\n * @param {number} dpi\n * @return {ViewportDpiGroup}\n */\nfunction getViewportDpiGroup(dpi) {\n    if (isBetween(dpi, 0, 121)) {\n        return 'XLOW';\n    }\n    else if (isBetween(dpi, 121, 161)) {\n        return 'LOW';\n    }\n    else if (isBetween(dpi, 161, 241)) {\n        return 'MEDIUM';\n    }\n    else if (isBetween(dpi, 241, 321)) {\n        return 'HIGH';\n    }\n    else if (isBetween(dpi, 321, 481)) {\n        return 'XHIGH';\n    }\n    else if (isBetween(dpi, 481, Number.MAX_VALUE)) {\n        return 'XXHIGH';\n    }\n    throw ask_sdk_runtime_1.createAskSdkError('ViewportUtils', `unknown dpi group value ${dpi}`);\n}\nexports.getViewportDpiGroup = getViewportDpiGroup;\n/**\n * check if target number is within the range of [min, max);\n * @param {number} target\n * @param {number} min\n * @param {number} max\n * @return {boolean}\n */\nfunction isBetween(target, min, max) {\n    return target >= min && target < max;\n}\n/**\n * return the {@link ViewportProfile} of given request envelope\n * @param {RequestEnvelope} requestEnvelope\n * @return {ViewportProfile}\n */\nfunction getViewportProfile(requestEnvelope) {\n    const viewportState = requestEnvelope.context.Viewport;\n    if (viewportState) {\n        const currentPixelWidth = viewportState.currentPixelWidth;\n        const currentPixelHeight = viewportState.currentPixelHeight;\n        const dpi = viewportState.dpi;\n        const shape = viewportState.shape;\n        const viewportOrientation = getViewportOrientation(currentPixelWidth, currentPixelHeight);\n        const viewportDpiGroup = getViewportDpiGroup(dpi);\n        const pixelWidthSizeGroup = getViewportSizeGroup(currentPixelWidth);\n        const pixelHeightSizeGroup = getViewportSizeGroup(currentPixelHeight);\n        if (shape === 'ROUND'\n            && viewportOrientation === 'EQUAL'\n            && viewportDpiGroup === 'LOW'\n            && pixelWidthSizeGroup === 'XSMALL'\n            && pixelHeightSizeGroup === 'XSMALL') {\n            return 'HUB-ROUND-SMALL';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'LANDSCAPE'\n            && viewportDpiGroup === 'LOW'\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) <= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) <= exports.ViewportSizeGroupOrder.indexOf('XSMALL')) {\n            return 'HUB-LANDSCAPE-SMALL';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'LANDSCAPE'\n            && viewportDpiGroup === 'LOW'\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) <= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) <= exports.ViewportSizeGroupOrder.indexOf('SMALL')) {\n            return 'HUB-LANDSCAPE-MEDIUM';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'LANDSCAPE'\n            && viewportDpiGroup === 'LOW'\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('LARGE')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('SMALL')) {\n            return 'HUB-LANDSCAPE-LARGE';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'LANDSCAPE'\n            && viewportDpiGroup === 'MEDIUM'\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('SMALL')) {\n            return 'MOBILE-LANDSCAPE-MEDIUM';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'PORTRAIT'\n            && viewportDpiGroup === 'MEDIUM'\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('SMALL')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')) {\n            return 'MOBILE-PORTRAIT-MEDIUM';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'LANDSCAPE'\n            && viewportDpiGroup === 'MEDIUM'\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('SMALL')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('XSMALL')) {\n            return 'MOBILE-LANDSCAPE-SMALL';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'PORTRAIT'\n            && viewportDpiGroup === 'MEDIUM'\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('XSMALL')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('SMALL')) {\n            return 'MOBILE-PORTRAIT-SMALL';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'LANDSCAPE'\n            && exports.ViewportDpiGroupOrder.indexOf(viewportDpiGroup) >= exports.ViewportDpiGroupOrder.indexOf('HIGH')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelWidthSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('XLARGE')\n            && exports.ViewportSizeGroupOrder.indexOf(pixelHeightSizeGroup) >= exports.ViewportSizeGroupOrder.indexOf('MEDIUM')) {\n            return 'TV-LANDSCAPE-XLARGE';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'PORTRAIT'\n            && exports.ViewportDpiGroupOrder.indexOf(viewportDpiGroup) >= exports.ViewportDpiGroupOrder.indexOf('HIGH')\n            && pixelWidthSizeGroup === 'XSMALL'\n            && pixelHeightSizeGroup === 'XLARGE') {\n            return 'TV-PORTRAIT-MEDIUM';\n        }\n        if (shape === 'RECTANGLE'\n            && viewportOrientation === 'LANDSCAPE'\n            && exports.ViewportDpiGroupOrder.indexOf(viewportDpiGroup) >= exports.ViewportDpiGroupOrder.indexOf('HIGH')\n            && pixelWidthSizeGroup === 'MEDIUM'\n            && pixelHeightSizeGroup === 'SMALL') {\n            return 'TV-LANDSCAPE-MEDIUM';\n        }\n    }\n    return 'UNKNOWN-VIEWPORT-PROFILE';\n}\nexports.getViewportProfile = getViewportProfile;\n//# sourceMappingURL=ViewportUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-core/dist/util/ViewportUtils.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-core/package.json":
/***/ ((module) => {

module.exports = JSON.parse('{"_args":[["ask-sdk-core@2.12.1","/home/yashaswi/Desktop/volley-skill-starter"]],"_from":"ask-sdk-core@2.12.1","_id":"ask-sdk-core@2.12.1","_inBundle":false,"_integrity":"sha512-2fT7XkHfuI0I6g12Y4mztgzmz7SwrKli8Z2p+eut1dVk8t5BHxWVXZCOVI5GVhW0DJbWwhjPSfOTAZX+zPoKEA==","_location":"/ask-sdk-core","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"ask-sdk-core@2.12.1","name":"ask-sdk-core","escapedName":"ask-sdk-core","rawSpec":"2.12.1","saveSpec":null,"fetchSpec":"2.12.1"},"_requiredBy":["/ask-sdk"],"_resolved":"https://registry.npmjs.org/ask-sdk-core/-/ask-sdk-core-2.12.1.tgz","_spec":"2.12.1","_where":"/home/yashaswi/Desktop/volley-skill-starter","author":{"name":"Amazon.com"},"bugs":{"url":"https://github.com/alexa/alexa-skill-sdk-for-nodejs/issues"},"contributors":[{"name":"Tianren Zhang","email":"tianrenz@amazon.com"},{"name":"Tiantian Xie","email":"xtiantia@amazon.com"}],"dependencies":{"ask-sdk-runtime":"^2.12.0"},"description":"Core package for Alexa Skills Kit SDK","devDependencies":{"@types/chai":"^4.1.2","@types/mocha":"^5.0.0","@types/node":"^16.11.1","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^3.9.0","@typescript-eslint/parser":"^3.9.0","ask-sdk-model":"^1.29.0","chai":"^4.1.2","cross-env":"^7.0.2","eslint":"^7.6.0","eslint-plugin-tsdoc":"^0.2.6","mocha":"^5.0.5","nock":"^9.2.3","nyc":"^14.1.1","sinon":"^7.0.13","ts-node":"^6.0.1","typescript":"^3.5.3"},"gitHead":"3849332e395b11ddeb1fb68a98aed1d2df026a04","homepage":"https://github.com/alexa/alexa-skill-sdk-for-nodejs#readme","keywords":["Alexa","SDK"],"license":"Apache-2.0","main":"dist/index.js","name":"ask-sdk-core","peerDependencies":{"ask-sdk-model":"^1.29.0"},"repository":{"type":"git","url":"git+https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs.git"},"scripts":{"build":"tsc && npm run lint","clean":"rm -rf ./dist","compile":"tsc","lint":"eslint \\"lib/**/*.{ts,tsx}\\" \\"tst/**/*.{ts,tsx}\\"","reinstall":"rm -rf ./node_modules && npm install","test":"cross-env TS_NODE_FILES=true mocha -r ts-node/register \\"./tst/**/*.spec.ts\\""},"types":"dist/index.d.ts","version":"2.12.1"}');

/***/ }),

/***/ "./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/attributes/persistence/DynamoDbPersistenceAdapter.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DynamoDbPersistenceAdapter = void 0;\nconst ask_sdk_core_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/index.js\");\nconst aws_sdk_1 = __webpack_require__(\"aws-sdk\");\nconst PartitionKeyGenerators_1 = __webpack_require__(\"./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/attributes/persistence/PartitionKeyGenerators.js\");\n/**\n * Implementation of {@link PersistenceAdapter} using AWS DynamoDB.\n */\nclass DynamoDbPersistenceAdapter {\n    constructor(config) {\n        this.tableName = config.tableName;\n        this.partitionKeyName = config.partitionKeyName ? config.partitionKeyName : 'id';\n        this.attributesName = config.attributesName ? config.attributesName : 'attributes';\n        this.createTable = config.createTable === true;\n        this.dynamoDBClient = config.dynamoDBClient ? config.dynamoDBClient : new aws_sdk_1.DynamoDB({ apiVersion: 'latest' });\n        this.partitionKeyGenerator = config.partitionKeyGenerator ? config.partitionKeyGenerator : PartitionKeyGenerators_1.PartitionKeyGenerators.userId;\n        this.dynamoDBDocumentClient = new aws_sdk_1.DynamoDB.DocumentClient({\n            convertEmptyValues: true,\n            service: this.dynamoDBClient,\n        });\n        // Create table when createTable is set to true and table does not exist\n        if (this.createTable) {\n            const createTableParams = {\n                AttributeDefinitions: [{\n                        AttributeName: this.partitionKeyName,\n                        AttributeType: 'S',\n                    }],\n                KeySchema: [{\n                        AttributeName: this.partitionKeyName,\n                        KeyType: 'HASH',\n                    }],\n                ProvisionedThroughput: {\n                    ReadCapacityUnits: 5,\n                    WriteCapacityUnits: 5,\n                },\n                TableName: this.tableName,\n            };\n            this.dynamoDBClient.createTable(createTableParams, (createTableErr) => {\n                if (createTableErr && createTableErr.code !== 'ResourceInUseException') {\n                    throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not create table (${this.tableName}): ${createTableErr.message}`);\n                }\n            });\n        }\n    }\n    /**\n     * Retrieves persistence attributes from AWS DynamoDB.\n     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate partition key.\n     * @returns {Promise<Object.<string, any>>}\n     */\n    async getAttributes(requestEnvelope) {\n        const attributesId = this.partitionKeyGenerator(requestEnvelope);\n        const getParams = {\n            Key: {\n                [this.partitionKeyName]: attributesId,\n            },\n            TableName: this.tableName,\n            ConsistentRead: true,\n        };\n        let data;\n        try {\n            data = await this.dynamoDBDocumentClient.get(getParams).promise();\n        }\n        catch (err) {\n            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not read item (${attributesId}) from table (${getParams.TableName}): ${err.message}`);\n        }\n        if (!Object.keys(data).length) {\n            return {};\n        }\n        else {\n            return data.Item[this.attributesName];\n        }\n    }\n    /**\n     * Saves persistence attributes to AWS DynamoDB.\n     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate partition key.\n     * @param {Object.<string, any>} attributes Attributes to be saved to DynamoDB.\n     * @return {Promise<void>}\n     */\n    async saveAttributes(requestEnvelope, attributes) {\n        const attributesId = this.partitionKeyGenerator(requestEnvelope);\n        const putParams = {\n            Item: {\n                [this.partitionKeyName]: attributesId,\n                [this.attributesName]: attributes,\n            },\n            TableName: this.tableName,\n        };\n        try {\n            await this.dynamoDBDocumentClient.put(putParams).promise();\n        }\n        catch (err) {\n            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not save item (${attributesId}) to table (${putParams.TableName}): ${err.message}`);\n        }\n    }\n    /**\n     * Delete persistence attributes from AWS DynamoDB.\n     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate partition key.\n     * @return {Promise<void>}\n     */\n    async deleteAttributes(requestEnvelope) {\n        const attributesId = this.partitionKeyGenerator(requestEnvelope);\n        const deleteParams = {\n            Key: {\n                [this.partitionKeyName]: attributesId,\n            },\n            TableName: this.tableName,\n        };\n        try {\n            await this.dynamoDBDocumentClient.delete(deleteParams).promise();\n        }\n        catch (err) {\n            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not delete item (${attributesId}) from table (${deleteParams.TableName}): ${err.message}`);\n        }\n    }\n}\nexports.DynamoDbPersistenceAdapter = DynamoDbPersistenceAdapter;\n//# sourceMappingURL=DynamoDbPersistenceAdapter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1keW5hbW9kYi1wZXJzaXN0ZW5jZS1hZGFwdGVyL2Rpc3QvYXR0cmlidXRlcy9wZXJzaXN0ZW5jZS9EeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhY2thZ2UuanNvbi8uL25vZGVfbW9kdWxlcy9hc2stc2RrLWR5bmFtb2RiLXBlcnNpc3RlbmNlLWFkYXB0ZXIvZGlzdC9hdHRyaWJ1dGVzL3BlcnNpc3RlbmNlL0R5bmFtb0RiUGVyc2lzdGVuY2VBZGFwdGVyLmpzPzY3ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTggQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlciA9IHZvaWQgMDtcbmNvbnN0IGFza19zZGtfY29yZV8xID0gcmVxdWlyZShcImFzay1zZGstY29yZVwiKTtcbmNvbnN0IGF3c19zZGtfMSA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuY29uc3QgUGFydGl0aW9uS2V5R2VuZXJhdG9yc18xID0gcmVxdWlyZShcIi4vUGFydGl0aW9uS2V5R2VuZXJhdG9yc1wiKTtcbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBlcnNpc3RlbmNlQWRhcHRlcn0gdXNpbmcgQVdTIER5bmFtb0RCLlxuICovXG5jbGFzcyBEeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMudGFibGVOYW1lID0gY29uZmlnLnRhYmxlTmFtZTtcbiAgICAgICAgdGhpcy5wYXJ0aXRpb25LZXlOYW1lID0gY29uZmlnLnBhcnRpdGlvbktleU5hbWUgPyBjb25maWcucGFydGl0aW9uS2V5TmFtZSA6ICdpZCc7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc05hbWUgPSBjb25maWcuYXR0cmlidXRlc05hbWUgPyBjb25maWcuYXR0cmlidXRlc05hbWUgOiAnYXR0cmlidXRlcyc7XG4gICAgICAgIHRoaXMuY3JlYXRlVGFibGUgPSBjb25maWcuY3JlYXRlVGFibGUgPT09IHRydWU7XG4gICAgICAgIHRoaXMuZHluYW1vREJDbGllbnQgPSBjb25maWcuZHluYW1vREJDbGllbnQgPyBjb25maWcuZHluYW1vREJDbGllbnQgOiBuZXcgYXdzX3Nka18xLkR5bmFtb0RCKHsgYXBpVmVyc2lvbjogJ2xhdGVzdCcgfSk7XG4gICAgICAgIHRoaXMucGFydGl0aW9uS2V5R2VuZXJhdG9yID0gY29uZmlnLnBhcnRpdGlvbktleUdlbmVyYXRvciA/IGNvbmZpZy5wYXJ0aXRpb25LZXlHZW5lcmF0b3IgOiBQYXJ0aXRpb25LZXlHZW5lcmF0b3JzXzEuUGFydGl0aW9uS2V5R2VuZXJhdG9ycy51c2VySWQ7XG4gICAgICAgIHRoaXMuZHluYW1vREJEb2N1bWVudENsaWVudCA9IG5ldyBhd3Nfc2RrXzEuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoe1xuICAgICAgICAgICAgY29udmVydEVtcHR5VmFsdWVzOiB0cnVlLFxuICAgICAgICAgICAgc2VydmljZTogdGhpcy5keW5hbW9EQkNsaWVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENyZWF0ZSB0YWJsZSB3aGVuIGNyZWF0ZVRhYmxlIGlzIHNldCB0byB0cnVlIGFuZCB0YWJsZSBkb2VzIG5vdCBleGlzdFxuICAgICAgICBpZiAodGhpcy5jcmVhdGVUYWJsZSkge1xuICAgICAgICAgICAgY29uc3QgY3JlYXRlVGFibGVQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgQXR0cmlidXRlRGVmaW5pdGlvbnM6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBBdHRyaWJ1dGVOYW1lOiB0aGlzLnBhcnRpdGlvbktleU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBBdHRyaWJ1dGVUeXBlOiAnUycsXG4gICAgICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIEtleVNjaGVtYTogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIEF0dHJpYnV0ZU5hbWU6IHRoaXMucGFydGl0aW9uS2V5TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEtleVR5cGU6ICdIQVNIJyxcbiAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgUHJvdmlzaW9uZWRUaHJvdWdocHV0OiB7XG4gICAgICAgICAgICAgICAgICAgIFJlYWRDYXBhY2l0eVVuaXRzOiA1LFxuICAgICAgICAgICAgICAgICAgICBXcml0ZUNhcGFjaXR5VW5pdHM6IDUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IHRoaXMudGFibGVOYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZHluYW1vREJDbGllbnQuY3JlYXRlVGFibGUoY3JlYXRlVGFibGVQYXJhbXMsIChjcmVhdGVUYWJsZUVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjcmVhdGVUYWJsZUVyciAmJiBjcmVhdGVUYWJsZUVyci5jb2RlICE9PSAnUmVzb3VyY2VJblVzZUV4Y2VwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgYXNrX3Nka19jb3JlXzEuY3JlYXRlQXNrU2RrRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBgQ291bGQgbm90IGNyZWF0ZSB0YWJsZSAoJHt0aGlzLnRhYmxlTmFtZX0pOiAke2NyZWF0ZVRhYmxlRXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHBlcnNpc3RlbmNlIGF0dHJpYnV0ZXMgZnJvbSBBV1MgRHluYW1vREIuXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0RW52ZWxvcGV9IHJlcXVlc3RFbnZlbG9wZSBSZXF1ZXN0IGVudmVsb3BlIHVzZWQgdG8gZ2VuZXJhdGUgcGFydGl0aW9uIGtleS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3QuPHN0cmluZywgYW55Pj59XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QXR0cmlidXRlcyhyZXF1ZXN0RW52ZWxvcGUpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlc0lkID0gdGhpcy5wYXJ0aXRpb25LZXlHZW5lcmF0b3IocmVxdWVzdEVudmVsb3BlKTtcbiAgICAgICAgY29uc3QgZ2V0UGFyYW1zID0ge1xuICAgICAgICAgICAgS2V5OiB7XG4gICAgICAgICAgICAgICAgW3RoaXMucGFydGl0aW9uS2V5TmFtZV06IGF0dHJpYnV0ZXNJZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBUYWJsZU5hbWU6IHRoaXMudGFibGVOYW1lLFxuICAgICAgICAgICAgQ29uc2lzdGVudFJlYWQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIGxldCBkYXRhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGF0YSA9IGF3YWl0IHRoaXMuZHluYW1vREJEb2N1bWVudENsaWVudC5nZXQoZ2V0UGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgYXNrX3Nka19jb3JlXzEuY3JlYXRlQXNrU2RrRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBgQ291bGQgbm90IHJlYWQgaXRlbSAoJHthdHRyaWJ1dGVzSWR9KSBmcm9tIHRhYmxlICgke2dldFBhcmFtcy5UYWJsZU5hbWV9KTogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuSXRlbVt0aGlzLmF0dHJpYnV0ZXNOYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYXZlcyBwZXJzaXN0ZW5jZSBhdHRyaWJ1dGVzIHRvIEFXUyBEeW5hbW9EQi5cbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RFbnZlbG9wZX0gcmVxdWVzdEVudmVsb3BlIFJlcXVlc3QgZW52ZWxvcGUgdXNlZCB0byBnZW5lcmF0ZSBwYXJ0aXRpb24ga2V5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGFueT59IGF0dHJpYnV0ZXMgQXR0cmlidXRlcyB0byBiZSBzYXZlZCB0byBEeW5hbW9EQi5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIHNhdmVBdHRyaWJ1dGVzKHJlcXVlc3RFbnZlbG9wZSwgYXR0cmlidXRlcykge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzSWQgPSB0aGlzLnBhcnRpdGlvbktleUdlbmVyYXRvcihyZXF1ZXN0RW52ZWxvcGUpO1xuICAgICAgICBjb25zdCBwdXRQYXJhbXMgPSB7XG4gICAgICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgICAgICAgW3RoaXMucGFydGl0aW9uS2V5TmFtZV06IGF0dHJpYnV0ZXNJZCxcbiAgICAgICAgICAgICAgICBbdGhpcy5hdHRyaWJ1dGVzTmFtZV06IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVGFibGVOYW1lOiB0aGlzLnRhYmxlTmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZHluYW1vREJEb2N1bWVudENsaWVudC5wdXQocHV0UGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgYXNrX3Nka19jb3JlXzEuY3JlYXRlQXNrU2RrRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBgQ291bGQgbm90IHNhdmUgaXRlbSAoJHthdHRyaWJ1dGVzSWR9KSB0byB0YWJsZSAoJHtwdXRQYXJhbXMuVGFibGVOYW1lfSk6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIHBlcnNpc3RlbmNlIGF0dHJpYnV0ZXMgZnJvbSBBV1MgRHluYW1vREIuXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0RW52ZWxvcGV9IHJlcXVlc3RFbnZlbG9wZSBSZXF1ZXN0IGVudmVsb3BlIHVzZWQgdG8gZ2VuZXJhdGUgcGFydGl0aW9uIGtleS5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZUF0dHJpYnV0ZXMocmVxdWVzdEVudmVsb3BlKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXNJZCA9IHRoaXMucGFydGl0aW9uS2V5R2VuZXJhdG9yKHJlcXVlc3RFbnZlbG9wZSk7XG4gICAgICAgIGNvbnN0IGRlbGV0ZVBhcmFtcyA9IHtcbiAgICAgICAgICAgIEtleToge1xuICAgICAgICAgICAgICAgIFt0aGlzLnBhcnRpdGlvbktleU5hbWVdOiBhdHRyaWJ1dGVzSWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVGFibGVOYW1lOiB0aGlzLnRhYmxlTmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZHluYW1vREJEb2N1bWVudENsaWVudC5kZWxldGUoZGVsZXRlUGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgYXNrX3Nka19jb3JlXzEuY3JlYXRlQXNrU2RrRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBgQ291bGQgbm90IGRlbGV0ZSBpdGVtICgke2F0dHJpYnV0ZXNJZH0pIGZyb20gdGFibGUgKCR7ZGVsZXRlUGFyYW1zLlRhYmxlTmFtZX0pOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlciA9IER5bmFtb0RiUGVyc2lzdGVuY2VBZGFwdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHluYW1vRGJQZXJzaXN0ZW5jZUFkYXB0ZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/attributes/persistence/DynamoDbPersistenceAdapter.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/attributes/persistence/PartitionKeyGenerators.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PartitionKeyGenerators = void 0;\nconst ask_sdk_core_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/index.js\");\n/**\n * Object containing implementations of {@link PartitionKeyGenerator}.\n */\nexports.PartitionKeyGenerators = {\n    /**\n     * Gets attributes id using user id.\n     * @param {RequestEnvelope} requestEnvelope\n     * @returns {string}\n     */\n    userId(requestEnvelope) {\n        if (!(requestEnvelope\n            && requestEnvelope.context\n            && requestEnvelope.context.System\n            && requestEnvelope.context.System.user\n            && requestEnvelope.context.System.user.userId)) {\n            throw ask_sdk_core_1.createAskSdkError('PartitionKeyGenerators', 'Cannot retrieve user id from request envelope!');\n        }\n        return requestEnvelope.context.System.user.userId;\n    },\n    /**\n     * Gets attributes id using device id.\n     * @param {RequestEnvelope} requestEnvelope\n     * @returns {string}\n     */\n    deviceId(requestEnvelope) {\n        if (!(requestEnvelope\n            && requestEnvelope.context\n            && requestEnvelope.context.System\n            && requestEnvelope.context.System.device\n            && requestEnvelope.context.System.device.deviceId)) {\n            throw ask_sdk_core_1.createAskSdkError('PartitionKeyGenerators', 'Cannot retrieve device id from request envelope!');\n        }\n        return requestEnvelope.context.System.device.deviceId;\n    },\n    /**\n     * Gets attributes id using person id.\n     * Fallback to fetching attributes id using user id, if personId is not present.\n     * @param {RequestEnvelope} requestEnvelope\n     * @returns {string}\n     */\n    personId(requestEnvelope) {\n        if (requestEnvelope\n            && requestEnvelope.context\n            && requestEnvelope.context.System\n            && requestEnvelope.context.System.person\n            && requestEnvelope.context.System.person.personId) {\n            return requestEnvelope.context.System.person.personId;\n        }\n        return exports.PartitionKeyGenerators.userId(requestEnvelope);\n    },\n};\n//# sourceMappingURL=PartitionKeyGenerators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1keW5hbW9kYi1wZXJzaXN0ZW5jZS1hZGFwdGVyL2Rpc3QvYXR0cmlidXRlcy9wZXJzaXN0ZW5jZS9QYXJ0aXRpb25LZXlHZW5lcmF0b3JzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstZHluYW1vZGItcGVyc2lzdGVuY2UtYWRhcHRlci9kaXN0L2F0dHJpYnV0ZXMvcGVyc2lzdGVuY2UvUGFydGl0aW9uS2V5R2VuZXJhdG9ycy5qcz8wZmEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGFydGl0aW9uS2V5R2VuZXJhdG9ycyA9IHZvaWQgMDtcbmNvbnN0IGFza19zZGtfY29yZV8xID0gcmVxdWlyZShcImFzay1zZGstY29yZVwiKTtcbi8qKlxuICogT2JqZWN0IGNvbnRhaW5pbmcgaW1wbGVtZW50YXRpb25zIG9mIHtAbGluayBQYXJ0aXRpb25LZXlHZW5lcmF0b3J9LlxuICovXG5leHBvcnRzLlBhcnRpdGlvbktleUdlbmVyYXRvcnMgPSB7XG4gICAgLyoqXG4gICAgICogR2V0cyBhdHRyaWJ1dGVzIGlkIHVzaW5nIHVzZXIgaWQuXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0RW52ZWxvcGV9IHJlcXVlc3RFbnZlbG9wZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgdXNlcklkKHJlcXVlc3RFbnZlbG9wZSkge1xuICAgICAgICBpZiAoIShyZXF1ZXN0RW52ZWxvcGVcbiAgICAgICAgICAgICYmIHJlcXVlc3RFbnZlbG9wZS5jb250ZXh0XG4gICAgICAgICAgICAmJiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dC5TeXN0ZW1cbiAgICAgICAgICAgICYmIHJlcXVlc3RFbnZlbG9wZS5jb250ZXh0LlN5c3RlbS51c2VyXG4gICAgICAgICAgICAmJiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dC5TeXN0ZW0udXNlci51c2VySWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBhc2tfc2RrX2NvcmVfMS5jcmVhdGVBc2tTZGtFcnJvcignUGFydGl0aW9uS2V5R2VuZXJhdG9ycycsICdDYW5ub3QgcmV0cmlldmUgdXNlciBpZCBmcm9tIHJlcXVlc3QgZW52ZWxvcGUhJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcXVlc3RFbnZlbG9wZS5jb250ZXh0LlN5c3RlbS51c2VyLnVzZXJJZDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldHMgYXR0cmlidXRlcyBpZCB1c2luZyBkZXZpY2UgaWQuXG4gICAgICogQHBhcmFtIHtSZXF1ZXN0RW52ZWxvcGV9IHJlcXVlc3RFbnZlbG9wZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZGV2aWNlSWQocmVxdWVzdEVudmVsb3BlKSB7XG4gICAgICAgIGlmICghKHJlcXVlc3RFbnZlbG9wZVxuICAgICAgICAgICAgJiYgcmVxdWVzdEVudmVsb3BlLmNvbnRleHRcbiAgICAgICAgICAgICYmIHJlcXVlc3RFbnZlbG9wZS5jb250ZXh0LlN5c3RlbVxuICAgICAgICAgICAgJiYgcmVxdWVzdEVudmVsb3BlLmNvbnRleHQuU3lzdGVtLmRldmljZVxuICAgICAgICAgICAgJiYgcmVxdWVzdEVudmVsb3BlLmNvbnRleHQuU3lzdGVtLmRldmljZS5kZXZpY2VJZCkpIHtcbiAgICAgICAgICAgIHRocm93IGFza19zZGtfY29yZV8xLmNyZWF0ZUFza1Nka0Vycm9yKCdQYXJ0aXRpb25LZXlHZW5lcmF0b3JzJywgJ0Nhbm5vdCByZXRyaWV2ZSBkZXZpY2UgaWQgZnJvbSByZXF1ZXN0IGVudmVsb3BlIScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dC5TeXN0ZW0uZGV2aWNlLmRldmljZUlkO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogR2V0cyBhdHRyaWJ1dGVzIGlkIHVzaW5nIHBlcnNvbiBpZC5cbiAgICAgKiBGYWxsYmFjayB0byBmZXRjaGluZyBhdHRyaWJ1dGVzIGlkIHVzaW5nIHVzZXIgaWQsIGlmIHBlcnNvbklkIGlzIG5vdCBwcmVzZW50LlxuICAgICAqIEBwYXJhbSB7UmVxdWVzdEVudmVsb3BlfSByZXF1ZXN0RW52ZWxvcGVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHBlcnNvbklkKHJlcXVlc3RFbnZlbG9wZSkge1xuICAgICAgICBpZiAocmVxdWVzdEVudmVsb3BlXG4gICAgICAgICAgICAmJiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dFxuICAgICAgICAgICAgJiYgcmVxdWVzdEVudmVsb3BlLmNvbnRleHQuU3lzdGVtXG4gICAgICAgICAgICAmJiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dC5TeXN0ZW0ucGVyc29uXG4gICAgICAgICAgICAmJiByZXF1ZXN0RW52ZWxvcGUuY29udGV4dC5TeXN0ZW0ucGVyc29uLnBlcnNvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdEVudmVsb3BlLmNvbnRleHQuU3lzdGVtLnBlcnNvbi5wZXJzb25JZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwb3J0cy5QYXJ0aXRpb25LZXlHZW5lcmF0b3JzLnVzZXJJZChyZXF1ZXN0RW52ZWxvcGUpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFydGl0aW9uS2V5R2VuZXJhdG9ycy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/attributes/persistence/PartitionKeyGenerators.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar DynamoDbPersistenceAdapter_1 = __webpack_require__(\"./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/attributes/persistence/DynamoDbPersistenceAdapter.js\");\nObject.defineProperty(exports, \"DynamoDbPersistenceAdapter\", ({ enumerable: true, get: function () { return DynamoDbPersistenceAdapter_1.DynamoDbPersistenceAdapter; } }));\nvar PartitionKeyGenerators_1 = __webpack_require__(\"./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/attributes/persistence/PartitionKeyGenerators.js\");\nObject.defineProperty(exports, \"PartitionKeyGenerators\", ({ enumerable: true, get: function () { return PartitionKeyGenerators_1.PartitionKeyGenerators; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1keW5hbW9kYi1wZXJzaXN0ZW5jZS1hZGFwdGVyL2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1keW5hbW9kYi1wZXJzaXN0ZW5jZS1hZGFwdGVyL2Rpc3QvaW5kZXguanM/NzBiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRHluYW1vRGJQZXJzaXN0ZW5jZUFkYXB0ZXJfMSA9IHJlcXVpcmUoXCIuL2F0dHJpYnV0ZXMvcGVyc2lzdGVuY2UvRHluYW1vRGJQZXJzaXN0ZW5jZUFkYXB0ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRHluYW1vRGJQZXJzaXN0ZW5jZUFkYXB0ZXJfMS5EeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlcjsgfSB9KTtcbnZhciBQYXJ0aXRpb25LZXlHZW5lcmF0b3JzXzEgPSByZXF1aXJlKFwiLi9hdHRyaWJ1dGVzL3BlcnNpc3RlbmNlL1BhcnRpdGlvbktleUdlbmVyYXRvcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJ0aXRpb25LZXlHZW5lcmF0b3JzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQYXJ0aXRpb25LZXlHZW5lcmF0b3JzXzEuUGFydGl0aW9uS2V5R2VuZXJhdG9yczsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/index.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-model/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar services;\n(function (services) {\n    /**\n     * Class to be used as the base class for the generated service clients.\n     */\n    var BaseServiceClient = /** @class */ (function () {\n        /**\n         * Creates new instance of the BaseServiceClient\n         * @param {ApiConfiguration} apiConfiguration configuration parameter to provide dependencies to service client instance\n         */\n        function BaseServiceClient(apiConfiguration) {\n            this.requestInterceptors = [];\n            this.responseInterceptors = [];\n            this.apiConfiguration = apiConfiguration;\n        }\n        BaseServiceClient.isCodeSuccessful = function (responseCode) {\n            return responseCode >= 200 && responseCode < 300;\n        };\n        BaseServiceClient.buildUrl = function (endpoint, path, queryParameters, pathParameters) {\n            var processedEndpoint = endpoint.endsWith('/') ? endpoint.substr(0, endpoint.length - 1) : endpoint;\n            var pathWithParams = this.interpolateParams(path, pathParameters);\n            var isConstantQueryPresent = pathWithParams.includes('?');\n            var queryString = this.buildQueryString(queryParameters, isConstantQueryPresent);\n            return processedEndpoint + pathWithParams + queryString;\n        };\n        BaseServiceClient.interpolateParams = function (path, params) {\n            if (!params) {\n                return path;\n            }\n            var result = path;\n            params.forEach(function (paramValue, paramName) {\n                result = result.replace('{' + paramName + '}', encodeURIComponent(paramValue));\n            });\n            return result;\n        };\n        BaseServiceClient.buildQueryString = function (params, isQueryStart) {\n            if (!params) {\n                return '';\n            }\n            var sb = [];\n            if (isQueryStart) {\n                sb.push('&');\n            }\n            else {\n                sb.push('?');\n            }\n            params.forEach(function (obj) {\n                sb.push(encodeURIComponent(obj.key));\n                sb.push('=');\n                sb.push(encodeURIComponent(obj.value));\n                sb.push('&');\n            });\n            sb.pop();\n            return sb.join('');\n        };\n        /**\n         * Sets array of functions that is going to be executed before the request is send\n         * @param {Function} requestInterceptor request interceptor function\n         * @returns {BaseServiceClient}\n         */\n        BaseServiceClient.prototype.withRequestInterceptors = function () {\n            var requestInterceptors = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                requestInterceptors[_i] = arguments[_i];\n            }\n            for (var _a = 0, requestInterceptors_1 = requestInterceptors; _a < requestInterceptors_1.length; _a++) {\n                var interceptor = requestInterceptors_1[_a];\n                this.requestInterceptors.push(interceptor);\n            }\n            return this;\n        };\n        /**\n         * Sets array of functions that is going to be executed after the request is send\n         * @param {Function} responseInterceptor response interceptor function\n         * @returns {BaseServiceClient}\n         */\n        BaseServiceClient.prototype.withResponseInterceptors = function () {\n            var responseInterceptors = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                responseInterceptors[_i] = arguments[_i];\n            }\n            for (var _a = 0, responseInterceptors_1 = responseInterceptors; _a < responseInterceptors_1.length; _a++) {\n                var interceptor = responseInterceptors_1[_a];\n                this.responseInterceptors.push(interceptor);\n            }\n            return this;\n        };\n        /**\n         * Invocation wrapper to implement service operations in generated classes\n         * @param method HTTP method, such as 'POST', 'GET', 'DELETE', etc.\n         * @param endpoint base API url\n         * @param path the path pattern with possible placeholders for path parameters in form {paramName}\n         * @param pathParams path parameters collection\n         * @param queryParams query parameters collection\n         * @param headerParams headers collection\n         * @param bodyParam if body parameter is present it is provided here, otherwise null or undefined\n         * @param errors maps recognized status codes to messages\n         * @param nonJsonBody if the body is in JSON format\n         */\n        BaseServiceClient.prototype.invoke = function (method, endpoint, path, pathParams, queryParams, headerParams, bodyParam, errors, nonJsonBody) {\n            return __awaiter(this, void 0, void 0, function () {\n                var request, apiClient, response, _i, _a, requestInterceptor, _b, _c, responseInterceptor, err_1, body, contentType, isJson, apiResponse, err;\n                return __generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            request = {\n                                url: BaseServiceClient.buildUrl(endpoint, path, queryParams, pathParams),\n                                method: method,\n                                headers: headerParams,\n                            };\n                            if (bodyParam != null) {\n                                request.body = nonJsonBody ? bodyParam : JSON.stringify(bodyParam);\n                            }\n                            apiClient = this.apiConfiguration.apiClient;\n                            _d.label = 1;\n                        case 1:\n                            _d.trys.push([1, 11, , 12]);\n                            _i = 0, _a = this.requestInterceptors;\n                            _d.label = 2;\n                        case 2:\n                            if (!(_i < _a.length)) return [3 /*break*/, 5];\n                            requestInterceptor = _a[_i];\n                            return [4 /*yield*/, requestInterceptor(request)];\n                        case 3:\n                            _d.sent();\n                            _d.label = 4;\n                        case 4:\n                            _i++;\n                            return [3 /*break*/, 2];\n                        case 5: return [4 /*yield*/, apiClient.invoke(request)];\n                        case 6:\n                            response = _d.sent();\n                            _b = 0, _c = this.responseInterceptors;\n                            _d.label = 7;\n                        case 7:\n                            if (!(_b < _c.length)) return [3 /*break*/, 10];\n                            responseInterceptor = _c[_b];\n                            return [4 /*yield*/, responseInterceptor(response)];\n                        case 8:\n                            _d.sent();\n                            _d.label = 9;\n                        case 9:\n                            _b++;\n                            return [3 /*break*/, 7];\n                        case 10: return [3 /*break*/, 12];\n                        case 11:\n                            err_1 = _d.sent();\n                            err_1.message = \"Call to service failed: \" + err_1.message;\n                            throw err_1;\n                        case 12:\n                            try {\n                                contentType = response.headers.find(function (h) { return h.key === 'content-type'; });\n                                isJson = !contentType || contentType.value.includes('application/json');\n                                body = response.body && isJson ? JSON.parse(response.body) : response.body;\n                                // converting to undefined if empty string\n                                body = body || undefined;\n                            }\n                            catch (err) {\n                                throw new SyntaxError(\"Failed trying to parse the response body: \" + response.body);\n                            }\n                            if (BaseServiceClient.isCodeSuccessful(response.statusCode)) {\n                                apiResponse = {\n                                    headers: response.headers,\n                                    body: body,\n                                    statusCode: response.statusCode,\n                                };\n                                return [2 /*return*/, apiResponse];\n                            }\n                            err = new Error('Unknown error');\n                            err.name = 'ServiceError';\n                            err['statusCode'] = response.statusCode; // tslint:disable-line:no-string-literal\n                            err['response'] = body; // tslint:disable-line:no-string-literal\n                            if (errors && errors.has(response.statusCode)) {\n                                err.message = errors.get(response.statusCode);\n                            }\n                            throw err;\n                    }\n                });\n            });\n        };\n        return BaseServiceClient;\n    }());\n    services.BaseServiceClient = BaseServiceClient;\n    /**\n     * Class to be used to call Amazon LWA to retrieve access tokens.\n     */\n    var LwaServiceClient = /** @class */ (function (_super) {\n        __extends(LwaServiceClient, _super);\n        function LwaServiceClient(options) {\n            var _this = _super.call(this, options.apiConfiguration) || this;\n            if (options.authenticationConfiguration == null) {\n                throw new Error('AuthenticationConfiguration cannot be null or undefined.');\n            }\n            _this.grantType = options.grantType ? options.grantType : LwaServiceClient.CLIENT_CREDENTIALS_GRANT_TYPE;\n            _this.authenticationConfiguration = options.authenticationConfiguration;\n            _this.tokenStore = {};\n            return _this;\n        }\n        LwaServiceClient.prototype.getAccessTokenForScope = function (scope) {\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    if (scope == null) {\n                        throw new Error('Scope cannot be null or undefined.');\n                    }\n                    return [2 /*return*/, this.getAccessToken(scope)];\n                });\n            });\n        };\n        LwaServiceClient.prototype.getAccessToken = function (scope) {\n            return __awaiter(this, void 0, void 0, function () {\n                var cacheKey, accessToken, accessTokenRequest, accessTokenResponse;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            cacheKey = scope ? scope : LwaServiceClient.REFRESH_ACCESS_TOKEN;\n                            accessToken = this.tokenStore[cacheKey];\n                            if (accessToken && accessToken.expiry > Date.now() + LwaServiceClient.EXPIRY_OFFSET_MILLIS) {\n                                return [2 /*return*/, accessToken.token];\n                            }\n                            accessTokenRequest = {\n                                clientId: this.authenticationConfiguration.clientId,\n                                clientSecret: this.authenticationConfiguration.clientSecret,\n                            };\n                            if (scope && this.authenticationConfiguration.refreshToken) {\n                                throw new Error('Cannot support both refreshToken and scope.');\n                            }\n                            else if (scope == null && this.authenticationConfiguration.refreshToken == null) {\n                                throw new Error('Either refreshToken or scope must be specified.');\n                            }\n                            else if (scope == null) {\n                                accessTokenRequest.refreshToken = this.authenticationConfiguration.refreshToken;\n                            }\n                            else {\n                                accessTokenRequest.scope = scope;\n                            }\n                            return [4 /*yield*/, this.generateAccessToken(accessTokenRequest)];\n                        case 1:\n                            accessTokenResponse = _a.sent();\n                            this.tokenStore[cacheKey] = {\n                                token: accessTokenResponse.access_token,\n                                expiry: Date.now() + accessTokenResponse.expires_in * 1000,\n                            };\n                            return [2 /*return*/, accessTokenResponse.access_token];\n                    }\n                });\n            });\n        };\n        LwaServiceClient.prototype.generateAccessToken = function (accessTokenRequest) {\n            return __awaiter(this, void 0, void 0, function () {\n                var authEndpoint, queryParams, headerParams, pathParams, paramInfo, bodyParams, errorDefinitions, apiResponse;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            authEndpoint = this.authenticationConfiguration.authEndpoint || LwaServiceClient.AUTH_ENDPOINT;\n                            if (accessTokenRequest == null) {\n                                throw new Error(\"Required parameter accessTokenRequest was null or undefined when calling generateAccessToken.\");\n                            }\n                            queryParams = [];\n                            headerParams = [];\n                            headerParams.push({ key: 'Content-type', value: 'application/x-www-form-urlencoded' });\n                            pathParams = new Map();\n                            paramInfo = this.grantType === LwaServiceClient.LWA_CREDENTIALS_GRANT_TYPE ? \"&refresh_token=\" + accessTokenRequest.refreshToken : \"&scope=\" + accessTokenRequest.scope;\n                            bodyParams = \"grant_type=\" + this.grantType + \"&client_secret=\" + accessTokenRequest.clientSecret + \"&client_id=\" + accessTokenRequest.clientId + paramInfo;\n                            errorDefinitions = new Map();\n                            errorDefinitions.set(200, 'Token request sent.');\n                            errorDefinitions.set(400, 'Bad Request');\n                            errorDefinitions.set(401, 'Authentication Failed');\n                            errorDefinitions.set(500, 'Internal Server Error');\n                            return [4 /*yield*/, this.invoke('POST', authEndpoint, '/auth/O2/token', pathParams, queryParams, headerParams, bodyParams, errorDefinitions, true)];\n                        case 1:\n                            apiResponse = _a.sent();\n                            return [2 /*return*/, apiResponse.body];\n                    }\n                });\n            });\n        };\n        LwaServiceClient.EXPIRY_OFFSET_MILLIS = 60000;\n        LwaServiceClient.REFRESH_ACCESS_TOKEN = 'refresh_access_token';\n        LwaServiceClient.CLIENT_CREDENTIALS_GRANT_TYPE = 'client_credentials';\n        LwaServiceClient.LWA_CREDENTIALS_GRANT_TYPE = 'refresh_token';\n        LwaServiceClient.AUTH_ENDPOINT = 'https://api.amazon.com';\n        return LwaServiceClient;\n    }(BaseServiceClient));\n    services.LwaServiceClient = LwaServiceClient;\n})(services = exports.services || (exports.services = {}));\n/**\n * function creating an AskSdk user agent.\n * @param packageVersion\n * @param customUserAgent\n */\nfunction createUserAgent(packageVersion, customUserAgent) {\n    var customUserAgentString = customUserAgent ? (' ' + customUserAgent) : '';\n    return \"ask-node-model/\" + packageVersion + \" Node/\" + process.version + customUserAgentString;\n}\nexports.createUserAgent = createUserAgent;\n(function (services) {\n    var datastore;\n    (function (datastore) {\n        /**\n         *\n        */\n        var DatastoreServiceClient = /** @class */ (function (_super) {\n            __extends(DatastoreServiceClient, _super);\n            function DatastoreServiceClient(apiConfiguration, authenticationConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.lwaServiceClient = new services.LwaServiceClient({\n                    apiConfiguration: apiConfiguration,\n                    authenticationConfiguration: authenticationConfiguration,\n                });\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Send DataStore commands to Alexa device.\n             * @param {string} authorization\n             * @param {services.datastore.v1.CommandsRequest} commandsRequest\n             */\n            DatastoreServiceClient.prototype.callCommandsV1 = function (authorization, commandsRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, accessToken, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                __operationId__ = 'callCommandsV1';\n                                // verify required parameter 'authorization' is not null or undefined\n                                if (authorization == null) {\n                                    throw new Error(\"Required parameter authorization was null or undefined when calling \" + __operationId__ + \".\");\n                                }\n                                // verify required parameter 'commandsRequest' is not null or undefined\n                                if (commandsRequest == null) {\n                                    throw new Error(\"Required parameter commandsRequest was null or undefined when calling \" + __operationId__ + \".\");\n                                }\n                                queryParams = [];\n                                headerParams = [];\n                                headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                                headerParams.push({ key: 'Authorization', value: authorization });\n                                if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                                    headerParams.push({ key: 'Content-type', value: 'application/json' });\n                                }\n                                pathParams = new Map();\n                                return [4 /*yield*/, this.lwaServiceClient.getAccessTokenForScope(\"alexa::datastore\")];\n                            case 1:\n                                accessToken = _a.sent();\n                                authorizationValue = \"Bearer \" + accessToken;\n                                headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                                resourcePath = \"/v1/datastore/commands\";\n                                errorDefinitions = new Map();\n                                errorDefinitions.set(200, \"Multiple CommandsDispatchResults in response.\");\n                                errorDefinitions.set(400, \"Request validation fails.\");\n                                errorDefinitions.set(401, \"Not Authorized.\");\n                                errorDefinitions.set(403, \"The skill is not allowed to execute commands.\");\n                                errorDefinitions.set(429, \"The client has made more calls than the allowed limit.\");\n                                errorDefinitions.set(0, \"Unexpected error.\");\n                                return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, commandsRequest, errorDefinitions)];\n                        }\n                    });\n                });\n            };\n            /**\n             * Send DataStore commands to Alexa device.\n             * @param {string} authorization\n             * @param {services.datastore.v1.CommandsRequest} commandsRequest\n             */\n            DatastoreServiceClient.prototype.commandsV1 = function (authorization, commandsRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callCommandsV1(authorization, commandsRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Query statuses of deliveries to offline devices returned by commands API.\n             * @param {string} authorization\n             * @param {string} queuedResultId A unique identifier to query result for queued delivery for offline devices (DEVICE_UNAVAILABLE).\n             * @param {number} maxResults Maximum number of CommandsDispatchResult items to return.\n             * @param {string} nextToken The value of nextToken in the response to fetch next page. If not specified, the request fetches result for the first page.\n             */\n            DatastoreServiceClient.prototype.callQueuedResultV1 = function (authorization, queuedResultId, maxResults, nextToken) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, maxResultsValues, nextTokenValues, headerParams, pathParams, accessToken, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                __operationId__ = 'callQueuedResultV1';\n                                // verify required parameter 'authorization' is not null or undefined\n                                if (authorization == null) {\n                                    throw new Error(\"Required parameter authorization was null or undefined when calling \" + __operationId__ + \".\");\n                                }\n                                // verify required parameter 'queuedResultId' is not null or undefined\n                                if (queuedResultId == null) {\n                                    throw new Error(\"Required parameter queuedResultId was null or undefined when calling \" + __operationId__ + \".\");\n                                }\n                                queryParams = [];\n                                if (maxResults != null) {\n                                    maxResultsValues = Array.isArray(maxResults) ? maxResults : [maxResults];\n                                    maxResultsValues.forEach(function (val) { return queryParams.push({ key: 'maxResults', value: val.toString() }); });\n                                }\n                                if (nextToken != null) {\n                                    nextTokenValues = Array.isArray(nextToken) ? nextToken : [nextToken];\n                                    nextTokenValues.forEach(function (val) { return queryParams.push({ key: 'nextToken', value: val }); });\n                                }\n                                headerParams = [];\n                                headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                                headerParams.push({ key: 'Authorization', value: authorization });\n                                pathParams = new Map();\n                                pathParams.set('queuedResultId', queuedResultId);\n                                return [4 /*yield*/, this.lwaServiceClient.getAccessTokenForScope(\"alexa::datastore\")];\n                            case 1:\n                                accessToken = _a.sent();\n                                authorizationValue = \"Bearer \" + accessToken;\n                                headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                                resourcePath = \"/v1/datastore/queue/{queuedResultId}\";\n                                errorDefinitions = new Map();\n                                errorDefinitions.set(200, \"Unordered array of CommandsDispatchResult and pagination details.\");\n                                errorDefinitions.set(400, \"Request validation fails.\");\n                                errorDefinitions.set(401, \"Not Authorized.\");\n                                errorDefinitions.set(403, \"The skill is not allowed to call this API commands.\");\n                                errorDefinitions.set(429, \"The client has made more calls than the allowed limit.\");\n                                errorDefinitions.set(0, \"Unexpected error.\");\n                                return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                        }\n                    });\n                });\n            };\n            /**\n             * Query statuses of deliveries to offline devices returned by commands API.\n             * @param {string} authorization\n             * @param {string} queuedResultId A unique identifier to query result for queued delivery for offline devices (DEVICE_UNAVAILABLE).\n             * @param {number} maxResults Maximum number of CommandsDispatchResult items to return.\n             * @param {string} nextToken The value of nextToken in the response to fetch next page. If not specified, the request fetches result for the first page.\n             */\n            DatastoreServiceClient.prototype.queuedResultV1 = function (authorization, queuedResultId, maxResults, nextToken) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callQueuedResultV1(authorization, queuedResultId, maxResults, nextToken)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return DatastoreServiceClient;\n        }(services.BaseServiceClient));\n        datastore.DatastoreServiceClient = DatastoreServiceClient;\n    })(datastore = services.datastore || (services.datastore = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var deviceAddress;\n    (function (deviceAddress) {\n        /**\n         *\n        */\n        var DeviceAddressServiceClient = /** @class */ (function (_super) {\n            __extends(DeviceAddressServiceClient, _super);\n            function DeviceAddressServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Gets the country and postal code of a device\n             * @param {string} deviceId The device Id for which to get the country and postal code\n             */\n            DeviceAddressServiceClient.prototype.callGetCountryAndPostalCode = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetCountryAndPostalCode';\n                        // verify required parameter 'deviceId' is not null or undefined\n                        if (deviceId == null) {\n                            throw new Error(\"Required parameter deviceId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('deviceId', deviceId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/devices/{deviceId}/settings/address/countryAndPostalCode\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully get the country and postal code of the deviceId\");\n                        errorDefinitions.set(204, \"No content could be queried out\");\n                        errorDefinitions.set(403, \"The authentication token is invalid or doesn&#39;t have access to the resource\");\n                        errorDefinitions.set(405, \"The method is not supported\");\n                        errorDefinitions.set(429, \"The request is throttled\");\n                        errorDefinitions.set(0, \"Unexpected error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the country and postal code of a device\n             * @param {string} deviceId The device Id for which to get the country and postal code\n             */\n            DeviceAddressServiceClient.prototype.getCountryAndPostalCode = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetCountryAndPostalCode(deviceId)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the address of a device\n             * @param {string} deviceId The device Id for which to get the address\n             */\n            DeviceAddressServiceClient.prototype.callGetFullAddress = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetFullAddress';\n                        // verify required parameter 'deviceId' is not null or undefined\n                        if (deviceId == null) {\n                            throw new Error(\"Required parameter deviceId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('deviceId', deviceId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/devices/{deviceId}/settings/address\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully get the address of the device\");\n                        errorDefinitions.set(204, \"No content could be queried out\");\n                        errorDefinitions.set(403, \"The authentication token is invalid or doesn&#39;t have access to the resource\");\n                        errorDefinitions.set(405, \"The method is not supported\");\n                        errorDefinitions.set(429, \"The request is throttled\");\n                        errorDefinitions.set(0, \"Unexpected error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the address of a device\n             * @param {string} deviceId The device Id for which to get the address\n             */\n            DeviceAddressServiceClient.prototype.getFullAddress = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetFullAddress(deviceId)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return DeviceAddressServiceClient;\n        }(services.BaseServiceClient));\n        deviceAddress.DeviceAddressServiceClient = DeviceAddressServiceClient;\n    })(deviceAddress = services.deviceAddress || (services.deviceAddress = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var directive;\n    (function (directive) {\n        /**\n         *\n        */\n        var DirectiveServiceClient = /** @class */ (function (_super) {\n            __extends(DirectiveServiceClient, _super);\n            function DirectiveServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Send directives to Alexa.\n             * @param {services.directive.SendDirectiveRequest} sendDirectiveRequest Represents the request object to send in the payload.\n             */\n            DirectiveServiceClient.prototype.callEnqueue = function (sendDirectiveRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callEnqueue';\n                        // verify required parameter 'sendDirectiveRequest' is not null or undefined\n                        if (sendDirectiveRequest == null) {\n                            throw new Error(\"Required parameter sendDirectiveRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/directives\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(204, \"Directive sent successfully.\");\n                        errorDefinitions.set(400, \"Directive not valid.\");\n                        errorDefinitions.set(401, \"Not Authorized.\");\n                        errorDefinitions.set(403, \"The skill is not allowed to send directives at the moment.\");\n                        errorDefinitions.set(0, \"Unexpected error.\");\n                        return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, sendDirectiveRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Send directives to Alexa.\n             * @param {services.directive.SendDirectiveRequest} sendDirectiveRequest Represents the request object to send in the payload.\n             */\n            DirectiveServiceClient.prototype.enqueue = function (sendDirectiveRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callEnqueue(sendDirectiveRequest)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            return DirectiveServiceClient;\n        }(services.BaseServiceClient));\n        directive.DirectiveServiceClient = DirectiveServiceClient;\n    })(directive = services.directive || (services.directive = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var endpointEnumeration;\n    (function (endpointEnumeration) {\n        /**\n         *\n        */\n        var EndpointEnumerationServiceClient = /** @class */ (function (_super) {\n            __extends(EndpointEnumerationServiceClient, _super);\n            function EndpointEnumerationServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * This API is invoked by the skill to retrieve endpoints connected to the Echo device.\n             */\n            EndpointEnumerationServiceClient.prototype.callGetEndpoints = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetEndpoints';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/endpoints\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the list of connected endpoints.\");\n                        errorDefinitions.set(400, \"Bad request. Returned when a required parameter is not present or badly formatted.\");\n                        errorDefinitions.set(401, \"Unauthenticated. Returned when the request is not authenticated.\");\n                        errorDefinitions.set(403, \"Forbidden. Returned when the request is authenticated but does not have sufficient permission.\");\n                        errorDefinitions.set(500, \"Server Error. Returned when the server encountered an error processing the request.\");\n                        errorDefinitions.set(503, \"Service Unavailable. Returned when the server is not ready to handle the request.\");\n                        errorDefinitions.set(0, \"Unexpected error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to retrieve endpoints connected to the Echo device.\n             */\n            EndpointEnumerationServiceClient.prototype.getEndpoints = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetEndpoints()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return EndpointEnumerationServiceClient;\n        }(services.BaseServiceClient));\n        endpointEnumeration.EndpointEnumerationServiceClient = EndpointEnumerationServiceClient;\n    })(endpointEnumeration = services.endpointEnumeration || (services.endpointEnumeration = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var listManagement;\n    (function (listManagement) {\n        /**\n         *\n        */\n        var ListManagementServiceClient = /** @class */ (function (_super) {\n            __extends(ListManagementServiceClient, _super);\n            function ListManagementServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Retrieves the metadata for all customer lists, including the customer’s default lists.\n             */\n            ListManagementServiceClient.prototype.callGetListsMetadata = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetListsMetadata';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Retrieves the metadata for all customer lists, including the customer’s default lists.\n             */\n            ListManagementServiceClient.prototype.getListsMetadata = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetListsMetadata()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API deletes a customer custom list.\n             * @param {string} listId Value of the customer’s listId retrieved from a getListsMetadata call\n             */\n            ListManagementServiceClient.prototype.callDeleteList = function (listId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callDeleteList';\n                        // verify required parameter 'listId' is not null or undefined\n                        if (listId == null) {\n                            throw new Error(\"Required parameter listId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('listId', listId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists/{listId}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(404, \"Not Found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"DELETE\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API deletes a customer custom list.\n             * @param {string} listId Value of the customer’s listId retrieved from a getListsMetadata call\n             */\n            ListManagementServiceClient.prototype.deleteList = function (listId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callDeleteList(listId)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API deletes an item in the specified list.\n             * @param {string} listId The customer’s listId is retrieved from a getListsMetadata call.\n             * @param {string} itemId The customer’s itemId is retrieved from a GetList call.\n             */\n            ListManagementServiceClient.prototype.callDeleteListItem = function (listId, itemId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callDeleteListItem';\n                        // verify required parameter 'listId' is not null or undefined\n                        if (listId == null) {\n                            throw new Error(\"Required parameter listId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'itemId' is not null or undefined\n                        if (itemId == null) {\n                            throw new Error(\"Required parameter itemId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('listId', listId);\n                        pathParams.set('itemId', itemId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists/{listId}/items/{itemId}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(404, \"Not Found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"DELETE\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API deletes an item in the specified list.\n             * @param {string} listId The customer’s listId is retrieved from a getListsMetadata call.\n             * @param {string} itemId The customer’s itemId is retrieved from a GetList call.\n             */\n            ListManagementServiceClient.prototype.deleteListItem = function (listId, itemId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callDeleteListItem(listId, itemId)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API can be used to retrieve single item with in any list by listId and itemId. This API can read list items from an archived list. Attempting to read list items from a deleted list return an ObjectNotFound 404 error.\n             * @param {string} listId Retrieved from a call to getListsMetadata\n             * @param {string} itemId itemId within a list is retrieved from a getList call\n             */\n            ListManagementServiceClient.prototype.callGetListItem = function (listId, itemId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetListItem';\n                        // verify required parameter 'listId' is not null or undefined\n                        if (listId == null) {\n                            throw new Error(\"Required parameter listId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'itemId' is not null or undefined\n                        if (itemId == null) {\n                            throw new Error(\"Required parameter itemId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('listId', listId);\n                        pathParams.set('itemId', itemId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists/{listId}/items/{itemId}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(404, \"Not Found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API can be used to retrieve single item with in any list by listId and itemId. This API can read list items from an archived list. Attempting to read list items from a deleted list return an ObjectNotFound 404 error.\n             * @param {string} listId Retrieved from a call to getListsMetadata\n             * @param {string} itemId itemId within a list is retrieved from a getList call\n             */\n            ListManagementServiceClient.prototype.getListItem = function (listId, itemId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetListItem(listId, itemId)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * API used to update an item value or item status.\n             * @param {string} listId Customer’s listId\n             * @param {string} itemId itemId to be updated in the list\n             * @param {services.listManagement.UpdateListItemRequest} updateListItemRequest\n             */\n            ListManagementServiceClient.prototype.callUpdateListItem = function (listId, itemId, updateListItemRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callUpdateListItem';\n                        // verify required parameter 'listId' is not null or undefined\n                        if (listId == null) {\n                            throw new Error(\"Required parameter listId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'itemId' is not null or undefined\n                        if (itemId == null) {\n                            throw new Error(\"Required parameter itemId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'updateListItemRequest' is not null or undefined\n                        if (updateListItemRequest == null) {\n                            throw new Error(\"Required parameter updateListItemRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        pathParams.set('listId', listId);\n                        pathParams.set('itemId', itemId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists/{listId}/items/{itemId}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(404, \"Not Found\");\n                        errorDefinitions.set(409, \"Conflict\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"PUT\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, updateListItemRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * API used to update an item value or item status.\n             * @param {string} listId Customer’s listId\n             * @param {string} itemId itemId to be updated in the list\n             * @param {services.listManagement.UpdateListItemRequest} updateListItemRequest\n             */\n            ListManagementServiceClient.prototype.updateListItem = function (listId, itemId, updateListItemRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callUpdateListItem(listId, itemId, updateListItemRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API creates an item in an active list or in a default list.\n             * @param {string} listId The customer’s listId retrieved from a getListsMetadata call.\n             * @param {services.listManagement.CreateListItemRequest} createListItemRequest\n             */\n            ListManagementServiceClient.prototype.callCreateListItem = function (listId, createListItemRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callCreateListItem';\n                        // verify required parameter 'listId' is not null or undefined\n                        if (listId == null) {\n                            throw new Error(\"Required parameter listId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'createListItemRequest' is not null or undefined\n                        if (createListItemRequest == null) {\n                            throw new Error(\"Required parameter createListItemRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        pathParams.set('listId', listId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists/{listId}/items\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(201, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(404, \"Not found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"POST\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, createListItemRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API creates an item in an active list or in a default list.\n             * @param {string} listId The customer’s listId retrieved from a getListsMetadata call.\n             * @param {services.listManagement.CreateListItemRequest} createListItemRequest\n             */\n            ListManagementServiceClient.prototype.createListItem = function (listId, createListItemRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callCreateListItem(listId, createListItemRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API updates a custom list. Only the list name or state can be updated. An Alexa customer can turn an archived list into an active one.\n             * @param {string} listId Value of the customer’s listId retrieved from a getListsMetadata call.\n             * @param {services.listManagement.UpdateListRequest} updateListRequest\n             */\n            ListManagementServiceClient.prototype.callUpdateList = function (listId, updateListRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callUpdateList';\n                        // verify required parameter 'listId' is not null or undefined\n                        if (listId == null) {\n                            throw new Error(\"Required parameter listId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'updateListRequest' is not null or undefined\n                        if (updateListRequest == null) {\n                            throw new Error(\"Required parameter updateListRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        pathParams.set('listId', listId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists/{listId}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(404, \"List not found\");\n                        errorDefinitions.set(409, \"Conflict\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"PUT\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, updateListRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API updates a custom list. Only the list name or state can be updated. An Alexa customer can turn an archived list into an active one.\n             * @param {string} listId Value of the customer’s listId retrieved from a getListsMetadata call.\n             * @param {services.listManagement.UpdateListRequest} updateListRequest\n             */\n            ListManagementServiceClient.prototype.updateList = function (listId, updateListRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callUpdateList(listId, updateListRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Retrieves the list metadata including the items in the list with requested status.\n             * @param {string} listId Retrieved from a call to GetListsMetadata to specify the listId in the request path.\n             * @param {string} status Specify the status of the list.\n             */\n            ListManagementServiceClient.prototype.callGetList = function (listId, status) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetList';\n                        // verify required parameter 'listId' is not null or undefined\n                        if (listId == null) {\n                            throw new Error(\"Required parameter listId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'status' is not null or undefined\n                        if (status == null) {\n                            throw new Error(\"Required parameter status was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('listId', listId);\n                        pathParams.set('status', status);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists/{listId}/{status}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(404, \"Not Found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Retrieves the list metadata including the items in the list with requested status.\n             * @param {string} listId Retrieved from a call to GetListsMetadata to specify the listId in the request path.\n             * @param {string} status Specify the status of the list.\n             */\n            ListManagementServiceClient.prototype.getList = function (listId, status) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetList(listId, status)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API creates a custom list. The new list name must be different than any existing list name.\n             * @param {services.listManagement.CreateListRequest} createListRequest\n             */\n            ListManagementServiceClient.prototype.callCreateList = function (createListRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callCreateList';\n                        // verify required parameter 'createListRequest' is not null or undefined\n                        if (createListRequest == null) {\n                            throw new Error(\"Required parameter createListRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/householdlists\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(201, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(409, \"Conflict\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(0, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"POST\", \"https://api.amazonalexa.com/\", resourcePath, pathParams, queryParams, headerParams, createListRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API creates a custom list. The new list name must be different than any existing list name.\n             * @param {services.listManagement.CreateListRequest} createListRequest\n             */\n            ListManagementServiceClient.prototype.createList = function (createListRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callCreateList(createListRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return ListManagementServiceClient;\n        }(services.BaseServiceClient));\n        listManagement.ListManagementServiceClient = ListManagementServiceClient;\n    })(listManagement = services.listManagement || (services.listManagement = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var monetization;\n    (function (monetization) {\n        /**\n         *\n        */\n        var MonetizationServiceClient = /** @class */ (function (_super) {\n            __extends(MonetizationServiceClient, _super);\n            function MonetizationServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Gets In-Skill Products based on user's context for the Skill.\n             * @param {string} acceptLanguage User&#39;s locale/language in context\n             * @param {string} purchasable Filter products based on whether they are purchasable by the user or not. * &#39;PURCHASABLE&#39; - Products that are purchasable by the user. * &#39;NOT_PURCHASABLE&#39; - Products that are not purchasable by the user.\n             * @param {string} entitled Filter products based on whether they are entitled to the user or not. * &#39;ENTITLED&#39; - Products that the user is entitled to. * &#39;NOT_ENTITLED&#39; - Products that the user is not entitled to.\n             * @param {string} productType Product type. * &#39;SUBSCRIPTION&#39; - Once purchased, customers will own the content for the subscription period. * &#39;ENTITLEMENT&#39; - Once purchased, customers will own the content forever. * &#39;CONSUMABLE&#39; - Once purchased, customers will be entitled to the content until it is consumed. It can also be re-purchased.\n             * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element, the value of which can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that In-Skill Products API understands. Token has expiry of 24 hours.\n             * @param {number} maxResults sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 100 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned because maxResults was exceeded, the response contains isTruncated &#x3D; true.\n             */\n            MonetizationServiceClient.prototype.callGetInSkillProducts = function (acceptLanguage, purchasable, entitled, productType, nextToken, maxResults) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, purchasableValues, entitledValues, productTypeValues, nextTokenValues, maxResultsValues, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetInSkillProducts';\n                        // verify required parameter 'acceptLanguage' is not null or undefined\n                        if (acceptLanguage == null) {\n                            throw new Error(\"Required parameter acceptLanguage was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        if (purchasable != null) {\n                            purchasableValues = Array.isArray(purchasable) ? purchasable : [purchasable];\n                            purchasableValues.forEach(function (val) { return queryParams.push({ key: 'purchasable', value: val }); });\n                        }\n                        if (entitled != null) {\n                            entitledValues = Array.isArray(entitled) ? entitled : [entitled];\n                            entitledValues.forEach(function (val) { return queryParams.push({ key: 'entitled', value: val }); });\n                        }\n                        if (productType != null) {\n                            productTypeValues = Array.isArray(productType) ? productType : [productType];\n                            productTypeValues.forEach(function (val) { return queryParams.push({ key: 'productType', value: val }); });\n                        }\n                        if (nextToken != null) {\n                            nextTokenValues = Array.isArray(nextToken) ? nextToken : [nextToken];\n                            nextTokenValues.forEach(function (val) { return queryParams.push({ key: 'nextToken', value: val }); });\n                        }\n                        if (maxResults != null) {\n                            maxResultsValues = Array.isArray(maxResults) ? maxResults : [maxResults];\n                            maxResultsValues.forEach(function (val) { return queryParams.push({ key: 'maxResults', value: val.toString() }); });\n                        }\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        headerParams.push({ key: 'Accept-Language', value: acceptLanguage });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/users/~current/skills/~current/inSkillProducts\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Returns a list of In-Skill products on success.\");\n                        errorDefinitions.set(400, \"Invalid request\");\n                        errorDefinitions.set(401, \"The authentication token is invalid or doesn&#39;t have access to make this request\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets In-Skill Products based on user's context for the Skill.\n             * @param {string} acceptLanguage User&#39;s locale/language in context\n             * @param {string} purchasable Filter products based on whether they are purchasable by the user or not. * &#39;PURCHASABLE&#39; - Products that are purchasable by the user. * &#39;NOT_PURCHASABLE&#39; - Products that are not purchasable by the user.\n             * @param {string} entitled Filter products based on whether they are entitled to the user or not. * &#39;ENTITLED&#39; - Products that the user is entitled to. * &#39;NOT_ENTITLED&#39; - Products that the user is not entitled to.\n             * @param {string} productType Product type. * &#39;SUBSCRIPTION&#39; - Once purchased, customers will own the content for the subscription period. * &#39;ENTITLEMENT&#39; - Once purchased, customers will own the content forever. * &#39;CONSUMABLE&#39; - Once purchased, customers will be entitled to the content until it is consumed. It can also be re-purchased.\n             * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element, the value of which can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that In-Skill Products API understands. Token has expiry of 24 hours.\n             * @param {number} maxResults sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 100 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned because maxResults was exceeded, the response contains isTruncated &#x3D; true.\n             */\n            MonetizationServiceClient.prototype.getInSkillProducts = function (acceptLanguage, purchasable, entitled, productType, nextToken, maxResults) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetInSkillProducts(acceptLanguage, purchasable, entitled, productType, nextToken, maxResults)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Get In-Skill Product information based on user context for the Skill.\n             * @param {string} acceptLanguage User&#39;s locale/language in context\n             * @param {string} productId Product Id.\n             */\n            MonetizationServiceClient.prototype.callGetInSkillProduct = function (acceptLanguage, productId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetInSkillProduct';\n                        // verify required parameter 'acceptLanguage' is not null or undefined\n                        if (acceptLanguage == null) {\n                            throw new Error(\"Required parameter acceptLanguage was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'productId' is not null or undefined\n                        if (productId == null) {\n                            throw new Error(\"Required parameter productId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        headerParams.push({ key: 'Accept-Language', value: acceptLanguage });\n                        pathParams = new Map();\n                        pathParams.set('productId', productId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/users/~current/skills/~current/inSkillProducts/{productId}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Returns an In-Skill Product on success.\");\n                        errorDefinitions.set(400, \"Invalid request.\");\n                        errorDefinitions.set(401, \"The authentication token is invalid or doesn&#39;t have access to make this request\");\n                        errorDefinitions.set(404, \"Requested resource not found.\");\n                        errorDefinitions.set(500, \"Internal Server Error.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Get In-Skill Product information based on user context for the Skill.\n             * @param {string} acceptLanguage User&#39;s locale/language in context\n             * @param {string} productId Product Id.\n             */\n            MonetizationServiceClient.prototype.getInSkillProduct = function (acceptLanguage, productId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetInSkillProduct(acceptLanguage, productId)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Returns transactions of all in skill products purchases of the customer\n             * @param {string} acceptLanguage User&#39;s locale/language in context\n             * @param {string} productId Product Id.\n             * @param {string} status Transaction status for in skill product purchases. * &#39;PENDING_APPROVAL_BY_PARENT&#39; - The transaction is pending approval from parent. * &#39;APPROVED_BY_PARENT&#39; - The transaction was approved by parent and fulfilled successfully.. * &#39;DENIED_BY_PARENT&#39; - The transaction was declined by parent and hence not fulfilled. * &#39;EXPIRED_NO_ACTION_BY_PARENT&#39; - The transaction was expired due to no response from parent and hence not fulfilled. * &#39;ERROR&#39; - The transaction was not fullfiled as there was an error while processing the transaction.\n             * @param {string} fromLastModifiedTime Filter transactions based on last modified time stamp, FROM duration in format (UTC ISO 8601) i.e. yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\n             * @param {string} toLastModifiedTime Filter transactions based on last modified time stamp, TO duration in format (UTC ISO 8601) i.e. yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\n             * @param {string} nextToken When response to this API call is truncated, the response also includes the nextToken in metadata, the value of which can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that In-Skill Products API understands. Token has expiry of 24 hours.\n             * @param {number} maxResults sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 100 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned because maxResults was exceeded, the response contains nextToken which can be used to fetch next set of result.\n             */\n            MonetizationServiceClient.prototype.callGetInSkillProductsTransactions = function (acceptLanguage, productId, status, fromLastModifiedTime, toLastModifiedTime, nextToken, maxResults) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, productIdValues, statusValues, fromLastModifiedTimeValues, toLastModifiedTimeValues, nextTokenValues, maxResultsValues, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetInSkillProductsTransactions';\n                        // verify required parameter 'acceptLanguage' is not null or undefined\n                        if (acceptLanguage == null) {\n                            throw new Error(\"Required parameter acceptLanguage was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        if (productId != null) {\n                            productIdValues = Array.isArray(productId) ? productId : [productId];\n                            productIdValues.forEach(function (val) { return queryParams.push({ key: 'productId', value: val }); });\n                        }\n                        if (status != null) {\n                            statusValues = Array.isArray(status) ? status : [status];\n                            statusValues.forEach(function (val) { return queryParams.push({ key: 'status', value: val }); });\n                        }\n                        if (fromLastModifiedTime != null) {\n                            fromLastModifiedTimeValues = Array.isArray(fromLastModifiedTime) ? fromLastModifiedTime : [fromLastModifiedTime];\n                            fromLastModifiedTimeValues.forEach(function (val) { return queryParams.push({ key: 'fromLastModifiedTime', value: val.toString() }); });\n                        }\n                        if (toLastModifiedTime != null) {\n                            toLastModifiedTimeValues = Array.isArray(toLastModifiedTime) ? toLastModifiedTime : [toLastModifiedTime];\n                            toLastModifiedTimeValues.forEach(function (val) { return queryParams.push({ key: 'toLastModifiedTime', value: val.toString() }); });\n                        }\n                        if (nextToken != null) {\n                            nextTokenValues = Array.isArray(nextToken) ? nextToken : [nextToken];\n                            nextTokenValues.forEach(function (val) { return queryParams.push({ key: 'nextToken', value: val }); });\n                        }\n                        if (maxResults != null) {\n                            maxResultsValues = Array.isArray(maxResults) ? maxResults : [maxResults];\n                            maxResultsValues.forEach(function (val) { return queryParams.push({ key: 'maxResults', value: val.toString() }); });\n                        }\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        headerParams.push({ key: 'Accept-Language', value: acceptLanguage });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/users/~current/skills/~current/inSkillProductsTransactions\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Returns a list of transactions of all in skill products purchases in last 30 days on success.\");\n                        errorDefinitions.set(400, \"Invalid request\");\n                        errorDefinitions.set(401, \"The authentication token is invalid or doesn&#39;t have access to make this request\");\n                        errorDefinitions.set(403, \"Forbidden request\");\n                        errorDefinitions.set(404, \"Product id doesn&#39;t exist / invalid / not found.\");\n                        errorDefinitions.set(412, \"Non-Child Directed Skill is not supported.\");\n                        errorDefinitions.set(429, \"The request is throttled.\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Returns transactions of all in skill products purchases of the customer\n             * @param {string} acceptLanguage User&#39;s locale/language in context\n             * @param {string} productId Product Id.\n             * @param {string} status Transaction status for in skill product purchases. * &#39;PENDING_APPROVAL_BY_PARENT&#39; - The transaction is pending approval from parent. * &#39;APPROVED_BY_PARENT&#39; - The transaction was approved by parent and fulfilled successfully.. * &#39;DENIED_BY_PARENT&#39; - The transaction was declined by parent and hence not fulfilled. * &#39;EXPIRED_NO_ACTION_BY_PARENT&#39; - The transaction was expired due to no response from parent and hence not fulfilled. * &#39;ERROR&#39; - The transaction was not fullfiled as there was an error while processing the transaction.\n             * @param {string} fromLastModifiedTime Filter transactions based on last modified time stamp, FROM duration in format (UTC ISO 8601) i.e. yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\n             * @param {string} toLastModifiedTime Filter transactions based on last modified time stamp, TO duration in format (UTC ISO 8601) i.e. yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;\n             * @param {string} nextToken When response to this API call is truncated, the response also includes the nextToken in metadata, the value of which can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that In-Skill Products API understands. Token has expiry of 24 hours.\n             * @param {number} maxResults sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 100 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned because maxResults was exceeded, the response contains nextToken which can be used to fetch next set of result.\n             */\n            MonetizationServiceClient.prototype.getInSkillProductsTransactions = function (acceptLanguage, productId, status, fromLastModifiedTime, toLastModifiedTime, nextToken, maxResults) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetInSkillProductsTransactions(acceptLanguage, productId, status, fromLastModifiedTime, toLastModifiedTime, nextToken, maxResults)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Returns whether or not voice purchasing is enabled for the skill\n             */\n            MonetizationServiceClient.prototype.callGetVoicePurchaseSetting = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetVoicePurchaseSetting';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/users/~current/skills/~current/settings/voicePurchasing.enabled\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Returns a boolean value for voice purchase setting on success.\");\n                        errorDefinitions.set(400, \"Invalid request.\");\n                        errorDefinitions.set(401, \"The authentication token is invalid or doesn&#39;t have access to make this request\");\n                        errorDefinitions.set(500, \"Internal Server Error.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Returns whether or not voice purchasing is enabled for the skill\n             */\n            MonetizationServiceClient.prototype.getVoicePurchaseSetting = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetVoicePurchaseSetting()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return MonetizationServiceClient;\n        }(services.BaseServiceClient));\n        monetization.MonetizationServiceClient = MonetizationServiceClient;\n    })(monetization = services.monetization || (services.monetization = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var proactiveEvents;\n    (function (proactiveEvents) {\n        /**\n         *\n        */\n        var ProactiveEventsServiceClient = /** @class */ (function (_super) {\n            __extends(ProactiveEventsServiceClient, _super);\n            function ProactiveEventsServiceClient(apiConfiguration, authenticationConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.lwaServiceClient = new services.LwaServiceClient({\n                    apiConfiguration: apiConfiguration,\n                    authenticationConfiguration: authenticationConfiguration,\n                });\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Create a new proactive event in live stage.\n             * @param {services.proactiveEvents.CreateProactiveEventRequest} createProactiveEventRequest Request to create a new proactive event.\n             */\n            ProactiveEventsServiceClient.prototype.callCreateProactiveEvent = function (createProactiveEventRequest, stage) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, accessToken, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                __operationId__ = 'callCreateProactiveEvent';\n                                // verify required parameter 'createProactiveEventRequest' is not null or undefined\n                                if (createProactiveEventRequest == null) {\n                                    throw new Error(\"Required parameter createProactiveEventRequest was null or undefined when calling \" + __operationId__ + \".\");\n                                }\n                                queryParams = [];\n                                headerParams = [];\n                                headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                                if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                                    headerParams.push({ key: 'Content-type', value: 'application/json' });\n                                }\n                                pathParams = new Map();\n                                return [4 /*yield*/, this.lwaServiceClient.getAccessTokenForScope(\"alexa::proactive_events\")];\n                            case 1:\n                                accessToken = _a.sent();\n                                authorizationValue = \"Bearer \" + accessToken;\n                                headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                                resourcePath = \"/v1/proactiveEvents\";\n                                if (stage === 'DEVELOPMENT') {\n                                    resourcePath += '/stages/development';\n                                }\n                                errorDefinitions = new Map();\n                                errorDefinitions.set(202, \"Request accepted\");\n                                errorDefinitions.set(400, \"A required parameter is not present or is incorrectly formatted, or the requested creation of a resource has already been completed by a previous request. \");\n                                errorDefinitions.set(403, \"The authentication token is invalid or doesn&#39;t have authentication to access the resource\");\n                                errorDefinitions.set(409, \"A skill attempts to create duplicate events using the same referenceId for the same customer.\");\n                                errorDefinitions.set(429, \"The client has made more calls than the allowed limit.\");\n                                errorDefinitions.set(500, \"The ProactiveEvents service encounters an internal error for a valid request.\");\n                                errorDefinitions.set(0, \"Unexpected error\");\n                                return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, createProactiveEventRequest, errorDefinitions)];\n                        }\n                    });\n                });\n            };\n            /**\n             * Create a new proactive event in live stage.\n             * @param {services.proactiveEvents.CreateProactiveEventRequest} createProactiveEventRequest Request to create a new proactive event.\n             */\n            ProactiveEventsServiceClient.prototype.createProactiveEvent = function (createProactiveEventRequest, stage) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callCreateProactiveEvent(createProactiveEventRequest, stage)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            return ProactiveEventsServiceClient;\n        }(services.BaseServiceClient));\n        proactiveEvents.ProactiveEventsServiceClient = ProactiveEventsServiceClient;\n    })(proactiveEvents = services.proactiveEvents || (services.proactiveEvents = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var reminderManagement;\n    (function (reminderManagement) {\n        /**\n         *\n        */\n        var ReminderManagementServiceClient = /** @class */ (function (_super) {\n            __extends(ReminderManagementServiceClient, _super);\n            function ReminderManagementServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * This API is invoked by the skill to delete a single reminder.\n             * @param {string} alertToken\n             */\n            ReminderManagementServiceClient.prototype.callDeleteReminder = function (alertToken) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callDeleteReminder';\n                        // verify required parameter 'alertToken' is not null or undefined\n                        if (alertToken == null) {\n                            throw new Error(\"Required parameter alertToken was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('alertToken', alertToken);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/reminders/{alertToken}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(401, \"UserAuthenticationException. Request is not authorized/authenticated e.g. If customer does not have permission to create a reminder.\");\n                        errorDefinitions.set(429, \"RateExceededException e.g. When the skill is throttled for exceeding the max rate\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"DELETE\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to delete a single reminder.\n             * @param {string} alertToken\n             */\n            ReminderManagementServiceClient.prototype.deleteReminder = function (alertToken) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callDeleteReminder(alertToken)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to get a single reminder.\n             * @param {string} alertToken\n             */\n            ReminderManagementServiceClient.prototype.callGetReminder = function (alertToken) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetReminder';\n                        // verify required parameter 'alertToken' is not null or undefined\n                        if (alertToken == null) {\n                            throw new Error(\"Required parameter alertToken was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('alertToken', alertToken);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/reminders/{alertToken}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(401, \"UserAuthenticationException. Request is not authorized/authenticated e.g. If customer does not have permission to create a reminder.\");\n                        errorDefinitions.set(429, \"RateExceededException e.g. When the skill is throttled for exceeding the max rate\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to get a single reminder.\n             * @param {string} alertToken\n             */\n            ReminderManagementServiceClient.prototype.getReminder = function (alertToken) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetReminder(alertToken)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to update a reminder.\n             * @param {string} alertToken\n             * @param {services.reminderManagement.ReminderRequest} reminderRequest\n             */\n            ReminderManagementServiceClient.prototype.callUpdateReminder = function (alertToken, reminderRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callUpdateReminder';\n                        // verify required parameter 'alertToken' is not null or undefined\n                        if (alertToken == null) {\n                            throw new Error(\"Required parameter alertToken was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        // verify required parameter 'reminderRequest' is not null or undefined\n                        if (reminderRequest == null) {\n                            throw new Error(\"Required parameter reminderRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        pathParams.set('alertToken', alertToken);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/reminders/{alertToken}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(404, \"NotFoundException e.g. Retured when reminder is not found\");\n                        errorDefinitions.set(409, \"UserAuthenticationException. Request is not authorized/authenticated e.g. If customer does not have permission to create a reminder.\");\n                        errorDefinitions.set(429, \"RateExceededException e.g. When the skill is throttled for exceeding the max rate\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"PUT\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, reminderRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to update a reminder.\n             * @param {string} alertToken\n             * @param {services.reminderManagement.ReminderRequest} reminderRequest\n             */\n            ReminderManagementServiceClient.prototype.updateReminder = function (alertToken, reminderRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callUpdateReminder(alertToken, reminderRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to get a all reminders created by the caller.\n             */\n            ReminderManagementServiceClient.prototype.callGetReminders = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetReminders';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/reminders\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(401, \"UserAuthenticationException. Request is not authorized/authenticated e.g. If customer does not have permission to create a reminder.\");\n                        errorDefinitions.set(429, \"RateExceededException e.g. When the skill is throttled for exceeding the max rate\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to get a all reminders created by the caller.\n             */\n            ReminderManagementServiceClient.prototype.getReminders = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetReminders()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to create a new reminder.\n             * @param {services.reminderManagement.ReminderRequest} reminderRequest\n             */\n            ReminderManagementServiceClient.prototype.callCreateReminder = function (reminderRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callCreateReminder';\n                        // verify required parameter 'reminderRequest' is not null or undefined\n                        if (reminderRequest == null) {\n                            throw new Error(\"Required parameter reminderRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/reminders\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(429, \"RateExceededException e.g. When the skill is throttled for exceeding the max rate\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(503, \"Service Unavailable\");\n                        errorDefinitions.set(504, \"Gateway Timeout\");\n                        return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, reminderRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * This API is invoked by the skill to create a new reminder.\n             * @param {services.reminderManagement.ReminderRequest} reminderRequest\n             */\n            ReminderManagementServiceClient.prototype.createReminder = function (reminderRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callCreateReminder(reminderRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return ReminderManagementServiceClient;\n        }(services.BaseServiceClient));\n        reminderManagement.ReminderManagementServiceClient = ReminderManagementServiceClient;\n    })(reminderManagement = services.reminderManagement || (services.reminderManagement = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var skillMessaging;\n    (function (skillMessaging) {\n        /**\n         *\n        */\n        var SkillMessagingServiceClient = /** @class */ (function (_super) {\n            __extends(SkillMessagingServiceClient, _super);\n            function SkillMessagingServiceClient(apiConfiguration, authenticationConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.lwaServiceClient = new services.LwaServiceClient({\n                    apiConfiguration: apiConfiguration,\n                    authenticationConfiguration: authenticationConfiguration,\n                });\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Send a message request to a skill for a specified user.\n             * @param {string} userId The user Id for the specific user to send the message\n             * @param {services.skillMessaging.SendSkillMessagingRequest} sendSkillMessagingRequest Message Request to be sent to the skill.\n             */\n            SkillMessagingServiceClient.prototype.callSendSkillMessage = function (userId, sendSkillMessagingRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, accessToken, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                __operationId__ = 'callSendSkillMessage';\n                                // verify required parameter 'userId' is not null or undefined\n                                if (userId == null) {\n                                    throw new Error(\"Required parameter userId was null or undefined when calling \" + __operationId__ + \".\");\n                                }\n                                // verify required parameter 'sendSkillMessagingRequest' is not null or undefined\n                                if (sendSkillMessagingRequest == null) {\n                                    throw new Error(\"Required parameter sendSkillMessagingRequest was null or undefined when calling \" + __operationId__ + \".\");\n                                }\n                                queryParams = [];\n                                headerParams = [];\n                                headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                                if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                                    headerParams.push({ key: 'Content-type', value: 'application/json' });\n                                }\n                                pathParams = new Map();\n                                pathParams.set('userId', userId);\n                                return [4 /*yield*/, this.lwaServiceClient.getAccessTokenForScope(\"alexa:skill_messaging\")];\n                            case 1:\n                                accessToken = _a.sent();\n                                authorizationValue = \"Bearer \" + accessToken;\n                                headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                                resourcePath = \"/v1/skillmessages/users/{userId}\";\n                                errorDefinitions = new Map();\n                                errorDefinitions.set(202, \"Message has been successfully accepted, and will be sent to the skill \");\n                                errorDefinitions.set(400, \"Data is missing or not valid \");\n                                errorDefinitions.set(403, \"The skill messaging authentication token is expired or not valid \");\n                                errorDefinitions.set(404, \"The passed userId does not exist \");\n                                errorDefinitions.set(429, \"The requester has exceeded their maximum allowable rate of messages \");\n                                errorDefinitions.set(500, \"The SkillMessaging service encountered an internal error for a valid request. \");\n                                errorDefinitions.set(0, \"Unexpected error\");\n                                return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, sendSkillMessagingRequest, errorDefinitions)];\n                        }\n                    });\n                });\n            };\n            /**\n             * Send a message request to a skill for a specified user.\n             * @param {string} userId The user Id for the specific user to send the message\n             * @param {services.skillMessaging.SendSkillMessagingRequest} sendSkillMessagingRequest Message Request to be sent to the skill.\n             */\n            SkillMessagingServiceClient.prototype.sendSkillMessage = function (userId, sendSkillMessagingRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callSendSkillMessage(userId, sendSkillMessagingRequest)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            return SkillMessagingServiceClient;\n        }(services.BaseServiceClient));\n        skillMessaging.SkillMessagingServiceClient = SkillMessagingServiceClient;\n    })(skillMessaging = services.skillMessaging || (services.skillMessaging = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var timerManagement;\n    (function (timerManagement) {\n        /**\n         *\n        */\n        var TimerManagementServiceClient = /** @class */ (function (_super) {\n            __extends(TimerManagementServiceClient, _super);\n            function TimerManagementServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Delete all timers created by the skill.\n             */\n            TimerManagementServiceClient.prototype.callDeleteTimers = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callDeleteTimers';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/timers\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(401, \"Unauthorized\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"DELETE\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Delete all timers created by the skill.\n             */\n            TimerManagementServiceClient.prototype.deleteTimers = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callDeleteTimers()];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            /**\n             * Get all timers created by the skill.\n             */\n            TimerManagementServiceClient.prototype.callGetTimers = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetTimers';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/timers\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(401, \"Unauthorized\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Get all timers created by the skill.\n             */\n            TimerManagementServiceClient.prototype.getTimers = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetTimers()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Delete a timer by ID.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.callDeleteTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callDeleteTimer';\n                        // verify required parameter 'id' is not null or undefined\n                        if (id == null) {\n                            throw new Error(\"Required parameter id was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('id', id);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/timers/{id}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(401, \"Unauthorized\");\n                        errorDefinitions.set(404, \"Timer not found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"DELETE\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Delete a timer by ID.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.deleteTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callDeleteTimer(id)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            /**\n             * Get timer by ID.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.callGetTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetTimer';\n                        // verify required parameter 'id' is not null or undefined\n                        if (id == null) {\n                            throw new Error(\"Required parameter id was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('id', id);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/timers/{id}\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(401, \"Unauthorized\");\n                        errorDefinitions.set(404, \"Timer not found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Get timer by ID.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.getTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetTimer(id)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Pause a timer.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.callPauseTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callPauseTimer';\n                        // verify required parameter 'id' is not null or undefined\n                        if (id == null) {\n                            throw new Error(\"Required parameter id was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('id', id);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/timers/{id}/pause\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(401, \"Unauthorized\");\n                        errorDefinitions.set(404, \"Timer not found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(504, \"Device offline\");\n                        return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Pause a timer.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.pauseTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callPauseTimer(id)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            /**\n             * Resume a timer.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.callResumeTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callResumeTimer';\n                        // verify required parameter 'id' is not null or undefined\n                        if (id == null) {\n                            throw new Error(\"Required parameter id was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('id', id);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/timers/{id}/resume\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(401, \"Unauthorized\");\n                        errorDefinitions.set(404, \"Timer not found\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(504, \"Device offline\");\n                        return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Resume a timer.\n             * @param {string} id\n             */\n            TimerManagementServiceClient.prototype.resumeTimer = function (id) {\n                return __awaiter(this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callResumeTimer(id)];\n                            case 1:\n                                _a.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            };\n            /**\n             * Create a new timer.\n             * @param {services.timerManagement.TimerRequest} timerRequest\n             */\n            TimerManagementServiceClient.prototype.callCreateTimer = function (timerRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callCreateTimer';\n                        // verify required parameter 'timerRequest' is not null or undefined\n                        if (timerRequest == null) {\n                            throw new Error(\"Required parameter timerRequest was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        if (!headerParams.find(function (param) { return param.key.toLowerCase() === 'content-type'; })) {\n                            headerParams.push({ key: 'Content-type', value: 'application/json' });\n                        }\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v1/alerts/timers\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Success\");\n                        errorDefinitions.set(400, \"Bad Request\");\n                        errorDefinitions.set(401, \"Unauthorized\");\n                        errorDefinitions.set(403, \"Forbidden\");\n                        errorDefinitions.set(500, \"Internal Server Error\");\n                        errorDefinitions.set(504, \"Device offline\");\n                        return [2 /*return*/, this.invoke(\"POST\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, timerRequest, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Create a new timer.\n             * @param {services.timerManagement.TimerRequest} timerRequest\n             */\n            TimerManagementServiceClient.prototype.createTimer = function (timerRequest) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callCreateTimer(timerRequest)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return TimerManagementServiceClient;\n        }(services.BaseServiceClient));\n        timerManagement.TimerManagementServiceClient = TimerManagementServiceClient;\n    })(timerManagement = services.timerManagement || (services.timerManagement = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    var ups;\n    (function (ups) {\n        /**\n         *\n        */\n        var UpsServiceClient = /** @class */ (function (_super) {\n            __extends(UpsServiceClient, _super);\n            function UpsServiceClient(apiConfiguration, customUserAgent) {\n                if (customUserAgent === void 0) { customUserAgent = null; }\n                var _this = _super.call(this, apiConfiguration) || this;\n                _this.userAgent = createUserAgent(\"\" + __webpack_require__(\"./node_modules/ask-sdk-model/package.json\").version, customUserAgent);\n                return _this;\n            }\n            /**\n             * Gets the email address of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:email:read]\n             */\n            UpsServiceClient.prototype.callGetProfileEmail = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetProfileEmail';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/accounts/~current/settings/Profile.email\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the requested information.\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the email address of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:email:read]\n             */\n            UpsServiceClient.prototype.getProfileEmail = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetProfileEmail()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the given name (first name) of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:given_name:read]\n             */\n            UpsServiceClient.prototype.callGetProfileGivenName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetProfileGivenName';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/accounts/~current/settings/Profile.givenName\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the requested information.\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the given name (first name) of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:given_name:read]\n             */\n            UpsServiceClient.prototype.getProfileGivenName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetProfileGivenName()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the mobile phone number of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:mobile_number:read]\n             */\n            UpsServiceClient.prototype.callGetProfileMobileNumber = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetProfileMobileNumber';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/accounts/~current/settings/Profile.mobileNumber\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the requested information.\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the mobile phone number of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:mobile_number:read]\n             */\n            UpsServiceClient.prototype.getProfileMobileNumber = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetProfileMobileNumber()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the full name of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:name:read]\n             */\n            UpsServiceClient.prototype.callGetProfileName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetProfileName';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/accounts/~current/settings/Profile.name\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the requested information.\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the full name of the customer associated with the current enablement. Requires customer consent for scopes: [alexa::profile:name:read]\n             */\n            UpsServiceClient.prototype.getProfileName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetProfileName()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the distance measurement unit of the device. Does not require explict customer consent.\n             * @param {string} deviceId The device Id\n             */\n            UpsServiceClient.prototype.callGetSystemDistanceUnits = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetSystemDistanceUnits';\n                        // verify required parameter 'deviceId' is not null or undefined\n                        if (deviceId == null) {\n                            throw new Error(\"Required parameter deviceId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('deviceId', deviceId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/devices/{deviceId}/settings/System.distanceUnits\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully get the setting\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the distance measurement unit of the device. Does not require explict customer consent.\n             * @param {string} deviceId The device Id\n             */\n            UpsServiceClient.prototype.getSystemDistanceUnits = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetSystemDistanceUnits(deviceId)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the temperature measurement units of the device. Does not require explict customer consent.\n             * @param {string} deviceId The device Id\n             */\n            UpsServiceClient.prototype.callGetSystemTemperatureUnit = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetSystemTemperatureUnit';\n                        // verify required parameter 'deviceId' is not null or undefined\n                        if (deviceId == null) {\n                            throw new Error(\"Required parameter deviceId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('deviceId', deviceId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/devices/{deviceId}/settings/System.temperatureUnit\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully get the setting\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the temperature measurement units of the device. Does not require explict customer consent.\n             * @param {string} deviceId The device Id\n             */\n            UpsServiceClient.prototype.getSystemTemperatureUnit = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetSystemTemperatureUnit(deviceId)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the time zone of the device. Does not require explict customer consent.\n             * @param {string} deviceId The device Id\n             */\n            UpsServiceClient.prototype.callGetSystemTimeZone = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetSystemTimeZone';\n                        // verify required parameter 'deviceId' is not null or undefined\n                        if (deviceId == null) {\n                            throw new Error(\"Required parameter deviceId was null or undefined when calling \" + __operationId__ + \".\");\n                        }\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        pathParams.set('deviceId', deviceId);\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/devices/{deviceId}/settings/System.timeZone\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully get the setting\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the time zone of the device. Does not require explict customer consent.\n             * @param {string} deviceId The device Id\n             */\n            UpsServiceClient.prototype.getSystemTimeZone = function (deviceId) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetSystemTimeZone(deviceId)];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the given name (first name) of the recognized speaker at person-level. Requires speaker consent at person-level for scopes: [alexa::profile:given_name:read]\n             */\n            UpsServiceClient.prototype.callGetPersonsProfileGivenName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetPersonsProfileGivenName';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/persons/~current/profile/givenName\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the requested information.\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the given name (first name) of the recognized speaker at person-level. Requires speaker consent at person-level for scopes: [alexa::profile:given_name:read]\n             */\n            UpsServiceClient.prototype.getPersonsProfileGivenName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetPersonsProfileGivenName()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the mobile phone number of the recognized speaker at person-level. Requires speaker consent at person-level for scopes: [alexa::profile:mobile_number:read]\n             */\n            UpsServiceClient.prototype.callGetPersonsProfileMobileNumber = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetPersonsProfileMobileNumber';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/persons/~current/profile/mobileNumber\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the requested information.\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the mobile phone number of the recognized speaker at person-level. Requires speaker consent at person-level for scopes: [alexa::profile:mobile_number:read]\n             */\n            UpsServiceClient.prototype.getPersonsProfileMobileNumber = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetPersonsProfileMobileNumber()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            /**\n             * Gets the full name of the recognized speaker at person-level. Requires speaker consent at person-level for scopes: [alexa::profile:name:read]\n             */\n            UpsServiceClient.prototype.callGetPersonsProfileName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var __operationId__, queryParams, headerParams, pathParams, authorizationValue, resourcePath, errorDefinitions;\n                    return __generator(this, function (_a) {\n                        __operationId__ = 'callGetPersonsProfileName';\n                        queryParams = [];\n                        headerParams = [];\n                        headerParams.push({ key: 'User-Agent', value: this.userAgent });\n                        pathParams = new Map();\n                        authorizationValue = \"Bearer \" + this.apiConfiguration.authorizationValue;\n                        headerParams.push({ key: \"Authorization\", value: authorizationValue });\n                        resourcePath = \"/v2/persons/~current/profile/name\";\n                        errorDefinitions = new Map();\n                        errorDefinitions.set(200, \"Successfully retrieved the requested information.\");\n                        errorDefinitions.set(204, \"The query did not return any results.\");\n                        errorDefinitions.set(401, \"The authentication token is malformed or invalid.\");\n                        errorDefinitions.set(403, \"The authentication token does not have access to resource.\");\n                        errorDefinitions.set(429, \"The skill has been throttled due to an excessive number of requests.\");\n                        errorDefinitions.set(0, \"An unexpected error occurred.\");\n                        return [2 /*return*/, this.invoke(\"GET\", this.apiConfiguration.apiEndpoint, resourcePath, pathParams, queryParams, headerParams, null, errorDefinitions)];\n                    });\n                });\n            };\n            /**\n             * Gets the full name of the recognized speaker at person-level. Requires speaker consent at person-level for scopes: [alexa::profile:name:read]\n             */\n            UpsServiceClient.prototype.getPersonsProfileName = function () {\n                return __awaiter(this, void 0, void 0, function () {\n                    var apiResponse;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.callGetPersonsProfileName()];\n                            case 1:\n                                apiResponse = _a.sent();\n                                return [2 /*return*/, apiResponse.body];\n                        }\n                    });\n                });\n            };\n            return UpsServiceClient;\n        }(services.BaseServiceClient));\n        ups.UpsServiceClient = UpsServiceClient;\n    })(ups = services.ups || (services.ups = {}));\n})(services = exports.services || (exports.services = {}));\n(function (services) {\n    /**\n     * Helper class that instantiates an ServiceClient implementation automatically resolving its\n     * required ApiConfiguration.\n     * @export\n     * @class ServiceClientFactory\n     */\n    var ServiceClientFactory = /** @class */ (function () {\n        function ServiceClientFactory(apiConfiguration) {\n            this.apiConfiguration = apiConfiguration;\n        }\n        /*\n         * Gets an instance of { deviceAddress.DeviceAddressService }.\n         * @returns { deviceAddress.DeviceAddressService }\n         */\n        ServiceClientFactory.prototype.getDeviceAddressServiceClient = function () {\n            try {\n                return new services.deviceAddress.DeviceAddressServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing DeviceAddressServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        /*\n         * Gets an instance of { directive.DirectiveService }.\n         * @returns { directive.DirectiveService }\n         */\n        ServiceClientFactory.prototype.getDirectiveServiceClient = function () {\n            try {\n                return new services.directive.DirectiveServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing DirectiveServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        /*\n         * Gets an instance of { endpointEnumeration.EndpointEnumerationService }.\n         * @returns { endpointEnumeration.EndpointEnumerationService }\n         */\n        ServiceClientFactory.prototype.getEndpointEnumerationServiceClient = function () {\n            try {\n                return new services.endpointEnumeration.EndpointEnumerationServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing EndpointEnumerationServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        /*\n         * Gets an instance of { listManagement.ListManagementService }.\n         * @returns { listManagement.ListManagementService }\n         */\n        ServiceClientFactory.prototype.getListManagementServiceClient = function () {\n            try {\n                return new services.listManagement.ListManagementServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing ListManagementServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        /*\n         * Gets an instance of { monetization.MonetizationService }.\n         * @returns { monetization.MonetizationService }\n         */\n        ServiceClientFactory.prototype.getMonetizationServiceClient = function () {\n            try {\n                return new services.monetization.MonetizationServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing MonetizationServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        /*\n         * Gets an instance of { reminderManagement.ReminderManagementService }.\n         * @returns { reminderManagement.ReminderManagementService }\n         */\n        ServiceClientFactory.prototype.getReminderManagementServiceClient = function () {\n            try {\n                return new services.reminderManagement.ReminderManagementServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing ReminderManagementServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        /*\n         * Gets an instance of { timerManagement.TimerManagementService }.\n         * @returns { timerManagement.TimerManagementService }\n         */\n        ServiceClientFactory.prototype.getTimerManagementServiceClient = function () {\n            try {\n                return new services.timerManagement.TimerManagementServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing TimerManagementServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        /*\n         * Gets an instance of { ups.UpsService }.\n         * @returns { ups.UpsService }\n         */\n        ServiceClientFactory.prototype.getUpsServiceClient = function () {\n            try {\n                return new services.ups.UpsServiceClient(this.apiConfiguration);\n            }\n            catch (e) {\n                var factoryError = new Error(\"ServiceClientFactory Error while initializing UpsServiceClient: \" + e.message);\n                factoryError['name'] = 'ServiceClientFactoryError';\n                throw factoryError;\n            }\n        };\n        return ServiceClientFactory;\n    }());\n    services.ServiceClientFactory = ServiceClientFactory;\n})(services = exports.services || (exports.services = {}));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-model/index.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-model/package.json":
/***/ ((module) => {

module.exports = JSON.parse('{"_args":[["ask-sdk-model@1.44.0","/home/yashaswi/Desktop/volley-skill-starter"]],"_from":"ask-sdk-model@1.44.0","_id":"ask-sdk-model@1.44.0","_inBundle":false,"_integrity":"sha512-3PqyxpMVx+9Ej/t9kREU5ZQNVKM8Ph0h2ThcVxQoZFjuSDopaC9kDKd7tktQeD9WBbWLqK/oiDCKHMZ0hRXueg==","_location":"/ask-sdk-model","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"ask-sdk-model@1.44.0","name":"ask-sdk-model","escapedName":"ask-sdk-model","rawSpec":"1.44.0","saveSpec":null,"fetchSpec":"1.44.0"},"_requiredBy":["#DEV:/","/ask-sdk"],"_resolved":"https://registry.npmjs.org/ask-sdk-model/-/ask-sdk-model-1.44.0.tgz","_spec":"1.44.0","_where":"/home/yashaswi/Desktop/volley-skill-starter","author":{"name":"Amazon.com"},"bugs":{"url":"https://github.com/alexa/alexa-skill-sdk-for-nodejs/issues"},"contributors":[{"name":"Tianren Zhang","email":"tianrenz@amazon.com"},{"name":"Tiantian Xie","email":"xtiantia@amazon.com"}],"description":"Model package for Alexa Skills Kit SDK","devDependencies":{"@types/node":"^9.6.1","del":"^3.0.0","gulp":"^4.0.0","typescript":"^3.5.3"},"homepage":"https://github.com/alexa/alexa-skill-sdk-for-nodejs#readme","keywords":["Alexa","Skill","SDK"],"license":"Apache-2.0","main":"index.js","name":"ask-sdk-model","repository":{"type":"git","url":"git+https://github.com/alexa/alexa-apis-for-nodejs.git"},"scripts":{"gulp":"gulp"},"types":"index.d.ts","version":"1.44.0"}');

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/dispatcher/GenericRequestDispatcher.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenericRequestDispatcher = void 0;\nconst AskSdkUtils_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/util/AskSdkUtils.js\");\n/**\n * Generic implementation of {@link RequestDispatcher}.\n * @param Input generic type for input object sent to handler.\n * @param Output generic type for the handler return value.\n */\nclass GenericRequestDispatcher {\n    constructor(options) {\n        this.requestMappers = options.requestMappers;\n        this.handlerAdapters = options.handlerAdapters;\n        this.errorMapper = options.errorMapper;\n        this.requestInterceptors = options.requestInterceptors;\n        this.responseInterceptors = options.responseInterceptors;\n    }\n    /**\n     * Main entry point for dispatching logic.\n     * Dispatches handlerInput to requestHandlers and error, if any, to errorHandlers\n     * @param input\n     */\n    async dispatch(input) {\n        let output;\n        try {\n            // Execute global request interceptors\n            if (this.requestInterceptors) {\n                for (const requestInterceptor of this.requestInterceptors) {\n                    await requestInterceptor.process(input);\n                }\n            }\n            // Dispatch request to handler chain\n            output = await this.dispatchRequest(input);\n            // Execute global response interceptors\n            if (this.responseInterceptors) {\n                for (const responseInterceptor of this.responseInterceptors) {\n                    await responseInterceptor.process(input, output);\n                }\n            }\n        }\n        catch (err) {\n            output = await this.dispatchError(input, err);\n        }\n        return output;\n    }\n    /**\n     * Main logic for request dispatching.\n     * @param input\n     */\n    async dispatchRequest(input) {\n        // Get the request handler chain that can handle the request\n        let handlerChain;\n        for (const requestMapper of this.requestMappers) {\n            handlerChain = await requestMapper.getRequestHandlerChain(input);\n            if (handlerChain) {\n                break;\n            }\n        }\n        if (!handlerChain) {\n            throw AskSdkUtils_1.createAskSdkError(this.constructor.name, `Unable to find a suitable request handler.`);\n        }\n        // Extract the handler and interceptors from the handler chain\n        const handler = handlerChain.getRequestHandler();\n        const requestInterceptors = handlerChain.getRequestInterceptors();\n        const responseInterceptors = handlerChain.getResponseInterceptors();\n        let adapter;\n        for (const handlerAdapter of this.handlerAdapters) {\n            if (handlerAdapter.supports(handler)) {\n                adapter = handlerAdapter;\n                break;\n            }\n        }\n        if (!adapter) {\n            throw AskSdkUtils_1.createAskSdkError(this.constructor.name, `Unable to find a suitable handler adapter.`);\n        }\n        // Execute request interceptors that are local to the handler chain\n        if (requestInterceptors) {\n            for (const requestInterceptor of requestInterceptors) {\n                await requestInterceptor.process(input);\n            }\n        }\n        // Invoke the request handler\n        const output = await adapter.execute(input, handler);\n        // Execute response interceptors that are local to the handler chain\n        if (responseInterceptors) {\n            for (const responseInterceptor of responseInterceptors) {\n                await responseInterceptor.process(input, output);\n            }\n        }\n        return output;\n    }\n    /**\n     * Main logic for error dispatching.\n     * @param input\n     * @param error\n     */\n    async dispatchError(input, error) {\n        if (this.errorMapper) {\n            const handler = await this.errorMapper.getErrorHandler(input, error);\n            if (handler) {\n                return handler.handle(input, error);\n            }\n        }\n        throw error;\n    }\n}\nexports.GenericRequestDispatcher = GenericRequestDispatcher;\n//# sourceMappingURL=GenericRequestDispatcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvZGlzcGF0Y2hlci9HZW5lcmljUmVxdWVzdERpc3BhdGNoZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvZGlzcGF0Y2hlci9HZW5lcmljUmVxdWVzdERpc3BhdGNoZXIuanM/ZGM4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdlbmVyaWNSZXF1ZXN0RGlzcGF0Y2hlciA9IHZvaWQgMDtcbmNvbnN0IEFza1Nka1V0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9Bc2tTZGtVdGlsc1wiKTtcbi8qKlxuICogR2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgUmVxdWVzdERpc3BhdGNoZXJ9LlxuICogQHBhcmFtIElucHV0IGdlbmVyaWMgdHlwZSBmb3IgaW5wdXQgb2JqZWN0IHNlbnQgdG8gaGFuZGxlci5cbiAqIEBwYXJhbSBPdXRwdXQgZ2VuZXJpYyB0eXBlIGZvciB0aGUgaGFuZGxlciByZXR1cm4gdmFsdWUuXG4gKi9cbmNsYXNzIEdlbmVyaWNSZXF1ZXN0RGlzcGF0Y2hlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLnJlcXVlc3RNYXBwZXJzID0gb3B0aW9ucy5yZXF1ZXN0TWFwcGVycztcbiAgICAgICAgdGhpcy5oYW5kbGVyQWRhcHRlcnMgPSBvcHRpb25zLmhhbmRsZXJBZGFwdGVycztcbiAgICAgICAgdGhpcy5lcnJvck1hcHBlciA9IG9wdGlvbnMuZXJyb3JNYXBwZXI7XG4gICAgICAgIHRoaXMucmVxdWVzdEludGVyY2VwdG9ycyA9IG9wdGlvbnMucmVxdWVzdEludGVyY2VwdG9ycztcbiAgICAgICAgdGhpcy5yZXNwb25zZUludGVyY2VwdG9ycyA9IG9wdGlvbnMucmVzcG9uc2VJbnRlcmNlcHRvcnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1haW4gZW50cnkgcG9pbnQgZm9yIGRpc3BhdGNoaW5nIGxvZ2ljLlxuICAgICAqIERpc3BhdGNoZXMgaGFuZGxlcklucHV0IHRvIHJlcXVlc3RIYW5kbGVycyBhbmQgZXJyb3IsIGlmIGFueSwgdG8gZXJyb3JIYW5kbGVyc1xuICAgICAqIEBwYXJhbSBpbnB1dFxuICAgICAqL1xuICAgIGFzeW5jIGRpc3BhdGNoKGlucHV0KSB7XG4gICAgICAgIGxldCBvdXRwdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBFeGVjdXRlIGdsb2JhbCByZXF1ZXN0IGludGVyY2VwdG9yc1xuICAgICAgICAgICAgaWYgKHRoaXMucmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWVzdEludGVyY2VwdG9yIG9mIHRoaXMucmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXF1ZXN0SW50ZXJjZXB0b3IucHJvY2VzcyhpbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGlzcGF0Y2ggcmVxdWVzdCB0byBoYW5kbGVyIGNoYWluXG4gICAgICAgICAgICBvdXRwdXQgPSBhd2FpdCB0aGlzLmRpc3BhdGNoUmVxdWVzdChpbnB1dCk7XG4gICAgICAgICAgICAvLyBFeGVjdXRlIGdsb2JhbCByZXNwb25zZSBpbnRlcmNlcHRvcnNcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3JzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXNwb25zZUludGVyY2VwdG9yIG9mIHRoaXMucmVzcG9uc2VJbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVzcG9uc2VJbnRlcmNlcHRvci5wcm9jZXNzKGlucHV0LCBvdXRwdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBhd2FpdCB0aGlzLmRpc3BhdGNoRXJyb3IoaW5wdXQsIGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFpbiBsb2dpYyBmb3IgcmVxdWVzdCBkaXNwYXRjaGluZy5cbiAgICAgKiBAcGFyYW0gaW5wdXRcbiAgICAgKi9cbiAgICBhc3luYyBkaXNwYXRjaFJlcXVlc3QoaW5wdXQpIHtcbiAgICAgICAgLy8gR2V0IHRoZSByZXF1ZXN0IGhhbmRsZXIgY2hhaW4gdGhhdCBjYW4gaGFuZGxlIHRoZSByZXF1ZXN0XG4gICAgICAgIGxldCBoYW5kbGVyQ2hhaW47XG4gICAgICAgIGZvciAoY29uc3QgcmVxdWVzdE1hcHBlciBvZiB0aGlzLnJlcXVlc3RNYXBwZXJzKSB7XG4gICAgICAgICAgICBoYW5kbGVyQ2hhaW4gPSBhd2FpdCByZXF1ZXN0TWFwcGVyLmdldFJlcXVlc3RIYW5kbGVyQ2hhaW4oaW5wdXQpO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJDaGFpbikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaGFuZGxlckNoYWluKSB7XG4gICAgICAgICAgICB0aHJvdyBBc2tTZGtVdGlsc18xLmNyZWF0ZUFza1Nka0Vycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSwgYFVuYWJsZSB0byBmaW5kIGEgc3VpdGFibGUgcmVxdWVzdCBoYW5kbGVyLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4dHJhY3QgdGhlIGhhbmRsZXIgYW5kIGludGVyY2VwdG9ycyBmcm9tIHRoZSBoYW5kbGVyIGNoYWluXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyQ2hhaW4uZ2V0UmVxdWVzdEhhbmRsZXIoKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9ycyA9IGhhbmRsZXJDaGFpbi5nZXRSZXF1ZXN0SW50ZXJjZXB0b3JzKCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JzID0gaGFuZGxlckNoYWluLmdldFJlc3BvbnNlSW50ZXJjZXB0b3JzKCk7XG4gICAgICAgIGxldCBhZGFwdGVyO1xuICAgICAgICBmb3IgKGNvbnN0IGhhbmRsZXJBZGFwdGVyIG9mIHRoaXMuaGFuZGxlckFkYXB0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlckFkYXB0ZXIuc3VwcG9ydHMoaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICBhZGFwdGVyID0gaGFuZGxlckFkYXB0ZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhZGFwdGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBBc2tTZGtVdGlsc18xLmNyZWF0ZUFza1Nka0Vycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSwgYFVuYWJsZSB0byBmaW5kIGEgc3VpdGFibGUgaGFuZGxlciBhZGFwdGVyLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4ZWN1dGUgcmVxdWVzdCBpbnRlcmNlcHRvcnMgdGhhdCBhcmUgbG9jYWwgdG8gdGhlIGhhbmRsZXIgY2hhaW5cbiAgICAgICAgaWYgKHJlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWVzdEludGVyY2VwdG9yIG9mIHJlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCByZXF1ZXN0SW50ZXJjZXB0b3IucHJvY2VzcyhpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW52b2tlIHRoZSByZXF1ZXN0IGhhbmRsZXJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgYWRhcHRlci5leGVjdXRlKGlucHV0LCBoYW5kbGVyKTtcbiAgICAgICAgLy8gRXhlY3V0ZSByZXNwb25zZSBpbnRlcmNlcHRvcnMgdGhhdCBhcmUgbG9jYWwgdG8gdGhlIGhhbmRsZXIgY2hhaW5cbiAgICAgICAgaWYgKHJlc3BvbnNlSW50ZXJjZXB0b3JzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3Igb2YgcmVzcG9uc2VJbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCByZXNwb25zZUludGVyY2VwdG9yLnByb2Nlc3MoaW5wdXQsIG91dHB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFpbiBsb2dpYyBmb3IgZXJyb3IgZGlzcGF0Y2hpbmcuXG4gICAgICogQHBhcmFtIGlucHV0XG4gICAgICogQHBhcmFtIGVycm9yXG4gICAgICovXG4gICAgYXN5bmMgZGlzcGF0Y2hFcnJvcihpbnB1dCwgZXJyb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JNYXBwZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBhd2FpdCB0aGlzLmVycm9yTWFwcGVyLmdldEVycm9ySGFuZGxlcihpbnB1dCwgZXJyb3IpO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlci5oYW5kbGUoaW5wdXQsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5leHBvcnRzLkdlbmVyaWNSZXF1ZXN0RGlzcGF0Y2hlciA9IEdlbmVyaWNSZXF1ZXN0RGlzcGF0Y2hlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyaWNSZXF1ZXN0RGlzcGF0Y2hlci5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/dispatcher/GenericRequestDispatcher.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/dispatcher/error/mapper/GenericErrorMapper.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenericErrorMapper = void 0;\n/**\n * Generic implementation of @{link ErrorMapper}\n */\nclass GenericErrorMapper {\n    constructor(options) {\n        this.errorHandlers = options.errorHandlers;\n    }\n    async getErrorHandler(handlerInput, error) {\n        for (const errorHandler of this.errorHandlers) {\n            if (await errorHandler.canHandle(handlerInput, error)) {\n                return errorHandler;\n            }\n        }\n        return null;\n    }\n}\nexports.GenericErrorMapper = GenericErrorMapper;\n//# sourceMappingURL=GenericErrorMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvZGlzcGF0Y2hlci9lcnJvci9tYXBwZXIvR2VuZXJpY0Vycm9yTWFwcGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstcnVudGltZS9kaXN0L2Rpc3BhdGNoZXIvZXJyb3IvbWFwcGVyL0dlbmVyaWNFcnJvck1hcHBlci5qcz8yYjUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VuZXJpY0Vycm9yTWFwcGVyID0gdm9pZCAwO1xuLyoqXG4gKiBHZW5lcmljIGltcGxlbWVudGF0aW9uIG9mIEB7bGluayBFcnJvck1hcHBlcn1cbiAqL1xuY2xhc3MgR2VuZXJpY0Vycm9yTWFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVycyA9IG9wdGlvbnMuZXJyb3JIYW5kbGVycztcbiAgICB9XG4gICAgYXN5bmMgZ2V0RXJyb3JIYW5kbGVyKGhhbmRsZXJJbnB1dCwgZXJyb3IpIHtcbiAgICAgICAgZm9yIChjb25zdCBlcnJvckhhbmRsZXIgb2YgdGhpcy5lcnJvckhhbmRsZXJzKSB7XG4gICAgICAgICAgICBpZiAoYXdhaXQgZXJyb3JIYW5kbGVyLmNhbkhhbmRsZShoYW5kbGVySW5wdXQsIGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvckhhbmRsZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5HZW5lcmljRXJyb3JNYXBwZXIgPSBHZW5lcmljRXJyb3JNYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HZW5lcmljRXJyb3JNYXBwZXIuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/dispatcher/error/mapper/GenericErrorMapper.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericHandlerAdapter.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenericHandlerAdapter = void 0;\n/**\n * Generic implementation of {@link HandlerAdapter that supports the {@link RequestHandler}}}\n */\nclass GenericHandlerAdapter {\n    supports(handler) {\n        return typeof handler.canHandle === 'function'\n            && typeof handler.handle === 'function';\n    }\n    async execute(input, handler) {\n        return handler.handle(input);\n    }\n}\nexports.GenericHandlerAdapter = GenericHandlerAdapter;\n//# sourceMappingURL=GenericHandlerAdapter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvZGlzcGF0Y2hlci9yZXF1ZXN0L2hhbmRsZXIvR2VuZXJpY0hhbmRsZXJBZGFwdGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstcnVudGltZS9kaXN0L2Rpc3BhdGNoZXIvcmVxdWVzdC9oYW5kbGVyL0dlbmVyaWNIYW5kbGVyQWRhcHRlci5qcz8zMGM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VuZXJpY0hhbmRsZXJBZGFwdGVyID0gdm9pZCAwO1xuLyoqXG4gKiBHZW5lcmljIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBIYW5kbGVyQWRhcHRlciB0aGF0IHN1cHBvcnRzIHRoZSB7QGxpbmsgUmVxdWVzdEhhbmRsZXJ9fX1cbiAqL1xuY2xhc3MgR2VuZXJpY0hhbmRsZXJBZGFwdGVyIHtcbiAgICBzdXBwb3J0cyhoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaGFuZGxlci5jYW5IYW5kbGUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICYmIHR5cGVvZiBoYW5kbGVyLmhhbmRsZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShpbnB1dCwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5oYW5kbGUoaW5wdXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJpY0hhbmRsZXJBZGFwdGVyID0gR2VuZXJpY0hhbmRsZXJBZGFwdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2VuZXJpY0hhbmRsZXJBZGFwdGVyLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericHandlerAdapter.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericRequestHandlerChain.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenericRequestHandlerChain = void 0;\n/**\n * Generic implementation of {@link RequestHandlerChain}.\n */\nclass GenericRequestHandlerChain {\n    constructor(options) {\n        this.requestHandler = options.requestHandler;\n        this.requestInterceptors = options.requestInterceptors;\n        this.responseInterceptors = options.responseInterceptors;\n    }\n    getRequestHandler() {\n        return this.requestHandler;\n    }\n    getRequestInterceptors() {\n        return this.requestInterceptors;\n    }\n    getResponseInterceptors() {\n        return this.responseInterceptors;\n    }\n}\nexports.GenericRequestHandlerChain = GenericRequestHandlerChain;\n//# sourceMappingURL=GenericRequestHandlerChain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvZGlzcGF0Y2hlci9yZXF1ZXN0L2hhbmRsZXIvR2VuZXJpY1JlcXVlc3RIYW5kbGVyQ2hhaW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvZGlzcGF0Y2hlci9yZXF1ZXN0L2hhbmRsZXIvR2VuZXJpY1JlcXVlc3RIYW5kbGVyQ2hhaW4uanM/MTlkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdlbmVyaWNSZXF1ZXN0SGFuZGxlckNoYWluID0gdm9pZCAwO1xuLyoqXG4gKiBHZW5lcmljIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBSZXF1ZXN0SGFuZGxlckNoYWlufS5cbiAqL1xuY2xhc3MgR2VuZXJpY1JlcXVlc3RIYW5kbGVyQ2hhaW4ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SGFuZGxlciA9IG9wdGlvbnMucmVxdWVzdEhhbmRsZXI7XG4gICAgICAgIHRoaXMucmVxdWVzdEludGVyY2VwdG9ycyA9IG9wdGlvbnMucmVxdWVzdEludGVyY2VwdG9ycztcbiAgICAgICAgdGhpcy5yZXNwb25zZUludGVyY2VwdG9ycyA9IG9wdGlvbnMucmVzcG9uc2VJbnRlcmNlcHRvcnM7XG4gICAgfVxuICAgIGdldFJlcXVlc3RIYW5kbGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0SGFuZGxlcjtcbiAgICB9XG4gICAgZ2V0UmVxdWVzdEludGVyY2VwdG9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEludGVyY2VwdG9ycztcbiAgICB9XG4gICAgZ2V0UmVzcG9uc2VJbnRlcmNlcHRvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3JzO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJpY1JlcXVlc3RIYW5kbGVyQ2hhaW4gPSBHZW5lcmljUmVxdWVzdEhhbmRsZXJDaGFpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyaWNSZXF1ZXN0SGFuZGxlckNoYWluLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericRequestHandlerChain.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/dispatcher/request/mapper/GenericRequestMapper.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenericRequestMapper = void 0;\n/**\n * Generic implementation for {@link RequestMapper}.\n */\nclass GenericRequestMapper {\n    constructor(options) {\n        this.requestHandlerChains = options.requestHandlerChains;\n    }\n    async getRequestHandlerChain(input) {\n        for (const requestHandlerChain of this.requestHandlerChains) {\n            const requestHandler = requestHandlerChain.getRequestHandler();\n            if (await requestHandler.canHandle(input)) {\n                return requestHandlerChain;\n            }\n        }\n        return null;\n    }\n}\nexports.GenericRequestMapper = GenericRequestMapper;\n//# sourceMappingURL=GenericRequestMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvZGlzcGF0Y2hlci9yZXF1ZXN0L21hcHBlci9HZW5lcmljUmVxdWVzdE1hcHBlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhY2thZ2UuanNvbi8uL25vZGVfbW9kdWxlcy9hc2stc2RrLXJ1bnRpbWUvZGlzdC9kaXNwYXRjaGVyL3JlcXVlc3QvbWFwcGVyL0dlbmVyaWNSZXF1ZXN0TWFwcGVyLmpzPzAwZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTggQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuXG4gKiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBvciBpbiB0aGUgXCJsaWNlbnNlXCIgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWRcbiAqIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlclxuICogZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmdcbiAqIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW5lcmljUmVxdWVzdE1hcHBlciA9IHZvaWQgMDtcbi8qKlxuICogR2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBmb3Ige0BsaW5rIFJlcXVlc3RNYXBwZXJ9LlxuICovXG5jbGFzcyBHZW5lcmljUmVxdWVzdE1hcHBlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLnJlcXVlc3RIYW5kbGVyQ2hhaW5zID0gb3B0aW9ucy5yZXF1ZXN0SGFuZGxlckNoYWlucztcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVxdWVzdEhhbmRsZXJDaGFpbihpbnB1dCkge1xuICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RIYW5kbGVyQ2hhaW4gb2YgdGhpcy5yZXF1ZXN0SGFuZGxlckNoYWlucykge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEhhbmRsZXIgPSByZXF1ZXN0SGFuZGxlckNoYWluLmdldFJlcXVlc3RIYW5kbGVyKCk7XG4gICAgICAgICAgICBpZiAoYXdhaXQgcmVxdWVzdEhhbmRsZXIuY2FuSGFuZGxlKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0SGFuZGxlckNoYWluO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJpY1JlcXVlc3RNYXBwZXIgPSBHZW5lcmljUmVxdWVzdE1hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyaWNSZXF1ZXN0TWFwcGVyLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/dispatcher/request/mapper/GenericRequestMapper.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar GenericErrorMapper_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/error/mapper/GenericErrorMapper.js\");\nObject.defineProperty(exports, \"GenericErrorMapper\", ({ enumerable: true, get: function () { return GenericErrorMapper_1.GenericErrorMapper; } }));\nvar GenericHandlerAdapter_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericHandlerAdapter.js\");\nObject.defineProperty(exports, \"GenericHandlerAdapter\", ({ enumerable: true, get: function () { return GenericHandlerAdapter_1.GenericHandlerAdapter; } }));\nvar GenericRequestHandlerChain_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericRequestHandlerChain.js\");\nObject.defineProperty(exports, \"GenericRequestHandlerChain\", ({ enumerable: true, get: function () { return GenericRequestHandlerChain_1.GenericRequestHandlerChain; } }));\nvar GenericRequestMapper_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/request/mapper/GenericRequestMapper.js\");\nObject.defineProperty(exports, \"GenericRequestMapper\", ({ enumerable: true, get: function () { return GenericRequestMapper_1.GenericRequestMapper; } }));\nvar RuntimeConfigurationBuilder_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/skill/RuntimeConfigurationBuilder.js\");\nObject.defineProperty(exports, \"RuntimeConfigurationBuilder\", ({ enumerable: true, get: function () { return RuntimeConfigurationBuilder_1.RuntimeConfigurationBuilder; } }));\nvar GenericRequestDispatcher_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/GenericRequestDispatcher.js\");\nObject.defineProperty(exports, \"GenericRequestDispatcher\", ({ enumerable: true, get: function () { return GenericRequestDispatcher_1.GenericRequestDispatcher; } }));\nvar AskSdkUtils_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/util/AskSdkUtils.js\");\nObject.defineProperty(exports, \"createAskSdkError\", ({ enumerable: true, get: function () { return AskSdkUtils_1.createAskSdkError; } }));\nObject.defineProperty(exports, \"createAskSdkUserAgent\", ({ enumerable: true, get: function () { return AskSdkUtils_1.createAskSdkUserAgent; } }));\nvar UserAgentManager_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/util/UserAgentManager.js\");\nObject.defineProperty(exports, \"UserAgentManager\", ({ enumerable: true, get: function () { return UserAgentManager_1.UserAgentManager; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvaW5kZXguanM/ZjRiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgR2VuZXJpY0Vycm9yTWFwcGVyXzEgPSByZXF1aXJlKFwiLi9kaXNwYXRjaGVyL2Vycm9yL21hcHBlci9HZW5lcmljRXJyb3JNYXBwZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHZW5lcmljRXJyb3JNYXBwZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEdlbmVyaWNFcnJvck1hcHBlcl8xLkdlbmVyaWNFcnJvck1hcHBlcjsgfSB9KTtcbnZhciBHZW5lcmljSGFuZGxlckFkYXB0ZXJfMSA9IHJlcXVpcmUoXCIuL2Rpc3BhdGNoZXIvcmVxdWVzdC9oYW5kbGVyL0dlbmVyaWNIYW5kbGVyQWRhcHRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdlbmVyaWNIYW5kbGVyQWRhcHRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gR2VuZXJpY0hhbmRsZXJBZGFwdGVyXzEuR2VuZXJpY0hhbmRsZXJBZGFwdGVyOyB9IH0pO1xudmFyIEdlbmVyaWNSZXF1ZXN0SGFuZGxlckNoYWluXzEgPSByZXF1aXJlKFwiLi9kaXNwYXRjaGVyL3JlcXVlc3QvaGFuZGxlci9HZW5lcmljUmVxdWVzdEhhbmRsZXJDaGFpblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdlbmVyaWNSZXF1ZXN0SGFuZGxlckNoYWluXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBHZW5lcmljUmVxdWVzdEhhbmRsZXJDaGFpbl8xLkdlbmVyaWNSZXF1ZXN0SGFuZGxlckNoYWluOyB9IH0pO1xudmFyIEdlbmVyaWNSZXF1ZXN0TWFwcGVyXzEgPSByZXF1aXJlKFwiLi9kaXNwYXRjaGVyL3JlcXVlc3QvbWFwcGVyL0dlbmVyaWNSZXF1ZXN0TWFwcGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2VuZXJpY1JlcXVlc3RNYXBwZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEdlbmVyaWNSZXF1ZXN0TWFwcGVyXzEuR2VuZXJpY1JlcXVlc3RNYXBwZXI7IH0gfSk7XG52YXIgUnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyXzEgPSByZXF1aXJlKFwiLi9za2lsbC9SdW50aW1lQ29uZmlndXJhdGlvbkJ1aWxkZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSdW50aW1lQ29uZmlndXJhdGlvbkJ1aWxkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlcl8xLlJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlcjsgfSB9KTtcbnZhciBHZW5lcmljUmVxdWVzdERpc3BhdGNoZXJfMSA9IHJlcXVpcmUoXCIuL2Rpc3BhdGNoZXIvR2VuZXJpY1JlcXVlc3REaXNwYXRjaGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2VuZXJpY1JlcXVlc3REaXNwYXRjaGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBHZW5lcmljUmVxdWVzdERpc3BhdGNoZXJfMS5HZW5lcmljUmVxdWVzdERpc3BhdGNoZXI7IH0gfSk7XG52YXIgQXNrU2RrVXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWwvQXNrU2RrVXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBc2tTZGtFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXNrU2RrVXRpbHNfMS5jcmVhdGVBc2tTZGtFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUFza1Nka1VzZXJBZ2VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXNrU2RrVXRpbHNfMS5jcmVhdGVBc2tTZGtVc2VyQWdlbnQ7IH0gfSk7XG52YXIgVXNlckFnZW50TWFuYWdlcl8xID0gcmVxdWlyZShcIi4vdXRpbC9Vc2VyQWdlbnRNYW5hZ2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVXNlckFnZW50TWFuYWdlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gVXNlckFnZW50TWFuYWdlcl8xLlVzZXJBZ2VudE1hbmFnZXI7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/index.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/skill/RuntimeConfigurationBuilder.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RuntimeConfigurationBuilder = void 0;\nconst GenericErrorMapper_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/error/mapper/GenericErrorMapper.js\");\nconst GenericHandlerAdapter_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericHandlerAdapter.js\");\nconst GenericRequestHandlerChain_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/request/handler/GenericRequestHandlerChain.js\");\nconst GenericRequestMapper_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/dispatcher/request/mapper/GenericRequestMapper.js\");\nconst AskSdkUtils_1 = __webpack_require__(\"./node_modules/ask-sdk-runtime/dist/util/AskSdkUtils.js\");\nclass RuntimeConfigurationBuilder {\n    constructor() {\n        this.requestHandlerChains = [];\n        this.requestInterceptors = [];\n        this.responseInterceptors = [];\n        this.errorHandlers = [];\n    }\n    addRequestHandler(matcher, executor) {\n        if (typeof matcher !== 'function' || typeof executor !== 'function') {\n            throw AskSdkUtils_1.createAskSdkError(this.constructor.name, `Incompatible matcher type: ${typeof matcher}`);\n        }\n        this.requestHandlerChains.push(new GenericRequestHandlerChain_1.GenericRequestHandlerChain({\n            requestHandler: {\n                canHandle: matcher,\n                handle: executor,\n            },\n        }));\n        return this;\n    }\n    addRequestHandlers(...requestHandlers) {\n        for (const requestHandler of requestHandlers) {\n            this.requestHandlerChains.push(new GenericRequestHandlerChain_1.GenericRequestHandlerChain({\n                requestHandler,\n            }));\n        }\n        return this;\n    }\n    addRequestInterceptors(...executors) {\n        for (const executor of executors) {\n            switch (typeof executor) {\n                case 'object': {\n                    this.requestInterceptors.push(executor);\n                    break;\n                }\n                case 'function': {\n                    this.requestInterceptors.push({\n                        process: executor,\n                    });\n                    break;\n                }\n                default: {\n                    throw AskSdkUtils_1.createAskSdkError(this.constructor.name, `Incompatible executor type: ${typeof executor}`);\n                }\n            }\n        }\n        return this;\n    }\n    addResponseInterceptors(...executors) {\n        for (const executor of executors) {\n            switch (typeof executor) {\n                case 'object': {\n                    this.responseInterceptors.push(executor);\n                    break;\n                }\n                case 'function': {\n                    this.responseInterceptors.push({\n                        process: executor,\n                    });\n                    break;\n                }\n                default: {\n                    throw AskSdkUtils_1.createAskSdkError('SkillBuilderError', `Incompatible executor type: ${typeof executor}`);\n                }\n            }\n        }\n        return this;\n    }\n    addErrorHandler(matcher, executor) {\n        this.errorHandlers.push({\n            canHandle: matcher,\n            handle: executor,\n        });\n        return this;\n    }\n    addErrorHandlers(...errorHandlers) {\n        this.errorHandlers.push(...errorHandlers);\n        return this;\n    }\n    getRuntimeConfiguration() {\n        const requestMapper = new GenericRequestMapper_1.GenericRequestMapper({\n            requestHandlerChains: this.requestHandlerChains,\n        });\n        const errorMapper = this.errorHandlers.length\n            ? new GenericErrorMapper_1.GenericErrorMapper({\n                errorHandlers: this.errorHandlers,\n            })\n            : undefined;\n        return {\n            requestMappers: [requestMapper],\n            handlerAdapters: [new GenericHandlerAdapter_1.GenericHandlerAdapter()],\n            errorMapper,\n            requestInterceptors: this.requestInterceptors,\n            responseInterceptors: this.responseInterceptors,\n        };\n    }\n}\nexports.RuntimeConfigurationBuilder = RuntimeConfigurationBuilder;\n//# sourceMappingURL=RuntimeConfigurationBuilder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3Qvc2tpbGwvUnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstcnVudGltZS9kaXN0L3NraWxsL1J1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlci5qcz81MzdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyID0gdm9pZCAwO1xuY29uc3QgR2VuZXJpY0Vycm9yTWFwcGVyXzEgPSByZXF1aXJlKFwiLi4vZGlzcGF0Y2hlci9lcnJvci9tYXBwZXIvR2VuZXJpY0Vycm9yTWFwcGVyXCIpO1xuY29uc3QgR2VuZXJpY0hhbmRsZXJBZGFwdGVyXzEgPSByZXF1aXJlKFwiLi4vZGlzcGF0Y2hlci9yZXF1ZXN0L2hhbmRsZXIvR2VuZXJpY0hhbmRsZXJBZGFwdGVyXCIpO1xuY29uc3QgR2VuZXJpY1JlcXVlc3RIYW5kbGVyQ2hhaW5fMSA9IHJlcXVpcmUoXCIuLi9kaXNwYXRjaGVyL3JlcXVlc3QvaGFuZGxlci9HZW5lcmljUmVxdWVzdEhhbmRsZXJDaGFpblwiKTtcbmNvbnN0IEdlbmVyaWNSZXF1ZXN0TWFwcGVyXzEgPSByZXF1aXJlKFwiLi4vZGlzcGF0Y2hlci9yZXF1ZXN0L21hcHBlci9HZW5lcmljUmVxdWVzdE1hcHBlclwiKTtcbmNvbnN0IEFza1Nka1V0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9Bc2tTZGtVdGlsc1wiKTtcbmNsYXNzIFJ1bnRpbWVDb25maWd1cmF0aW9uQnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEhhbmRsZXJDaGFpbnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SW50ZXJjZXB0b3JzID0gW107XG4gICAgICAgIHRoaXMucmVzcG9uc2VJbnRlcmNlcHRvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5lcnJvckhhbmRsZXJzID0gW107XG4gICAgfVxuICAgIGFkZFJlcXVlc3RIYW5kbGVyKG1hdGNoZXIsIGV4ZWN1dG9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWF0Y2hlciAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IEFza1Nka1V0aWxzXzEuY3JlYXRlQXNrU2RrRXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBgSW5jb21wYXRpYmxlIG1hdGNoZXIgdHlwZTogJHt0eXBlb2YgbWF0Y2hlcn1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcXVlc3RIYW5kbGVyQ2hhaW5zLnB1c2gobmV3IEdlbmVyaWNSZXF1ZXN0SGFuZGxlckNoYWluXzEuR2VuZXJpY1JlcXVlc3RIYW5kbGVyQ2hhaW4oe1xuICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXI6IHtcbiAgICAgICAgICAgICAgICBjYW5IYW5kbGU6IG1hdGNoZXIsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBleGVjdXRvcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZFJlcXVlc3RIYW5kbGVycyguLi5yZXF1ZXN0SGFuZGxlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCByZXF1ZXN0SGFuZGxlciBvZiByZXF1ZXN0SGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEhhbmRsZXJDaGFpbnMucHVzaChuZXcgR2VuZXJpY1JlcXVlc3RIYW5kbGVyQ2hhaW5fMS5HZW5lcmljUmVxdWVzdEhhbmRsZXJDaGFpbih7XG4gICAgICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXIsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZFJlcXVlc3RJbnRlcmNlcHRvcnMoLi4uZXhlY3V0b3JzKSB7XG4gICAgICAgIGZvciAoY29uc3QgZXhlY3V0b3Igb2YgZXhlY3V0b3JzKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBleGVjdXRvcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0SW50ZXJjZXB0b3JzLnB1c2goZXhlY3V0b3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdEludGVyY2VwdG9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3M6IGV4ZWN1dG9yLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgQXNrU2RrVXRpbHNfMS5jcmVhdGVBc2tTZGtFcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIGBJbmNvbXBhdGlibGUgZXhlY3V0b3IgdHlwZTogJHt0eXBlb2YgZXhlY3V0b3J9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRSZXNwb25zZUludGVyY2VwdG9ycyguLi5leGVjdXRvcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBleGVjdXRvciBvZiBleGVjdXRvcnMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGV4ZWN1dG9yKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0Jzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goZXhlY3V0b3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VJbnRlcmNlcHRvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzOiBleGVjdXRvcixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEFza1Nka1V0aWxzXzEuY3JlYXRlQXNrU2RrRXJyb3IoJ1NraWxsQnVpbGRlckVycm9yJywgYEluY29tcGF0aWJsZSBleGVjdXRvciB0eXBlOiAke3R5cGVvZiBleGVjdXRvcn1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZEVycm9ySGFuZGxlcihtYXRjaGVyLCBleGVjdXRvcikge1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlcnMucHVzaCh7XG4gICAgICAgICAgICBjYW5IYW5kbGU6IG1hdGNoZXIsXG4gICAgICAgICAgICBoYW5kbGU6IGV4ZWN1dG9yLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZEVycm9ySGFuZGxlcnMoLi4uZXJyb3JIYW5kbGVycykge1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlcnMucHVzaCguLi5lcnJvckhhbmRsZXJzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGdldFJ1bnRpbWVDb25maWd1cmF0aW9uKCkge1xuICAgICAgICBjb25zdCByZXF1ZXN0TWFwcGVyID0gbmV3IEdlbmVyaWNSZXF1ZXN0TWFwcGVyXzEuR2VuZXJpY1JlcXVlc3RNYXBwZXIoe1xuICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXJDaGFpbnM6IHRoaXMucmVxdWVzdEhhbmRsZXJDaGFpbnMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBlcnJvck1hcHBlciA9IHRoaXMuZXJyb3JIYW5kbGVycy5sZW5ndGhcbiAgICAgICAgICAgID8gbmV3IEdlbmVyaWNFcnJvck1hcHBlcl8xLkdlbmVyaWNFcnJvck1hcHBlcih7XG4gICAgICAgICAgICAgICAgZXJyb3JIYW5kbGVyczogdGhpcy5lcnJvckhhbmRsZXJzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVxdWVzdE1hcHBlcnM6IFtyZXF1ZXN0TWFwcGVyXSxcbiAgICAgICAgICAgIGhhbmRsZXJBZGFwdGVyczogW25ldyBHZW5lcmljSGFuZGxlckFkYXB0ZXJfMS5HZW5lcmljSGFuZGxlckFkYXB0ZXIoKV0sXG4gICAgICAgICAgICBlcnJvck1hcHBlcixcbiAgICAgICAgICAgIHJlcXVlc3RJbnRlcmNlcHRvcnM6IHRoaXMucmVxdWVzdEludGVyY2VwdG9ycyxcbiAgICAgICAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JzOiB0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3JzLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyID0gUnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UnVudGltZUNvbmZpZ3VyYXRpb25CdWlsZGVyLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/skill/RuntimeConfigurationBuilder.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/util/AskSdkUtils.js":
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAskSdkUserAgent = exports.createAskSdkError = void 0;\n/**\n * function creating an AskSdk error.\n * @param {string} errorScope\n * @param {string} errorMessage\n * @returns {Error}\n */\nfunction createAskSdkError(errorScope, errorMessage) {\n    const error = new Error(errorMessage);\n    error.name = `AskSdk.${errorScope} Error`;\n    return error;\n}\nexports.createAskSdkError = createAskSdkError;\n/**\n * function creating an AskSdk user agent.\n * @param packageVersion\n * @param customUserAgent\n */\nfunction createAskSdkUserAgent(packageVersion, customUserAgent) {\n    const customUserAgentString = customUserAgent ? (` ${customUserAgent}`) : '';\n    return `ask-node/${packageVersion} Node/${process.version}${customUserAgentString}`;\n}\nexports.createAskSdkUserAgent = createAskSdkUserAgent;\n//# sourceMappingURL=AskSdkUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvdXRpbC9Bc2tTZGtVdGlscy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhY2thZ2UuanNvbi8uL25vZGVfbW9kdWxlcy9hc2stc2RrLXJ1bnRpbWUvZGlzdC91dGlsL0Fza1Nka1V0aWxzLmpzP2M0MDYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQXNrU2RrVXNlckFnZW50ID0gZXhwb3J0cy5jcmVhdGVBc2tTZGtFcnJvciA9IHZvaWQgMDtcbi8qKlxuICogZnVuY3Rpb24gY3JlYXRpbmcgYW4gQXNrU2RrIGVycm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGVycm9yU2NvcGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvck1lc3NhZ2VcbiAqIEByZXR1cm5zIHtFcnJvcn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNrU2RrRXJyb3IoZXJyb3JTY29wZSwgZXJyb3JNZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gYEFza1Nkay4ke2Vycm9yU2NvcGV9IEVycm9yYDtcbiAgICByZXR1cm4gZXJyb3I7XG59XG5leHBvcnRzLmNyZWF0ZUFza1Nka0Vycm9yID0gY3JlYXRlQXNrU2RrRXJyb3I7XG4vKipcbiAqIGZ1bmN0aW9uIGNyZWF0aW5nIGFuIEFza1NkayB1c2VyIGFnZW50LlxuICogQHBhcmFtIHBhY2thZ2VWZXJzaW9uXG4gKiBAcGFyYW0gY3VzdG9tVXNlckFnZW50XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFza1Nka1VzZXJBZ2VudChwYWNrYWdlVmVyc2lvbiwgY3VzdG9tVXNlckFnZW50KSB7XG4gICAgY29uc3QgY3VzdG9tVXNlckFnZW50U3RyaW5nID0gY3VzdG9tVXNlckFnZW50ID8gKGAgJHtjdXN0b21Vc2VyQWdlbnR9YCkgOiAnJztcbiAgICByZXR1cm4gYGFzay1ub2RlLyR7cGFja2FnZVZlcnNpb259IE5vZGUvJHtwcm9jZXNzLnZlcnNpb259JHtjdXN0b21Vc2VyQWdlbnRTdHJpbmd9YDtcbn1cbmV4cG9ydHMuY3JlYXRlQXNrU2RrVXNlckFnZW50ID0gY3JlYXRlQXNrU2RrVXNlckFnZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNrU2RrVXRpbHMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/util/AskSdkUtils.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk-runtime/dist/util/UserAgentManager.js":
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserAgentManager = void 0;\n/**\n * Static manager of environment level SDK user agent information.\n */\nclass UserAgentManager {\n    /**\n     * Retrieves the full user agent string, containing all registered components.\n     */\n    static getUserAgent() {\n        return this.userAgent;\n    }\n    /**\n     * Registers a user agent component. This will be appended to the generated\n     * user agent string. Duplicate components will be ignored.\n     *\n     * @param component string component to add to the full user agent\n     */\n    static registerComponent(component) {\n        if (!this.components.has(component)) {\n            this.components.add(component);\n            let updatedUserAgent;\n            for (const component of this.components) {\n                updatedUserAgent = updatedUserAgent ? `${updatedUserAgent} ${component}` : component;\n            }\n            this.userAgent = updatedUserAgent;\n        }\n    }\n}\nexports.UserAgentManager = UserAgentManager;\nUserAgentManager.components = new Set();\nUserAgentManager.userAgent = '';\n//# sourceMappingURL=UserAgentManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay1ydW50aW1lL2Rpc3QvdXRpbC9Vc2VyQWdlbnRNYW5hZ2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGstcnVudGltZS9kaXN0L3V0aWwvVXNlckFnZW50TWFuYWdlci5qcz8zY2QwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIwIEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXNlckFnZW50TWFuYWdlciA9IHZvaWQgMDtcbi8qKlxuICogU3RhdGljIG1hbmFnZXIgb2YgZW52aXJvbm1lbnQgbGV2ZWwgU0RLIHVzZXIgYWdlbnQgaW5mb3JtYXRpb24uXG4gKi9cbmNsYXNzIFVzZXJBZ2VudE1hbmFnZXIge1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgZnVsbCB1c2VyIGFnZW50IHN0cmluZywgY29udGFpbmluZyBhbGwgcmVnaXN0ZXJlZCBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRVc2VyQWdlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJBZ2VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgdXNlciBhZ2VudCBjb21wb25lbnQuIFRoaXMgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgZ2VuZXJhdGVkXG4gICAgICogdXNlciBhZ2VudCBzdHJpbmcuIER1cGxpY2F0ZSBjb21wb25lbnRzIHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21wb25lbnQgc3RyaW5nIGNvbXBvbmVudCB0byBhZGQgdG8gdGhlIGZ1bGwgdXNlciBhZ2VudFxuICAgICAqL1xuICAgIHN0YXRpYyByZWdpc3RlckNvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbXBvbmVudHMuaGFzKGNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5hZGQoY29tcG9uZW50KTtcbiAgICAgICAgICAgIGxldCB1cGRhdGVkVXNlckFnZW50O1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlZFVzZXJBZ2VudCA9IHVwZGF0ZWRVc2VyQWdlbnQgPyBgJHt1cGRhdGVkVXNlckFnZW50fSAke2NvbXBvbmVudH1gIDogY29tcG9uZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51c2VyQWdlbnQgPSB1cGRhdGVkVXNlckFnZW50O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Vc2VyQWdlbnRNYW5hZ2VyID0gVXNlckFnZW50TWFuYWdlcjtcblVzZXJBZ2VudE1hbmFnZXIuY29tcG9uZW50cyA9IG5ldyBTZXQoKTtcblVzZXJBZ2VudE1hbmFnZXIudXNlckFnZW50ID0gJyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Vc2VyQWdlbnRNYW5hZ2VyLmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk-runtime/dist/util/UserAgentManager.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk/dist/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar StandardSkillFactory_1 = __webpack_require__(\"./node_modules/ask-sdk/dist/skill/factory/StandardSkillFactory.js\");\nObject.defineProperty(exports, \"StandardSkillFactory\", ({ enumerable: true, get: function () { return StandardSkillFactory_1.StandardSkillFactory; } }));\nvar SkillBuilders_1 = __webpack_require__(\"./node_modules/ask-sdk/dist/skill/SkillBuilders.js\");\nObject.defineProperty(exports, \"SkillBuilders\", ({ enumerable: true, get: function () { return SkillBuilders_1.SkillBuilders; } }));\nvar ask_sdk_core_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/index.js\");\nObject.defineProperty(exports, \"AttributesManagerFactory\", ({ enumerable: true, get: function () { return ask_sdk_core_1.AttributesManagerFactory; } }));\nObject.defineProperty(exports, \"BaseSkillFactory\", ({ enumerable: true, get: function () { return ask_sdk_core_1.BaseSkillFactory; } }));\nObject.defineProperty(exports, \"createAskSdkError\", ({ enumerable: true, get: function () { return ask_sdk_core_1.createAskSdkError; } }));\nObject.defineProperty(exports, \"CustomSkillFactory\", ({ enumerable: true, get: function () { return ask_sdk_core_1.CustomSkillFactory; } }));\nObject.defineProperty(exports, \"DefaultApiClient\", ({ enumerable: true, get: function () { return ask_sdk_core_1.DefaultApiClient; } }));\nObject.defineProperty(exports, \"escapeXmlCharacters\", ({ enumerable: true, get: function () { return ask_sdk_core_1.escapeXmlCharacters; } }));\nObject.defineProperty(exports, \"getAccountLinkingAccessToken\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getAccountLinkingAccessToken; } }));\nObject.defineProperty(exports, \"getApiAccessToken\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getApiAccessToken; } }));\nObject.defineProperty(exports, \"getDeviceId\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getDeviceId; } }));\nObject.defineProperty(exports, \"getUserId\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getUserId; } }));\nObject.defineProperty(exports, \"getDialogState\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getDialogState; } }));\nObject.defineProperty(exports, \"getIntentName\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getIntentName; } }));\nObject.defineProperty(exports, \"getLocale\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getLocale; } }));\nObject.defineProperty(exports, \"getRequest\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getRequest; } }));\nObject.defineProperty(exports, \"getRequestType\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getRequestType; } }));\nObject.defineProperty(exports, \"getSlot\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getSlot; } }));\nObject.defineProperty(exports, \"getSlotValue\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getSlotValue; } }));\nObject.defineProperty(exports, \"getSupportedInterfaces\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getSupportedInterfaces; } }));\nObject.defineProperty(exports, \"getViewportDpiGroup\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getViewportDpiGroup; } }));\nObject.defineProperty(exports, \"getViewportOrientation\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getViewportOrientation; } }));\nObject.defineProperty(exports, \"getViewportProfile\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getViewportProfile; } }));\nObject.defineProperty(exports, \"getViewportSizeGroup\", ({ enumerable: true, get: function () { return ask_sdk_core_1.getViewportSizeGroup; } }));\nObject.defineProperty(exports, \"ImageHelper\", ({ enumerable: true, get: function () { return ask_sdk_core_1.ImageHelper; } }));\nObject.defineProperty(exports, \"isNewSession\", ({ enumerable: true, get: function () { return ask_sdk_core_1.isNewSession; } }));\nObject.defineProperty(exports, \"PlainTextContentHelper\", ({ enumerable: true, get: function () { return ask_sdk_core_1.PlainTextContentHelper; } }));\nObject.defineProperty(exports, \"ResponseFactory\", ({ enumerable: true, get: function () { return ask_sdk_core_1.ResponseFactory; } }));\nObject.defineProperty(exports, \"RichTextContentHelper\", ({ enumerable: true, get: function () { return ask_sdk_core_1.RichTextContentHelper; } }));\nObject.defineProperty(exports, \"Skill\", ({ enumerable: true, get: function () { return ask_sdk_core_1.Skill; } }));\nObject.defineProperty(exports, \"TextContentHelper\", ({ enumerable: true, get: function () { return ask_sdk_core_1.TextContentHelper; } }));\nObject.defineProperty(exports, \"ViewportDpiGroupOrder\", ({ enumerable: true, get: function () { return ask_sdk_core_1.ViewportDpiGroupOrder; } }));\nObject.defineProperty(exports, \"ViewportSizeGroupOrder\", ({ enumerable: true, get: function () { return ask_sdk_core_1.ViewportSizeGroupOrder; } }));\nvar ask_sdk_dynamodb_persistence_adapter_1 = __webpack_require__(\"./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/index.js\");\nObject.defineProperty(exports, \"DynamoDbPersistenceAdapter\", ({ enumerable: true, get: function () { return ask_sdk_dynamodb_persistence_adapter_1.DynamoDbPersistenceAdapter; } }));\nObject.defineProperty(exports, \"PartitionKeyGenerators\", ({ enumerable: true, get: function () { return ask_sdk_dynamodb_persistence_adapter_1.PartitionKeyGenerators; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGFja2FnZS5qc29uLy4vbm9kZV9tb2R1bGVzL2Fzay1zZGsvZGlzdC9pbmRleC5qcz82Y2NjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE4IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLlxuICogWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogb3IgaW4gdGhlIFwibGljZW5zZVwiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkXG4gKiBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXJcbiAqIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nXG4gKiBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTdGFuZGFyZFNraWxsRmFjdG9yeV8xID0gcmVxdWlyZShcIi4vc2tpbGwvZmFjdG9yeS9TdGFuZGFyZFNraWxsRmFjdG9yeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0YW5kYXJkU2tpbGxGYWN0b3J5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTdGFuZGFyZFNraWxsRmFjdG9yeV8xLlN0YW5kYXJkU2tpbGxGYWN0b3J5OyB9IH0pO1xudmFyIFNraWxsQnVpbGRlcnNfMSA9IHJlcXVpcmUoXCIuL3NraWxsL1NraWxsQnVpbGRlcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTa2lsbEJ1aWxkZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTa2lsbEJ1aWxkZXJzXzEuU2tpbGxCdWlsZGVyczsgfSB9KTtcbnZhciBhc2tfc2RrX2NvcmVfMSA9IHJlcXVpcmUoXCJhc2stc2RrLWNvcmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdHRyaWJ1dGVzTWFuYWdlckZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLkF0dHJpYnV0ZXNNYW5hZ2VyRmFjdG9yeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJhc2VTa2lsbEZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLkJhc2VTa2lsbEZhY3Rvcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBc2tTZGtFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuY3JlYXRlQXNrU2RrRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDdXN0b21Ta2lsbEZhY3RvcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLkN1c3RvbVNraWxsRmFjdG9yeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlZmF1bHRBcGlDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLkRlZmF1bHRBcGlDbGllbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlc2NhcGVYbWxDaGFyYWN0ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5lc2NhcGVYbWxDaGFyYWN0ZXJzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0QWNjb3VudExpbmtpbmdBY2Nlc3NUb2tlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuZ2V0QWNjb3VudExpbmtpbmdBY2Nlc3NUb2tlbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEFwaUFjY2Vzc1Rva2VuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5nZXRBcGlBY2Nlc3NUb2tlbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldERldmljZUlkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5nZXREZXZpY2VJZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFVzZXJJZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuZ2V0VXNlcklkOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RGlhbG9nU3RhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLmdldERpYWxvZ1N0YXRlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0SW50ZW50TmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuZ2V0SW50ZW50TmFtZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldExvY2FsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuZ2V0TG9jYWxlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0UmVxdWVzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuZ2V0UmVxdWVzdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFJlcXVlc3RUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5nZXRSZXF1ZXN0VHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFNsb3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLmdldFNsb3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTbG90VmFsdWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLmdldFNsb3RWYWx1ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFN1cHBvcnRlZEludGVyZmFjZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLmdldFN1cHBvcnRlZEludGVyZmFjZXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRWaWV3cG9ydERwaUdyb3VwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5nZXRWaWV3cG9ydERwaUdyb3VwOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Vmlld3BvcnRPcmllbnRhdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuZ2V0Vmlld3BvcnRPcmllbnRhdGlvbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFZpZXdwb3J0UHJvZmlsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuZ2V0Vmlld3BvcnRQcm9maWxlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Vmlld3BvcnRTaXplR3JvdXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLmdldFZpZXdwb3J0U2l6ZUdyb3VwOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW1hZ2VIZWxwZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLkltYWdlSGVscGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOZXdTZXNzaW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5pc05ld1Nlc3Npb247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQbGFpblRleHRDb250ZW50SGVscGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5QbGFpblRleHRDb250ZW50SGVscGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVzcG9uc2VGYWN0b3J5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5SZXNwb25zZUZhY3Rvcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSaWNoVGV4dENvbnRlbnRIZWxwZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFza19zZGtfY29yZV8xLlJpY2hUZXh0Q29udGVudEhlbHBlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNraWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5Ta2lsbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRleHRDb250ZW50SGVscGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2NvcmVfMS5UZXh0Q29udGVudEhlbHBlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZpZXdwb3J0RHBpR3JvdXBPcmRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuVmlld3BvcnREcGlHcm91cE9yZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmlld3BvcnRTaXplR3JvdXBPcmRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19jb3JlXzEuVmlld3BvcnRTaXplR3JvdXBPcmRlcjsgfSB9KTtcbnZhciBhc2tfc2RrX2R5bmFtb2RiX3BlcnNpc3RlbmNlX2FkYXB0ZXJfMSA9IHJlcXVpcmUoXCJhc2stc2RrLWR5bmFtb2RiLXBlcnNpc3RlbmNlLWFkYXB0ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNrX3Nka19keW5hbW9kYl9wZXJzaXN0ZW5jZV9hZGFwdGVyXzEuRHluYW1vRGJQZXJzaXN0ZW5jZUFkYXB0ZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJ0aXRpb25LZXlHZW5lcmF0b3JzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhc2tfc2RrX2R5bmFtb2RiX3BlcnNpc3RlbmNlX2FkYXB0ZXJfMS5QYXJ0aXRpb25LZXlHZW5lcmF0b3JzOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk/dist/index.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk/dist/skill/SkillBuilders.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SkillBuilders = void 0;\nconst ask_sdk_core_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/index.js\");\nconst StandardSkillFactory_1 = __webpack_require__(\"./node_modules/ask-sdk/dist/skill/factory/StandardSkillFactory.js\");\n/**\n * Provider for skill builder.\n */\nexports.SkillBuilders = Object.assign(Object.assign({}, ask_sdk_core_1.SkillBuilders), { standard() {\n        return StandardSkillFactory_1.StandardSkillFactory.init();\n    } });\n//# sourceMappingURL=SkillBuilders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay9kaXN0L3NraWxsL1NraWxsQnVpbGRlcnMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay9kaXN0L3NraWxsL1NraWxsQnVpbGRlcnMuanM/YWY4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNraWxsQnVpbGRlcnMgPSB2b2lkIDA7XG5jb25zdCBhc2tfc2RrX2NvcmVfMSA9IHJlcXVpcmUoXCJhc2stc2RrLWNvcmVcIik7XG5jb25zdCBTdGFuZGFyZFNraWxsRmFjdG9yeV8xID0gcmVxdWlyZShcIi4vZmFjdG9yeS9TdGFuZGFyZFNraWxsRmFjdG9yeVwiKTtcbi8qKlxuICogUHJvdmlkZXIgZm9yIHNraWxsIGJ1aWxkZXIuXG4gKi9cbmV4cG9ydHMuU2tpbGxCdWlsZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXNrX3Nka19jb3JlXzEuU2tpbGxCdWlsZGVycyksIHsgc3RhbmRhcmQoKSB7XG4gICAgICAgIHJldHVybiBTdGFuZGFyZFNraWxsRmFjdG9yeV8xLlN0YW5kYXJkU2tpbGxGYWN0b3J5LmluaXQoKTtcbiAgICB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2tpbGxCdWlsZGVycy5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk/dist/skill/SkillBuilders.js\n");

/***/ }),

/***/ "./node_modules/ask-sdk/dist/skill/factory/StandardSkillFactory.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StandardSkillFactory = void 0;\nconst ask_sdk_core_1 = __webpack_require__(\"./node_modules/ask-sdk-core/dist/index.js\");\nconst ask_sdk_dynamodb_persistence_adapter_1 = __webpack_require__(\"./node_modules/ask-sdk-dynamodb-persistence-adapter/dist/index.js\");\n/**\n * Provider for {@link StandardSkillBuilder}.\n */\nclass StandardSkillFactory {\n    static init() {\n        let thisTableName;\n        let thisAutoCreateTable;\n        let thisPartitionKeyGenerator;\n        let thisDynamoDbClient;\n        const baseSkillBuilder = ask_sdk_core_1.BaseSkillFactory.init();\n        return Object.assign(Object.assign({}, baseSkillBuilder), { getSkillConfiguration() {\n                const skillConfiguration = baseSkillBuilder.getSkillConfiguration();\n                return Object.assign(Object.assign({}, skillConfiguration), { persistenceAdapter: thisTableName\n                        ? new ask_sdk_dynamodb_persistence_adapter_1.DynamoDbPersistenceAdapter({\n                            tableName: thisTableName,\n                            createTable: thisAutoCreateTable,\n                            partitionKeyGenerator: thisPartitionKeyGenerator,\n                            dynamoDBClient: thisDynamoDbClient,\n                        })\n                        : undefined, apiClient: new ask_sdk_core_1.DefaultApiClient() });\n            },\n            withTableName(tableName) {\n                thisTableName = tableName;\n                return this;\n            },\n            withAutoCreateTable(autoCreateTable) {\n                thisAutoCreateTable = autoCreateTable;\n                return this;\n            },\n            withPartitionKeyGenerator(partitionKeyGenerator) {\n                thisPartitionKeyGenerator = partitionKeyGenerator;\n                return this;\n            },\n            withDynamoDbClient(dynamoDbClient) {\n                thisDynamoDbClient = dynamoDbClient;\n                return this;\n            } });\n    }\n}\nexports.StandardSkillFactory = StandardSkillFactory;\n//# sourceMappingURL=StandardSkillFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXNrLXNkay9kaXN0L3NraWxsL2ZhY3RvcnkvU3RhbmRhcmRTa2lsbEZhY3RvcnkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9ub2RlX21vZHVsZXMvYXNrLXNkay9kaXN0L3NraWxsL2ZhY3RvcnkvU3RhbmRhcmRTa2lsbEZhY3RvcnkuanM/NWFkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS5cbiAqIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIG9yIGluIHRoZSBcImxpY2Vuc2VcIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZFxuICogb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyXG4gKiBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZ1xuICogcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0YW5kYXJkU2tpbGxGYWN0b3J5ID0gdm9pZCAwO1xuY29uc3QgYXNrX3Nka19jb3JlXzEgPSByZXF1aXJlKFwiYXNrLXNkay1jb3JlXCIpO1xuY29uc3QgYXNrX3Nka19keW5hbW9kYl9wZXJzaXN0ZW5jZV9hZGFwdGVyXzEgPSByZXF1aXJlKFwiYXNrLXNkay1keW5hbW9kYi1wZXJzaXN0ZW5jZS1hZGFwdGVyXCIpO1xuLyoqXG4gKiBQcm92aWRlciBmb3Ige0BsaW5rIFN0YW5kYXJkU2tpbGxCdWlsZGVyfS5cbiAqL1xuY2xhc3MgU3RhbmRhcmRTa2lsbEZhY3Rvcnkge1xuICAgIHN0YXRpYyBpbml0KCkge1xuICAgICAgICBsZXQgdGhpc1RhYmxlTmFtZTtcbiAgICAgICAgbGV0IHRoaXNBdXRvQ3JlYXRlVGFibGU7XG4gICAgICAgIGxldCB0aGlzUGFydGl0aW9uS2V5R2VuZXJhdG9yO1xuICAgICAgICBsZXQgdGhpc0R5bmFtb0RiQ2xpZW50O1xuICAgICAgICBjb25zdCBiYXNlU2tpbGxCdWlsZGVyID0gYXNrX3Nka19jb3JlXzEuQmFzZVNraWxsRmFjdG9yeS5pbml0KCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGJhc2VTa2lsbEJ1aWxkZXIpLCB7IGdldFNraWxsQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbENvbmZpZ3VyYXRpb24gPSBiYXNlU2tpbGxCdWlsZGVyLmdldFNraWxsQ29uZmlndXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNraWxsQ29uZmlndXJhdGlvbiksIHsgcGVyc2lzdGVuY2VBZGFwdGVyOiB0aGlzVGFibGVOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBhc2tfc2RrX2R5bmFtb2RiX3BlcnNpc3RlbmNlX2FkYXB0ZXJfMS5EeW5hbW9EYlBlcnNpc3RlbmNlQWRhcHRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVOYW1lOiB0aGlzVGFibGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVRhYmxlOiB0aGlzQXV0b0NyZWF0ZVRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpdGlvbktleUdlbmVyYXRvcjogdGhpc1BhcnRpdGlvbktleUdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbW9EQkNsaWVudDogdGhpc0R5bmFtb0RiQ2xpZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLCBhcGlDbGllbnQ6IG5ldyBhc2tfc2RrX2NvcmVfMS5EZWZhdWx0QXBpQ2xpZW50KCkgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2l0aFRhYmxlTmFtZSh0YWJsZU5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzVGFibGVOYW1lID0gdGFibGVOYW1lO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdpdGhBdXRvQ3JlYXRlVGFibGUoYXV0b0NyZWF0ZVRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpc0F1dG9DcmVhdGVUYWJsZSA9IGF1dG9DcmVhdGVUYWJsZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aXRoUGFydGl0aW9uS2V5R2VuZXJhdG9yKHBhcnRpdGlvbktleUdlbmVyYXRvcikge1xuICAgICAgICAgICAgICAgIHRoaXNQYXJ0aXRpb25LZXlHZW5lcmF0b3IgPSBwYXJ0aXRpb25LZXlHZW5lcmF0b3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2l0aER5bmFtb0RiQ2xpZW50KGR5bmFtb0RiQ2xpZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpc0R5bmFtb0RiQ2xpZW50ID0gZHluYW1vRGJDbGllbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RhbmRhcmRTa2lsbEZhY3RvcnkgPSBTdGFuZGFyZFNraWxsRmFjdG9yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YW5kYXJkU2tpbGxGYWN0b3J5LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ask-sdk/dist/skill/factory/StandardSkillFactory.js\n");

/***/ }),

/***/ "./src/index.ts":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.handler = void 0;\nconst Alexa = __importStar(__webpack_require__(\"./node_modules/ask-sdk/dist/index.js\"));\nconst ask_sdk_1 = __webpack_require__(\"./node_modules/ask-sdk/dist/index.js\");\nconst isIntent_1 = __webpack_require__(\"./src/isIntent.ts\");\nconst CancelOrStopIntentHandler = {\n    canHandle: isIntent_1.isIntent(\"AMAZON.CancelIntent\", \"AMAZON.StopIntent\"),\n    handle(handlerInput) {\n        return handlerInput.responseBuilder\n            .speak(\"Goodbye!\")\n            .withShouldEndSession(true)\n            .getResponse();\n    },\n};\nconst HelpIntentHandler = {\n    canHandle: isIntent_1.isIntent(\"AMAZON.HelpIntent\"),\n    handle(handlerInput) {\n        return handlerInput.responseBuilder\n            .speak(\"Try saying hello!\")\n            .getResponse();\n    },\n};\nconst HelloIntentHandler = {\n    canHandle(handlerInput) {\n        return (Alexa.getRequestType(handlerInput.requestEnvelope) === \"LaunchRequest\" ||\n            isIntent_1.isIntent(\"HelloWorldIntent\")(handlerInput));\n    },\n    handle(handlerInput) {\n        let speakOutput = 'Hello yash';\n        return handlerInput.responseBuilder\n            .speak(speakOutput)\n            .withShouldEndSession(true)\n            .getResponse();\n    },\n};\nconst AnswerntentHandler = {\n    canHandle(handlerInput) {\n        return (Alexa.getRequestType(handlerInput.requestEnvelope) === \"LaunchRequest\" ||\n            isIntent_1.isIntent(\"AnswerIntent\")(handlerInput));\n    },\n    handle(handlerInput) {\n        let speakOutput = 'Whenever you are ready to play just say roll the dice';\n        return handlerInput.responseBuilder\n            .speak(speakOutput)\n            .withShouldEndSession(true)\n            .getResponse();\n    },\n};\nfunction ErrorHandler(handlerInput, error) {\n    return handlerInput.responseBuilder\n        .speak(` <amazon:emotion name=\"excited\" intensity=\"high\">\n          Abort mission, repeating, abort mission!\n        </amazon:emotion>\n        <sub alias=\",\">${ask_sdk_1.escapeXmlCharacters(error.message)}</sub>`)\n        .withShouldEndSession(true)\n        .getResponse();\n}\nexports.handler = Alexa.SkillBuilders.custom()\n    .addRequestHandlers(CancelOrStopIntentHandler, HelpIntentHandler, AnswerntentHandler, HelloIntentHandler)\n    .addErrorHandler(() => true, ErrorHandler)\n    .lambda();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9zcmMvaW5kZXgudHM/MzNiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYW5kbGVyID0gdm9pZCAwO1xuY29uc3QgQWxleGEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImFzay1zZGtcIikpO1xuY29uc3QgYXNrX3Nka18xID0gcmVxdWlyZShcImFzay1zZGtcIik7XG5jb25zdCBpc0ludGVudF8xID0gcmVxdWlyZShcIi4vaXNJbnRlbnRcIik7XG5jb25zdCBDYW5jZWxPclN0b3BJbnRlbnRIYW5kbGVyID0ge1xuICAgIGNhbkhhbmRsZTogaXNJbnRlbnRfMS5pc0ludGVudChcIkFNQVpPTi5DYW5jZWxJbnRlbnRcIiwgXCJBTUFaT04uU3RvcEludGVudFwiKSxcbiAgICBoYW5kbGUoaGFuZGxlcklucHV0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVySW5wdXQucmVzcG9uc2VCdWlsZGVyXG4gICAgICAgICAgICAuc3BlYWsoXCJHb29kYnllIVwiKVxuICAgICAgICAgICAgLndpdGhTaG91bGRFbmRTZXNzaW9uKHRydWUpXG4gICAgICAgICAgICAuZ2V0UmVzcG9uc2UoKTtcbiAgICB9LFxufTtcbmNvbnN0IEhlbHBJbnRlbnRIYW5kbGVyID0ge1xuICAgIGNhbkhhbmRsZTogaXNJbnRlbnRfMS5pc0ludGVudChcIkFNQVpPTi5IZWxwSW50ZW50XCIpLFxuICAgIGhhbmRsZShoYW5kbGVySW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJJbnB1dC5yZXNwb25zZUJ1aWxkZXJcbiAgICAgICAgICAgIC5zcGVhayhcIlRyeSBzYXlpbmcgaGVsbG8hXCIpXG4gICAgICAgICAgICAuZ2V0UmVzcG9uc2UoKTtcbiAgICB9LFxufTtcbmNvbnN0IEhlbGxvSW50ZW50SGFuZGxlciA9IHtcbiAgICBjYW5IYW5kbGUoaGFuZGxlcklucHV0KSB7XG4gICAgICAgIHJldHVybiAoQWxleGEuZ2V0UmVxdWVzdFR5cGUoaGFuZGxlcklucHV0LnJlcXVlc3RFbnZlbG9wZSkgPT09IFwiTGF1bmNoUmVxdWVzdFwiIHx8XG4gICAgICAgICAgICBpc0ludGVudF8xLmlzSW50ZW50KFwiSGVsbG9Xb3JsZEludGVudFwiKShoYW5kbGVySW5wdXQpKTtcbiAgICB9LFxuICAgIGhhbmRsZShoYW5kbGVySW5wdXQpIHtcbiAgICAgICAgbGV0IHNwZWFrT3V0cHV0ID0gJ0hlbGxvIHlhc2gnO1xuICAgICAgICByZXR1cm4gaGFuZGxlcklucHV0LnJlc3BvbnNlQnVpbGRlclxuICAgICAgICAgICAgLnNwZWFrKHNwZWFrT3V0cHV0KVxuICAgICAgICAgICAgLndpdGhTaG91bGRFbmRTZXNzaW9uKHRydWUpXG4gICAgICAgICAgICAuZ2V0UmVzcG9uc2UoKTtcbiAgICB9LFxufTtcbmNvbnN0IEFuc3dlcm50ZW50SGFuZGxlciA9IHtcbiAgICBjYW5IYW5kbGUoaGFuZGxlcklucHV0KSB7XG4gICAgICAgIHJldHVybiAoQWxleGEuZ2V0UmVxdWVzdFR5cGUoaGFuZGxlcklucHV0LnJlcXVlc3RFbnZlbG9wZSkgPT09IFwiTGF1bmNoUmVxdWVzdFwiIHx8XG4gICAgICAgICAgICBpc0ludGVudF8xLmlzSW50ZW50KFwiQW5zd2VySW50ZW50XCIpKGhhbmRsZXJJbnB1dCkpO1xuICAgIH0sXG4gICAgaGFuZGxlKGhhbmRsZXJJbnB1dCkge1xuICAgICAgICBsZXQgc3BlYWtPdXRwdXQgPSAnV2hlbmV2ZXIgeW91IGFyZSByZWFkeSB0byBwbGF5IGp1c3Qgc2F5IHJvbGwgdGhlIGRpY2UnO1xuICAgICAgICByZXR1cm4gaGFuZGxlcklucHV0LnJlc3BvbnNlQnVpbGRlclxuICAgICAgICAgICAgLnNwZWFrKHNwZWFrT3V0cHV0KVxuICAgICAgICAgICAgLndpdGhTaG91bGRFbmRTZXNzaW9uKHRydWUpXG4gICAgICAgICAgICAuZ2V0UmVzcG9uc2UoKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIEVycm9ySGFuZGxlcihoYW5kbGVySW5wdXQsIGVycm9yKSB7XG4gICAgcmV0dXJuIGhhbmRsZXJJbnB1dC5yZXNwb25zZUJ1aWxkZXJcbiAgICAgICAgLnNwZWFrKGAgPGFtYXpvbjplbW90aW9uIG5hbWU9XCJleGNpdGVkXCIgaW50ZW5zaXR5PVwiaGlnaFwiPlxuICAgICAgICAgIEFib3J0IG1pc3Npb24sIHJlcGVhdGluZywgYWJvcnQgbWlzc2lvbiFcbiAgICAgICAgPC9hbWF6b246ZW1vdGlvbj5cbiAgICAgICAgPHN1YiBhbGlhcz1cIixcIj4ke2Fza19zZGtfMS5lc2NhcGVYbWxDaGFyYWN0ZXJzKGVycm9yLm1lc3NhZ2UpfTwvc3ViPmApXG4gICAgICAgIC53aXRoU2hvdWxkRW5kU2Vzc2lvbih0cnVlKVxuICAgICAgICAuZ2V0UmVzcG9uc2UoKTtcbn1cbmV4cG9ydHMuaGFuZGxlciA9IEFsZXhhLlNraWxsQnVpbGRlcnMuY3VzdG9tKClcbiAgICAuYWRkUmVxdWVzdEhhbmRsZXJzKENhbmNlbE9yU3RvcEludGVudEhhbmRsZXIsIEhlbHBJbnRlbnRIYW5kbGVyLCBBbnN3ZXJudGVudEhhbmRsZXIsIEhlbGxvSW50ZW50SGFuZGxlcilcbiAgICAuYWRkRXJyb3JIYW5kbGVyKCgpID0+IHRydWUsIEVycm9ySGFuZGxlcilcbiAgICAubGFtYmRhKCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "./src/isIntent.ts":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isIntent = void 0;\nconst Alexa = __importStar(__webpack_require__(\"./node_modules/ask-sdk/dist/index.js\"));\nfunction isIntent(...intents) {\n    return (handlerInput) => Alexa.getRequestType(handlerInput.requestEnvelope) === \"IntentRequest\" &&\n        intents.some((x) => Alexa.getIntentName(handlerInput.requestEnvelope) === x);\n}\nexports.isIntent = isIntent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaXNJbnRlbnQudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNrYWdlLmpzb24vLi9zcmMvaXNJbnRlbnQudHM/Y2QyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0ludGVudCA9IHZvaWQgMDtcbmNvbnN0IEFsZXhhID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJhc2stc2RrXCIpKTtcbmZ1bmN0aW9uIGlzSW50ZW50KC4uLmludGVudHMpIHtcbiAgICByZXR1cm4gKGhhbmRsZXJJbnB1dCkgPT4gQWxleGEuZ2V0UmVxdWVzdFR5cGUoaGFuZGxlcklucHV0LnJlcXVlc3RFbnZlbG9wZSkgPT09IFwiSW50ZW50UmVxdWVzdFwiICYmXG4gICAgICAgIGludGVudHMuc29tZSgoeCkgPT4gQWxleGEuZ2V0SW50ZW50TmFtZShoYW5kbGVySW5wdXQucmVxdWVzdEVudmVsb3BlKSA9PT0geCk7XG59XG5leHBvcnRzLmlzSW50ZW50ID0gaXNJbnRlbnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/isIntent.ts\n");

/***/ }),

/***/ "aws-sdk":
/***/ ((module) => {

module.exports = require("aws-sdk");;

/***/ }),

/***/ "http":
/***/ ((module) => {

module.exports = require("http");;

/***/ }),

/***/ "https":
/***/ ((module) => {

module.exports = require("https");;

/***/ }),

/***/ "url":
/***/ ((module) => {

module.exports = require("url");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;